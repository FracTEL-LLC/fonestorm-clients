/**
 * FoneStorm API 2.4.0 (Thunder)
 * FracTEL's Middleware API
 *
 * OpenAPI spec version: 2.4.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/InlineResponse2012', 'model/InlineResponse2014'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/InlineResponse2012'), require('../model/InlineResponse2014'));
  } else {
    // Browser globals (root is window)
    if (!root.FoneStormApi240Thunder) {
      root.FoneStormApi240Thunder = {};
    }
    root.FoneStormApi240Thunder.FaxesApi = factory(root.FoneStormApi240Thunder.ApiClient, root.FoneStormApi240Thunder.Error, root.FoneStormApi240Thunder.InlineResponse2012, root.FoneStormApi240Thunder.InlineResponse2014);
  }
}(this, function(ApiClient, Error, InlineResponse2012, InlineResponse2014) {
  'use strict';

  /**
   * Faxes service.
   * @module api/FaxesApi
   * @version 2.4.0
   */

  /**
   * Constructs a new FaxesApi. 
   * @alias module:api/FaxesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the configureFaxReceiveNotify operation.
     * @callback module:api/FaxesApi~configureFaxReceiveNotifyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Receive Callback
     * Configure the callback URL to notify when an inbound fax is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
     * @param {String} fonenumber FoneNumber associated with the account
     * @param {module:model/String} method Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.
     * @param {String} url Callback URL. See **Notes** for additional information.
     * @param {Object} opts Optional parameters
     * @param {String} opts.urlUsername Username for HTTP **Basic** authentication scheme
     * @param {String} opts.urlPassword Password for HTTP **Basic** authentication scheme
     * @param {module:api/FaxesApi~configureFaxReceiveNotifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2014}
     */
    this.configureFaxReceiveNotify = function(fonenumber, method, url, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fonenumber' is set
      if (fonenumber === undefined || fonenumber === null) {
        throw new Error("Missing the required parameter 'fonenumber' when calling configureFaxReceiveNotify");
      }

      // verify the required parameter 'method' is set
      if (method === undefined || method === null) {
        throw new Error("Missing the required parameter 'method' when calling configureFaxReceiveNotify");
      }

      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling configureFaxReceiveNotify");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'fonenumber': fonenumber,
        'method': method,
        'url': url,
        'url_username': opts['urlUsername'],
        'url_password': opts['urlPassword']
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/faxes/receive_notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configureFaxReceiveNotify_0 operation.
     * @callback module:api/FaxesApi~configureFaxReceiveNotify_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Receive Callback
     * Configure the callback URL to notify when an inbound fax is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
     * @param {String} fonenumber FoneNumber associated with the account
     * @param {module:model/String} method Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.
     * @param {String} url Callback URL. See **Notes** for additional information.
     * @param {Object} opts Optional parameters
     * @param {String} opts.urlUsername Username for HTTP **Basic** authentication scheme
     * @param {String} opts.urlPassword Password for HTTP **Basic** authentication scheme
     * @param {module:api/FaxesApi~configureFaxReceiveNotify_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2014}
     */
    this.configureFaxReceiveNotify_0 = function(fonenumber, method, url, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fonenumber' is set
      if (fonenumber === undefined || fonenumber === null) {
        throw new Error("Missing the required parameter 'fonenumber' when calling configureFaxReceiveNotify_0");
      }

      // verify the required parameter 'method' is set
      if (method === undefined || method === null) {
        throw new Error("Missing the required parameter 'method' when calling configureFaxReceiveNotify_0");
      }

      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling configureFaxReceiveNotify_0");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'fonenumber': fonenumber,
        'method': method,
        'url': url,
        'url_username': opts['urlUsername'],
        'url_password': opts['urlPassword']
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/faxes/receive_notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configureFaxSendNotify operation.
     * @callback module:api/FaxesApi~configureFaxSendNotifyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Send Callback
     * Configure the callback URL to notify when an outbound fax is made. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
     * @param {String} fonenumber FoneNumber associated with the account
     * @param {module:model/String} method Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.
     * @param {String} url Callback URL. See **Notes** for additional information.
     * @param {Object} opts Optional parameters
     * @param {String} opts.urlUsername Username for HTTP **Basic** authentication scheme
     * @param {String} opts.urlPassword Password for HTTP **Basic** authentication scheme
     * @param {module:api/FaxesApi~configureFaxSendNotifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2014}
     */
    this.configureFaxSendNotify = function(fonenumber, method, url, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fonenumber' is set
      if (fonenumber === undefined || fonenumber === null) {
        throw new Error("Missing the required parameter 'fonenumber' when calling configureFaxSendNotify");
      }

      // verify the required parameter 'method' is set
      if (method === undefined || method === null) {
        throw new Error("Missing the required parameter 'method' when calling configureFaxSendNotify");
      }

      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling configureFaxSendNotify");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'fonenumber': fonenumber,
        'method': method,
        'url': url,
        'url_username': opts['urlUsername'],
        'url_password': opts['urlPassword']
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/faxes/send_notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configureFaxSendNotify_0 operation.
     * @callback module:api/FaxesApi~configureFaxSendNotify_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Send Callback
     * Configure the callback URL to notify when an outbound fax is made. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
     * @param {String} fonenumber FoneNumber associated with the account
     * @param {module:model/String} method Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.
     * @param {String} url Callback URL. See **Notes** for additional information.
     * @param {Object} opts Optional parameters
     * @param {String} opts.urlUsername Username for HTTP **Basic** authentication scheme
     * @param {String} opts.urlPassword Password for HTTP **Basic** authentication scheme
     * @param {module:api/FaxesApi~configureFaxSendNotify_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2014}
     */
    this.configureFaxSendNotify_0 = function(fonenumber, method, url, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fonenumber' is set
      if (fonenumber === undefined || fonenumber === null) {
        throw new Error("Missing the required parameter 'fonenumber' when calling configureFaxSendNotify_0");
      }

      // verify the required parameter 'method' is set
      if (method === undefined || method === null) {
        throw new Error("Missing the required parameter 'method' when calling configureFaxSendNotify_0");
      }

      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling configureFaxSendNotify_0");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'fonenumber': fonenumber,
        'method': method,
        'url': url,
        'url_username': opts['urlUsername'],
        'url_password': opts['urlPassword']
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/faxes/send_notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createFax operation.
     * @callback module:api/FaxesApi~createFaxCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2012} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Fax
     * Send a fax to a recipient phone number.
     * @param {String} fonenumber FoneNumber to use for fax
     * @param {String} to Receiving 10 digit phone number
     * @param {Object} opts Optional parameters
     * @param {String} opts.message Message to fax
     * @param {String} opts.pdf URL of a PDF file to send with fax
     * @param {module:api/FaxesApi~createFaxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2012}
     */
    this.createFax = function(fonenumber, to, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fonenumber' is set
      if (fonenumber === undefined || fonenumber === null) {
        throw new Error("Missing the required parameter 'fonenumber' when calling createFax");
      }

      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling createFax");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'fonenumber': fonenumber,
        'to': to,
        'message': opts['message'],
        'pdf': opts['pdf']
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2012;

      return this.apiClient.callApi(
        '/faxes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createFax_0 operation.
     * @callback module:api/FaxesApi~createFax_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2012} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Fax
     * Send a fax to a recipient phone number.
     * @param {String} fonenumber FoneNumber to use for fax
     * @param {String} to Receiving 10 digit phone number
     * @param {Object} opts Optional parameters
     * @param {String} opts.message Message to fax
     * @param {String} opts.pdf URL of a PDF file to send with fax
     * @param {module:api/FaxesApi~createFax_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2012}
     */
    this.createFax_0 = function(fonenumber, to, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fonenumber' is set
      if (fonenumber === undefined || fonenumber === null) {
        throw new Error("Missing the required parameter 'fonenumber' when calling createFax_0");
      }

      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling createFax_0");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'fonenumber': fonenumber,
        'to': to,
        'message': opts['message'],
        'pdf': opts['pdf']
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2012;

      return this.apiClient.callApi(
        '/faxes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
