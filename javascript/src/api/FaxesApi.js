/**
 * FoneStorm API 2.2.0
 * Extended API Documentation: https://developer.fonestorm.com
 *
 * OpenAPI spec version: 2.2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.FoneStormApi220) {
      root.FoneStormApi220 = {};
    }
    root.FoneStormApi220.FaxesApi = factory(root.FoneStormApi220.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Faxes service.
   * @module api/FaxesApi
   * @version 2.2.0
   */

  /**
   * Constructs a new FaxesApi. 
   * @alias module:api/FaxesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the postFaxes operation.
     * @callback module:api/FaxesApi~postFaxesCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new fax under the account.
     * Returns a JSON response
     * @param {String} fonenumber FracTEL phone number to use for fax.
     * @param {String} to Phone number to fax.
     * @param {Object} opts Optional parameters
     * @param {String} opts.message Message to fax.
     * @param {String} opts.pdf 
     * @param {module:api/FaxesApi~postFaxesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.postFaxes = function(fonenumber, to, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fonenumber' is set
      if (fonenumber === undefined || fonenumber === null) {
        throw new Error("Missing the required parameter 'fonenumber' when calling postFaxes");
      }

      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling postFaxes");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'fonenumber': fonenumber,
        'to': to,
        'message': opts['message'],
        'pdf': opts['pdf']
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/faxes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postFaxesReceiveNotify operation.
     * @callback module:api/FaxesApi~postFaxesReceiveNotifyCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configure the callback URL to notify when a fax is received.
     * Returns a JSON response
     * @param {String} fonenumber Your FracTEL phone number.
     * @param {module:model/String} method Callback URL method.
     * @param {String} url Callback URL.
     * @param {Object} opts Optional parameters
     * @param {String} opts.urlUsername Callback URL username.
     * @param {String} opts.urlPassword Callback URL password.
     * @param {module:api/FaxesApi~postFaxesReceiveNotifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.postFaxesReceiveNotify = function(fonenumber, method, url, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fonenumber' is set
      if (fonenumber === undefined || fonenumber === null) {
        throw new Error("Missing the required parameter 'fonenumber' when calling postFaxesReceiveNotify");
      }

      // verify the required parameter 'method' is set
      if (method === undefined || method === null) {
        throw new Error("Missing the required parameter 'method' when calling postFaxesReceiveNotify");
      }

      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling postFaxesReceiveNotify");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'fonenumber': fonenumber,
        'method': method,
        'url': url,
        'url_username': opts['urlUsername'],
        'url_password': opts['urlPassword']
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/faxes/receive_notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postFaxesSendNotify operation.
     * @callback module:api/FaxesApi~postFaxesSendNotifyCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configure the callback URL to notify when a fax is made.
     * Returns a JSON response
     * @param {String} fonenumber Your FracTEL phone number
     * @param {module:model/String} method Callback URL method.
     * @param {String} url Callback URL.
     * @param {Object} opts Optional parameters
     * @param {String} opts.urlUsername Callback URL username.
     * @param {String} opts.urlPassword Callback URL password.
     * @param {module:api/FaxesApi~postFaxesSendNotifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.postFaxesSendNotify = function(fonenumber, method, url, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fonenumber' is set
      if (fonenumber === undefined || fonenumber === null) {
        throw new Error("Missing the required parameter 'fonenumber' when calling postFaxesSendNotify");
      }

      // verify the required parameter 'method' is set
      if (method === undefined || method === null) {
        throw new Error("Missing the required parameter 'method' when calling postFaxesSendNotify");
      }

      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling postFaxesSendNotify");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'fonenumber': fonenumber,
        'method': method,
        'url': url,
        'url_username': opts['urlUsername'],
        'url_password': opts['urlPassword']
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/faxes/send_notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
