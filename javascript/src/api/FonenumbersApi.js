/**
 * FracTEL API 2.1.2
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.1.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.FracTelApi212) {
      root.FracTelApi212 = {};
    }
    root.FracTelApi212.FonenumbersApi = factory(root.FracTelApi212.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Fonenumbers service.
   * @module api/FonenumbersApi
   * @version 2.1.2
   */

  /**
   * Constructs a new FonenumbersApi. 
   * @alias module:api/FonenumbersApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteFonenumbersFonenumber operation.
     * @callback module:api/FonenumbersApi~deleteFonenumbersFonenumberCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove fonenumber from the account.
     * Returns a JSON response
     * @param {String} fonenumber Your FracTEL fonenumber.
     * @param {module:api/FonenumbersApi~deleteFonenumbersFonenumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deleteFonenumbersFonenumber = function(fonenumber, callback) {
      var postBody = null;

      // verify the required parameter 'fonenumber' is set
      if (fonenumber === undefined || fonenumber === null) {
        throw new Error("Missing the required parameter 'fonenumber' when calling deleteFonenumbersFonenumber");
      }


      var pathParams = {
        'fonenumber': fonenumber
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/fonenumbers/{fonenumber}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFonenumbers operation.
     * @callback module:api/FonenumbersApi~getFonenumbersCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all active fonenumbers listed under the account.
     * Returns a JSON response
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.filter Filters for the response.
     * @param {module:api/FonenumbersApi~getFonenumbersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.getFonenumbers = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/fonenumbers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFonenumbersFonenumber operation.
     * @callback module:api/FonenumbersApi~getFonenumbersFonenumberCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single fonenumber listed under the account.
     * Returns a JSON response
     * @param {String} fonenumber Your FracTEL fonenumber.
     * @param {module:api/FonenumbersApi~getFonenumbersFonenumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.getFonenumbersFonenumber = function(fonenumber, callback) {
      var postBody = null;

      // verify the required parameter 'fonenumber' is set
      if (fonenumber === undefined || fonenumber === null) {
        throw new Error("Missing the required parameter 'fonenumber' when calling getFonenumbersFonenumber");
      }


      var pathParams = {
        'fonenumber': fonenumber
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/fonenumbers/{fonenumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postFonenumbers operation.
     * @callback module:api/FonenumbersApi~postFonenumbersCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Order quick fonenumber for the account.
     * Returns a JSON response
     * @param {String} areaCode A valid 3-digit Area Code.
     * @param {module:api/FonenumbersApi~postFonenumbersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.postFonenumbers = function(areaCode, callback) {
      var postBody = null;

      // verify the required parameter 'areaCode' is set
      if (areaCode === undefined || areaCode === null) {
        throw new Error("Missing the required parameter 'areaCode' when calling postFonenumbers");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'area_code': areaCode
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/fonenumbers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putFonenumbersFonenumber operation.
     * @callback module:api/FonenumbersApi~putFonenumbersFonenumberCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configure the service type for an account fonenumber.
     * Returns a JSON response
     * @param {String} fonenumber Your FracTEL fonenumber.
     * @param {module:model/String} type Message routing type.
     * @param {Object} opts Optional parameters
     * @param {String} opts.value Message routing type value.
     * @param {module:model/String} opts.urlMethod URL method.
     * @param {String} opts.urlUsername URL auth username.
     * @param {String} opts.urlPassword URL auth password.
     * @param {module:api/FonenumbersApi~putFonenumbersFonenumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.putFonenumbersFonenumber = function(fonenumber, type, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fonenumber' is set
      if (fonenumber === undefined || fonenumber === null) {
        throw new Error("Missing the required parameter 'fonenumber' when calling putFonenumbersFonenumber");
      }

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling putFonenumbersFonenumber");
      }


      var pathParams = {
        'fonenumber': fonenumber
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'type': type,
        'value': opts['value'],
        'url_method': opts['urlMethod'],
        'url_username': opts['urlUsername'],
        'url_password': opts['urlPassword']
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/fonenumbers/{fonenumber}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
