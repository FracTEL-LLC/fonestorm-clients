/**
 * FoneStorm API 2.4.0 (Thunder)
 * FracTEL's Middleware API
 *
 * OpenAPI spec version: 2.4.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/InlineResponse2001', 'model/InlineResponse2014'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/InlineResponse2001'), require('../model/InlineResponse2014'));
  } else {
    // Browser globals (root is window)
    if (!root.FoneStormApi240Thunder) {
      root.FoneStormApi240Thunder = {};
    }
    root.FoneStormApi240Thunder.FonenumbersApi = factory(root.FoneStormApi240Thunder.ApiClient, root.FoneStormApi240Thunder.Error, root.FoneStormApi240Thunder.InlineResponse2001, root.FoneStormApi240Thunder.InlineResponse2014);
  }
}(this, function(ApiClient, Error, InlineResponse2001, InlineResponse2014) {
  'use strict';

  /**
   * Fonenumbers service.
   * @module api/FonenumbersApi
   * @version 2.4.0
   */

  /**
   * Constructs a new FonenumbersApi. 
   * @alias module:api/FonenumbersApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createFonenumber operation.
     * @callback module:api/FonenumbersApi~createFonenumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create FoneNumber
     * Order a new FoneNumber for a given area code.
     * @param {String} areaCode Valid 3-digit area code
     * @param {module:api/FonenumbersApi~createFonenumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2014}
     */
    this.createFonenumber = function(areaCode, callback) {
      var postBody = null;

      // verify the required parameter 'areaCode' is set
      if (areaCode === undefined || areaCode === null) {
        throw new Error("Missing the required parameter 'areaCode' when calling createFonenumber");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'area_code': areaCode
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/fonenumbers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createFonenumber_0 operation.
     * @callback module:api/FonenumbersApi~createFonenumber_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create FoneNumber
     * Order a new FoneNumber for a given area code.
     * @param {String} areaCode Valid 3-digit area code
     * @param {module:api/FonenumbersApi~createFonenumber_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2014}
     */
    this.createFonenumber_0 = function(areaCode, callback) {
      var postBody = null;

      // verify the required parameter 'areaCode' is set
      if (areaCode === undefined || areaCode === null) {
        throw new Error("Missing the required parameter 'areaCode' when calling createFonenumber_0");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'area_code': areaCode
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/fonenumbers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFonenumber operation.
     * @callback module:api/FonenumbersApi~deleteFonenumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete FoneNumber
     * Remove a FoneNumber from an account.
     * @param {String} fonenumber FoneNumber associated with the account
     * @param {module:api/FonenumbersApi~deleteFonenumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2014}
     */
    this.deleteFonenumber = function(fonenumber, callback) {
      var postBody = null;

      // verify the required parameter 'fonenumber' is set
      if (fonenumber === undefined || fonenumber === null) {
        throw new Error("Missing the required parameter 'fonenumber' when calling deleteFonenumber");
      }


      var pathParams = {
        'fonenumber': fonenumber
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/fonenumbers/{fonenumber}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFonenumber_0 operation.
     * @callback module:api/FonenumbersApi~deleteFonenumber_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete FoneNumber
     * Remove a FoneNumber from an account.
     * @param {String} fonenumber FoneNumber associated with the account
     * @param {module:api/FonenumbersApi~deleteFonenumber_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2014}
     */
    this.deleteFonenumber_0 = function(fonenumber, callback) {
      var postBody = null;

      // verify the required parameter 'fonenumber' is set
      if (fonenumber === undefined || fonenumber === null) {
        throw new Error("Missing the required parameter 'fonenumber' when calling deleteFonenumber_0");
      }


      var pathParams = {
        'fonenumber': fonenumber
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/fonenumbers/{fonenumber}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFonenumber operation.
     * @callback module:api/FonenumbersApi~getFonenumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get FoneNumber
     * Get information for a single FoneNumber.
     * @param {String} fonenumber FoneNumber associated with the account
     * @param {module:api/FonenumbersApi~getFonenumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2014}
     */
    this.getFonenumber = function(fonenumber, callback) {
      var postBody = null;

      // verify the required parameter 'fonenumber' is set
      if (fonenumber === undefined || fonenumber === null) {
        throw new Error("Missing the required parameter 'fonenumber' when calling getFonenumber");
      }


      var pathParams = {
        'fonenumber': fonenumber
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/fonenumbers/{fonenumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFonenumber_0 operation.
     * @callback module:api/FonenumbersApi~getFonenumber_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get FoneNumber
     * Get information for a single FoneNumber.
     * @param {String} fonenumber FoneNumber associated with the account
     * @param {module:api/FonenumbersApi~getFonenumber_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2014}
     */
    this.getFonenumber_0 = function(fonenumber, callback) {
      var postBody = null;

      // verify the required parameter 'fonenumber' is set
      if (fonenumber === undefined || fonenumber === null) {
        throw new Error("Missing the required parameter 'fonenumber' when calling getFonenumber_0");
      }


      var pathParams = {
        'fonenumber': fonenumber
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/fonenumbers/{fonenumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFonenumbers operation.
     * @callback module:api/FonenumbersApi~getFonenumbersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get FoneNumbers
     * Get a list of all FoneNumbers, or a selection based on a filter.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.filter Filter the response attributes. Allowed values are &#x60;fonenumbers&#x60; or &#x60;all&#x60;. See **Notes** for additional information.
     * @param {module:api/FonenumbersApi~getFonenumbersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    this.getFonenumbers = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/fonenumbers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFonenumbers_0 operation.
     * @callback module:api/FonenumbersApi~getFonenumbers_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get FoneNumbers
     * Get a list of all FoneNumbers, or a selection based on a filter.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.filter Filter the response attributes. Allowed values are &#x60;fonenumbers&#x60; or &#x60;all&#x60;. See **Notes** for additional information.
     * @param {module:api/FonenumbersApi~getFonenumbers_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    this.getFonenumbers_0 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/fonenumbers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setFonenumberServiceType operation.
     * @callback module:api/FonenumbersApi~setFonenumberServiceTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Service Type
     * Set service type for a FoneNumber.
     * @param {String} fonenumber FoneNumber associated with the account
     * @param {module:model/String} serviceType Service type. Allowed values are &#x60;Conference&#x60;, &#x60;Hangup&#x60;, &#x60;Busy&#x60;, &#x60;Reject&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.serviceId Service id
     * @param {module:api/FonenumbersApi~setFonenumberServiceTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2014}
     */
    this.setFonenumberServiceType = function(fonenumber, serviceType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fonenumber' is set
      if (fonenumber === undefined || fonenumber === null) {
        throw new Error("Missing the required parameter 'fonenumber' when calling setFonenumberServiceType");
      }

      // verify the required parameter 'serviceType' is set
      if (serviceType === undefined || serviceType === null) {
        throw new Error("Missing the required parameter 'serviceType' when calling setFonenumberServiceType");
      }


      var pathParams = {
        'fonenumber': fonenumber
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'service_type': serviceType,
        'service_id': opts['serviceId']
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/fonenumbers/{fonenumber}/service', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setFonenumberServiceType_0 operation.
     * @callback module:api/FonenumbersApi~setFonenumberServiceType_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Service Type
     * Set service type for a FoneNumber.
     * @param {String} fonenumber FoneNumber associated with the account
     * @param {module:model/String} serviceType Service type. Allowed values are &#x60;Conference&#x60;, &#x60;Hangup&#x60;, &#x60;Busy&#x60;, &#x60;Reject&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.serviceId Service id
     * @param {module:api/FonenumbersApi~setFonenumberServiceType_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2014}
     */
    this.setFonenumberServiceType_0 = function(fonenumber, serviceType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fonenumber' is set
      if (fonenumber === undefined || fonenumber === null) {
        throw new Error("Missing the required parameter 'fonenumber' when calling setFonenumberServiceType_0");
      }

      // verify the required parameter 'serviceType' is set
      if (serviceType === undefined || serviceType === null) {
        throw new Error("Missing the required parameter 'serviceType' when calling setFonenumberServiceType_0");
      }


      var pathParams = {
        'fonenumber': fonenumber
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'service_type': serviceType,
        'service_id': opts['serviceId']
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/fonenumbers/{fonenumber}/service', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFonenumber operation.
     * @callback module:api/FonenumbersApi~updateFonenumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update FoneNumber
     * Update a FoneNumber.
     * @param {String} fonenumber FoneNumber associated with the account
     * @param {module:model/String} type Message routing type. Allowed values are &#x60;None&#x60;, &#x60;Device&#x60;, &#x60;Email&#x60;, &#x60;URL&#x60;, or &#x60;Forward&#x60;.
     * @param {String} value Message routing type value
     * @param {module:model/String} urlMethod URL method. Allowed values are &#x60;GET&#x60;, &#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.
     * @param {Object} opts Optional parameters
     * @param {String} opts.urlUsername Username for HTTP **Basic** authentication scheme
     * @param {String} opts.urlPassword Password for HTTP **Basic** authentication scheme
     * @param {module:api/FonenumbersApi~updateFonenumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2014}
     */
    this.updateFonenumber = function(fonenumber, type, value, urlMethod, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fonenumber' is set
      if (fonenumber === undefined || fonenumber === null) {
        throw new Error("Missing the required parameter 'fonenumber' when calling updateFonenumber");
      }

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling updateFonenumber");
      }

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling updateFonenumber");
      }

      // verify the required parameter 'urlMethod' is set
      if (urlMethod === undefined || urlMethod === null) {
        throw new Error("Missing the required parameter 'urlMethod' when calling updateFonenumber");
      }


      var pathParams = {
        'fonenumber': fonenumber
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'type': type,
        'value': value,
        'url_method': urlMethod,
        'url_username': opts['urlUsername'],
        'url_password': opts['urlPassword']
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/fonenumbers/{fonenumber}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFonenumber_0 operation.
     * @callback module:api/FonenumbersApi~updateFonenumber_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update FoneNumber
     * Update a FoneNumber.
     * @param {String} fonenumber FoneNumber associated with the account
     * @param {module:model/String} type Message routing type. Allowed values are &#x60;None&#x60;, &#x60;Device&#x60;, &#x60;Email&#x60;, &#x60;URL&#x60;, or &#x60;Forward&#x60;.
     * @param {String} value Message routing type value
     * @param {module:model/String} urlMethod URL method. Allowed values are &#x60;GET&#x60;, &#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.
     * @param {Object} opts Optional parameters
     * @param {String} opts.urlUsername Username for HTTP **Basic** authentication scheme
     * @param {String} opts.urlPassword Password for HTTP **Basic** authentication scheme
     * @param {module:api/FonenumbersApi~updateFonenumber_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2014}
     */
    this.updateFonenumber_0 = function(fonenumber, type, value, urlMethod, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fonenumber' is set
      if (fonenumber === undefined || fonenumber === null) {
        throw new Error("Missing the required parameter 'fonenumber' when calling updateFonenumber_0");
      }

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling updateFonenumber_0");
      }

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling updateFonenumber_0");
      }

      // verify the required parameter 'urlMethod' is set
      if (urlMethod === undefined || urlMethod === null) {
        throw new Error("Missing the required parameter 'urlMethod' when calling updateFonenumber_0");
      }


      var pathParams = {
        'fonenumber': fonenumber
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'type': type,
        'value': value,
        'url_method': urlMethod,
        'url_username': opts['urlUsername'],
        'url_password': opts['urlPassword']
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/fonenumbers/{fonenumber}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
