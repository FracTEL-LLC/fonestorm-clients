/**
 * FoneStorm API 2.2.0 (Breeze)
 * FracTEL's Middleware API
 *
 * OpenAPI spec version: 2.2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/InlineResponse2013', 'model/InlineResponse2014'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/InlineResponse2013'), require('../model/InlineResponse2014'));
  } else {
    // Browser globals (root is window)
    if (!root.FoneStormApi220Breeze) {
      root.FoneStormApi220Breeze = {};
    }
    root.FoneStormApi220Breeze.MessagesApi = factory(root.FoneStormApi220Breeze.ApiClient, root.FoneStormApi220Breeze.Error, root.FoneStormApi220Breeze.InlineResponse2013, root.FoneStormApi220Breeze.InlineResponse2014);
  }
}(this, function(ApiClient, Error, InlineResponse2013, InlineResponse2014) {
  'use strict';

  /**
   * Messages service.
   * @module api/MessagesApi
   * @version 2.2.0
   */

  /**
   * Constructs a new MessagesApi. 
   * @alias module:api/MessagesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the configureMessageReceive operation.
     * @callback module:api/MessagesApi~configureMessageReceiveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2013} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Delivery Service
     * Configure the delivery service type used as the destination for messages received at a FoneNumber.
     * @param {String} fonenumber Your FracTEL FoneNumber
     * @param {module:model/String} type Message routing type
     * @param {String} value Message routing type value
     * @param {module:model/String} urlMethod URL method (when &#x60;type&#x60; is URL)
     * @param {Object} opts Optional parameters
     * @param {String} opts.urlUsername Username for HTTP **Basic** authentication scheme
     * @param {String} opts.urlPassword Password for HTTP **Basic** authentication scheme
     * @param {module:api/MessagesApi~configureMessageReceiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2013}
     */
    this.configureMessageReceive = function(fonenumber, type, value, urlMethod, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fonenumber' is set
      if (fonenumber === undefined || fonenumber === null) {
        throw new Error("Missing the required parameter 'fonenumber' when calling configureMessageReceive");
      }

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling configureMessageReceive");
      }

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling configureMessageReceive");
      }

      // verify the required parameter 'urlMethod' is set
      if (urlMethod === undefined || urlMethod === null) {
        throw new Error("Missing the required parameter 'urlMethod' when calling configureMessageReceive");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'fonenumber': fonenumber,
        'type': type,
        'value': value,
        'url_method': urlMethod,
        'url_username': opts['urlUsername'],
        'url_password': opts['urlPassword']
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/messages/receive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configureMessageReceiveNotify operation.
     * @callback module:api/MessagesApi~configureMessageReceiveNotifyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2013} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Receive Callback
     * Configure the callback URL to notify when a message is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
     * @param {String} fonenumber Your FracTEL FoneNumber
     * @param {module:model/String} method Callback URL method
     * @param {String} url Callback URL. See **Notes** for additional information.
     * @param {Object} opts Optional parameters
     * @param {String} opts.urlUsername Username for HTTP **Basic** authentication scheme
     * @param {String} opts.urlPassword Password for HTTP **Basic** authentication scheme
     * @param {module:api/MessagesApi~configureMessageReceiveNotifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2013}
     */
    this.configureMessageReceiveNotify = function(fonenumber, method, url, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fonenumber' is set
      if (fonenumber === undefined || fonenumber === null) {
        throw new Error("Missing the required parameter 'fonenumber' when calling configureMessageReceiveNotify");
      }

      // verify the required parameter 'method' is set
      if (method === undefined || method === null) {
        throw new Error("Missing the required parameter 'method' when calling configureMessageReceiveNotify");
      }

      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling configureMessageReceiveNotify");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'fonenumber': fonenumber,
        'method': method,
        'url': url,
        'url_username': opts['urlUsername'],
        'url_password': opts['urlPassword']
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/messages/receive_notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configureMessageReceiveNotify_0 operation.
     * @callback module:api/MessagesApi~configureMessageReceiveNotify_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2013} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Receive Callback
     * Configure the callback URL to notify when a message is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
     * @param {String} fonenumber Your FracTEL FoneNumber
     * @param {module:model/String} method Callback URL method
     * @param {String} url Callback URL. See **Notes** for additional information.
     * @param {Object} opts Optional parameters
     * @param {String} opts.urlUsername Username for HTTP **Basic** authentication scheme
     * @param {String} opts.urlPassword Password for HTTP **Basic** authentication scheme
     * @param {module:api/MessagesApi~configureMessageReceiveNotify_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2013}
     */
    this.configureMessageReceiveNotify_0 = function(fonenumber, method, url, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fonenumber' is set
      if (fonenumber === undefined || fonenumber === null) {
        throw new Error("Missing the required parameter 'fonenumber' when calling configureMessageReceiveNotify_0");
      }

      // verify the required parameter 'method' is set
      if (method === undefined || method === null) {
        throw new Error("Missing the required parameter 'method' when calling configureMessageReceiveNotify_0");
      }

      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling configureMessageReceiveNotify_0");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'fonenumber': fonenumber,
        'method': method,
        'url': url,
        'url_username': opts['urlUsername'],
        'url_password': opts['urlPassword']
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/messages/receive_notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configureMessageReceive_0 operation.
     * @callback module:api/MessagesApi~configureMessageReceive_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2013} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Delivery Service
     * Configure the delivery service type used as the destination for messages received at a FoneNumber.
     * @param {String} fonenumber Your FracTEL FoneNumber
     * @param {module:model/String} type Message routing type
     * @param {String} value Message routing type value
     * @param {module:model/String} urlMethod URL method (when &#x60;type&#x60; is URL)
     * @param {Object} opts Optional parameters
     * @param {String} opts.urlUsername Username for HTTP **Basic** authentication scheme
     * @param {String} opts.urlPassword Password for HTTP **Basic** authentication scheme
     * @param {module:api/MessagesApi~configureMessageReceive_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2013}
     */
    this.configureMessageReceive_0 = function(fonenumber, type, value, urlMethod, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fonenumber' is set
      if (fonenumber === undefined || fonenumber === null) {
        throw new Error("Missing the required parameter 'fonenumber' when calling configureMessageReceive_0");
      }

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling configureMessageReceive_0");
      }

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling configureMessageReceive_0");
      }

      // verify the required parameter 'urlMethod' is set
      if (urlMethod === undefined || urlMethod === null) {
        throw new Error("Missing the required parameter 'urlMethod' when calling configureMessageReceive_0");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'fonenumber': fonenumber,
        'type': type,
        'value': value,
        'url_method': urlMethod,
        'url_username': opts['urlUsername'],
        'url_password': opts['urlPassword']
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/messages/receive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configureMessageSendNotify operation.
     * @callback module:api/MessagesApi~configureMessageSendNotifyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2013} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Send Callback
     * Configure the callback URL to notify when a message is sent. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
     * @param {String} fonenumber Your FracTEL FoneNumber
     * @param {module:model/String} method Callback URL method
     * @param {String} url Callback URL. See **Notes** for additional information.
     * @param {Object} opts Optional parameters
     * @param {String} opts.urlUsername Username for HTTP **Basic** authentication scheme
     * @param {String} opts.urlPassword Password for HTTP **Basic** authentication scheme
     * @param {module:api/MessagesApi~configureMessageSendNotifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2013}
     */
    this.configureMessageSendNotify = function(fonenumber, method, url, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fonenumber' is set
      if (fonenumber === undefined || fonenumber === null) {
        throw new Error("Missing the required parameter 'fonenumber' when calling configureMessageSendNotify");
      }

      // verify the required parameter 'method' is set
      if (method === undefined || method === null) {
        throw new Error("Missing the required parameter 'method' when calling configureMessageSendNotify");
      }

      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling configureMessageSendNotify");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'fonenumber': fonenumber,
        'method': method,
        'url': url,
        'url_username': opts['urlUsername'],
        'url_password': opts['urlPassword']
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/messages/send_notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configureMessageSendNotify_0 operation.
     * @callback module:api/MessagesApi~configureMessageSendNotify_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2013} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Send Callback
     * Configure the callback URL to notify when a message is sent. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
     * @param {String} fonenumber Your FracTEL FoneNumber
     * @param {module:model/String} method Callback URL method
     * @param {String} url Callback URL. See **Notes** for additional information.
     * @param {Object} opts Optional parameters
     * @param {String} opts.urlUsername Username for HTTP **Basic** authentication scheme
     * @param {String} opts.urlPassword Password for HTTP **Basic** authentication scheme
     * @param {module:api/MessagesApi~configureMessageSendNotify_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2013}
     */
    this.configureMessageSendNotify_0 = function(fonenumber, method, url, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fonenumber' is set
      if (fonenumber === undefined || fonenumber === null) {
        throw new Error("Missing the required parameter 'fonenumber' when calling configureMessageSendNotify_0");
      }

      // verify the required parameter 'method' is set
      if (method === undefined || method === null) {
        throw new Error("Missing the required parameter 'method' when calling configureMessageSendNotify_0");
      }

      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling configureMessageSendNotify_0");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'fonenumber': fonenumber,
        'method': method,
        'url': url,
        'url_username': opts['urlUsername'],
        'url_password': opts['urlPassword']
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/messages/send_notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createMessage operation.
     * @callback module:api/MessagesApi~createMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Message
     * Send an SMS or MMS message.
     * @param {String} to Receiving 10 digit phone number
     * @param {String} fonenumber Your FracTEL FoneNumber
     * @param {String} message Message body
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.mediaUrl URL for MMS media (up to 10)
     * @param {String} opts.confirmationUrl Callback URL for confirmation
     * @param {String} opts.confirmationUrlUsername Username for HTTP **Basic** authentication scheme
     * @param {String} opts.confirmationUrlPassword Password for HTTP **Basic** authentication scheme
     * @param {Boolean} opts.requireConfirmation Only send this message if confirmation is available
     * @param {module:api/MessagesApi~createMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2014}
     */
    this.createMessage = function(to, fonenumber, message, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling createMessage");
      }

      // verify the required parameter 'fonenumber' is set
      if (fonenumber === undefined || fonenumber === null) {
        throw new Error("Missing the required parameter 'fonenumber' when calling createMessage");
      }

      // verify the required parameter 'message' is set
      if (message === undefined || message === null) {
        throw new Error("Missing the required parameter 'message' when calling createMessage");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'to': to,
        'fonenumber': fonenumber,
        'message': message,
        'media_url': this.apiClient.buildCollectionParam(opts['mediaUrl'], 'multi'),
        'confirmation_url': opts['confirmationUrl'],
        'confirmation_url_username': opts['confirmationUrlUsername'],
        'confirmation_url_password': opts['confirmationUrlPassword'],
        'require_confirmation': opts['requireConfirmation']
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/messages/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createMessage_0 operation.
     * @callback module:api/MessagesApi~createMessage_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Message
     * Send an SMS or MMS message.
     * @param {String} to Receiving 10 digit phone number
     * @param {String} fonenumber Your FracTEL FoneNumber
     * @param {String} message Message body
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.mediaUrl URL for MMS media (up to 10)
     * @param {String} opts.confirmationUrl Callback URL for confirmation
     * @param {String} opts.confirmationUrlUsername Username for HTTP **Basic** authentication scheme
     * @param {String} opts.confirmationUrlPassword Password for HTTP **Basic** authentication scheme
     * @param {Boolean} opts.requireConfirmation Only send this message if confirmation is available
     * @param {module:api/MessagesApi~createMessage_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2014}
     */
    this.createMessage_0 = function(to, fonenumber, message, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling createMessage_0");
      }

      // verify the required parameter 'fonenumber' is set
      if (fonenumber === undefined || fonenumber === null) {
        throw new Error("Missing the required parameter 'fonenumber' when calling createMessage_0");
      }

      // verify the required parameter 'message' is set
      if (message === undefined || message === null) {
        throw new Error("Missing the required parameter 'message' when calling createMessage_0");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'to': to,
        'fonenumber': fonenumber,
        'message': message,
        'media_url': this.apiClient.buildCollectionParam(opts['mediaUrl'], 'multi'),
        'confirmation_url': opts['confirmationUrl'],
        'confirmation_url_username': opts['confirmationUrlUsername'],
        'confirmation_url_password': opts['confirmationUrlPassword'],
        'require_confirmation': opts['requireConfirmation']
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/messages/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
