=begin
#FoneStorm API 2.4.0 (Thunder)

#FracTEL's Middleware API

OpenAPI spec version: 2.4.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module SwaggerClient
  class SurveysApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create Survey
    # Create a survey.
    # @param title Survey title
    # @param contacts Survey contact ids
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2016]
    def create_survey(title, contacts, opts = {})
      data, _status_code, _headers = create_survey_with_http_info(title, contacts, opts)
      return data
    end

    # Create Survey
    # Create a survey.
    # @param title Survey title
    # @param contacts Survey contact ids
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2016, Fixnum, Hash)>] InlineResponse2016 data, response status code and response headers
    def create_survey_with_http_info(title, contacts, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.create_survey ..."
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling SurveysApi.create_survey"
      end
      # verify the required parameter 'contacts' is set
      if @api_client.config.client_side_validation && contacts.nil?
        fail ArgumentError, "Missing the required parameter 'contacts' when calling SurveysApi.create_survey"
      end
      # resource path
      local_var_path = "/surveys"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["title"] = title
      form_params["contacts"] = @api_client.build_collection_param(contacts, :multi)

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2016')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#create_survey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Survey
    # Create a survey.
    # @param title Survey title
    # @param contacts Survey contact ids
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2016]
    def create_survey_0(title, contacts, opts = {})
      data, _status_code, _headers = create_survey_0_with_http_info(title, contacts, opts)
      return data
    end

    # Create Survey
    # Create a survey.
    # @param title Survey title
    # @param contacts Survey contact ids
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2016, Fixnum, Hash)>] InlineResponse2016 data, response status code and response headers
    def create_survey_0_with_http_info(title, contacts, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.create_survey_0 ..."
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling SurveysApi.create_survey_0"
      end
      # verify the required parameter 'contacts' is set
      if @api_client.config.client_side_validation && contacts.nil?
        fail ArgumentError, "Missing the required parameter 'contacts' when calling SurveysApi.create_survey_0"
      end
      # resource path
      local_var_path = "/surveys"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["title"] = title
      form_params["contacts"] = @api_client.build_collection_param(contacts, :multi)

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2016')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#create_survey_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Survey Question
    # Create a question in a given survey.
    # @param id Survey id
    # @param question Question prompt
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_name Attribute name used to identify this information
    # @return [InlineResponse20115]
    def create_survey_question(id, question, opts = {})
      data, _status_code, _headers = create_survey_question_with_http_info(id, question, opts)
      return data
    end

    # Create Survey Question
    # Create a question in a given survey.
    # @param id Survey id
    # @param question Question prompt
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_name Attribute name used to identify this information
    # @return [Array<(InlineResponse20115, Fixnum, Hash)>] InlineResponse20115 data, response status code and response headers
    def create_survey_question_with_http_info(id, question, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.create_survey_question ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SurveysApi.create_survey_question"
      end
      # verify the required parameter 'question' is set
      if @api_client.config.client_side_validation && question.nil?
        fail ArgumentError, "Missing the required parameter 'question' when calling SurveysApi.create_survey_question"
      end
      if @api_client.config.client_side_validation && !opts[:'attribute_name'].nil? && opts[:'attribute_name'].to_s.length > 32
        fail ArgumentError, 'invalid value for "opts[:"attribute_name"]" when calling SurveysApi.create_survey_question, the character length must be smaller than or equal to 32.'
      end

      # resource path
      local_var_path = "/surveys/{id}/questions".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["question"] = question
      form_params["attribute_name"] = opts[:'attribute_name'] if !opts[:'attribute_name'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20115')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#create_survey_question\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Survey Question
    # Create a question in a given survey.
    # @param id Survey id
    # @param question Question prompt
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_name Attribute name used to identify this information
    # @return [InlineResponse20115]
    def create_survey_question_0(id, question, opts = {})
      data, _status_code, _headers = create_survey_question_0_with_http_info(id, question, opts)
      return data
    end

    # Create Survey Question
    # Create a question in a given survey.
    # @param id Survey id
    # @param question Question prompt
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_name Attribute name used to identify this information
    # @return [Array<(InlineResponse20115, Fixnum, Hash)>] InlineResponse20115 data, response status code and response headers
    def create_survey_question_0_with_http_info(id, question, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.create_survey_question_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SurveysApi.create_survey_question_0"
      end
      # verify the required parameter 'question' is set
      if @api_client.config.client_side_validation && question.nil?
        fail ArgumentError, "Missing the required parameter 'question' when calling SurveysApi.create_survey_question_0"
      end
      if @api_client.config.client_side_validation && !opts[:'attribute_name'].nil? && opts[:'attribute_name'].to_s.length > 32
        fail ArgumentError, 'invalid value for "opts[:"attribute_name"]" when calling SurveysApi.create_survey_question_0, the character length must be smaller than or equal to 32.'
      end

      # resource path
      local_var_path = "/surveys/{id}/questions".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["question"] = question
      form_params["attribute_name"] = opts[:'attribute_name'] if !opts[:'attribute_name'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20115')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#create_survey_question_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Survey Question Choice
    # Create a question choice for a given survey question.
    # @param id Survey id
    # @param qid Question id
    # @param type Input field label
    # @param [Hash] opts the optional parameters
    # @option opts [String] :label Input field label
    # @return [InlineResponse20117]
    def create_survey_question_choice(id, qid, type, opts = {})
      data, _status_code, _headers = create_survey_question_choice_with_http_info(id, qid, type, opts)
      return data
    end

    # Create Survey Question Choice
    # Create a question choice for a given survey question.
    # @param id Survey id
    # @param qid Question id
    # @param type Input field label
    # @param [Hash] opts the optional parameters
    # @option opts [String] :label Input field label
    # @return [Array<(InlineResponse20117, Fixnum, Hash)>] InlineResponse20117 data, response status code and response headers
    def create_survey_question_choice_with_http_info(id, qid, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.create_survey_question_choice ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SurveysApi.create_survey_question_choice"
      end
      # verify the required parameter 'qid' is set
      if @api_client.config.client_side_validation && qid.nil?
        fail ArgumentError, "Missing the required parameter 'qid' when calling SurveysApi.create_survey_question_choice"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling SurveysApi.create_survey_question_choice"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['text', 'textarea'].include?(type)
        fail ArgumentError, "invalid value for 'type', must be one of text, textarea"
      end
      # resource path
      local_var_path = "/surveys/{id}/questions/{qid}/choices".sub('{' + 'id' + '}', id.to_s).sub('{' + 'qid' + '}', qid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["type"] = type
      form_params["label"] = opts[:'label'] if !opts[:'label'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20117')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#create_survey_question_choice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Survey Question Choice
    # Create a question choice for a given survey question.
    # @param id Survey id
    # @param qid Question id
    # @param type Input field label
    # @param [Hash] opts the optional parameters
    # @option opts [String] :label Input field label
    # @return [InlineResponse20117]
    def create_survey_question_choice_0(id, qid, type, opts = {})
      data, _status_code, _headers = create_survey_question_choice_0_with_http_info(id, qid, type, opts)
      return data
    end

    # Create Survey Question Choice
    # Create a question choice for a given survey question.
    # @param id Survey id
    # @param qid Question id
    # @param type Input field label
    # @param [Hash] opts the optional parameters
    # @option opts [String] :label Input field label
    # @return [Array<(InlineResponse20117, Fixnum, Hash)>] InlineResponse20117 data, response status code and response headers
    def create_survey_question_choice_0_with_http_info(id, qid, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.create_survey_question_choice_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SurveysApi.create_survey_question_choice_0"
      end
      # verify the required parameter 'qid' is set
      if @api_client.config.client_side_validation && qid.nil?
        fail ArgumentError, "Missing the required parameter 'qid' when calling SurveysApi.create_survey_question_choice_0"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling SurveysApi.create_survey_question_choice_0"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['text', 'textarea'].include?(type)
        fail ArgumentError, "invalid value for 'type', must be one of text, textarea"
      end
      # resource path
      local_var_path = "/surveys/{id}/questions/{qid}/choices".sub('{' + 'id' + '}', id.to_s).sub('{' + 'qid' + '}', qid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["type"] = type
      form_params["label"] = opts[:'label'] if !opts[:'label'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20117')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#create_survey_question_choice_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Survey Response
    # Create a response in a given survey.
    # @param id Survey id
    # @param question_id Question id
    # @param choice_id Choice id
    # @param contact_id Contact id
    # @param answer Answer for contact survey question choice
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20116]
    def create_survey_response(id, question_id, choice_id, contact_id, answer, opts = {})
      data, _status_code, _headers = create_survey_response_with_http_info(id, question_id, choice_id, contact_id, answer, opts)
      return data
    end

    # Create Survey Response
    # Create a response in a given survey.
    # @param id Survey id
    # @param question_id Question id
    # @param choice_id Choice id
    # @param contact_id Contact id
    # @param answer Answer for contact survey question choice
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20116, Fixnum, Hash)>] InlineResponse20116 data, response status code and response headers
    def create_survey_response_with_http_info(id, question_id, choice_id, contact_id, answer, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.create_survey_response ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SurveysApi.create_survey_response"
      end
      # verify the required parameter 'question_id' is set
      if @api_client.config.client_side_validation && question_id.nil?
        fail ArgumentError, "Missing the required parameter 'question_id' when calling SurveysApi.create_survey_response"
      end
      # verify the required parameter 'choice_id' is set
      if @api_client.config.client_side_validation && choice_id.nil?
        fail ArgumentError, "Missing the required parameter 'choice_id' when calling SurveysApi.create_survey_response"
      end
      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling SurveysApi.create_survey_response"
      end
      # verify the required parameter 'answer' is set
      if @api_client.config.client_side_validation && answer.nil?
        fail ArgumentError, "Missing the required parameter 'answer' when calling SurveysApi.create_survey_response"
      end
      # resource path
      local_var_path = "/surveys/{id}/responses".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["question_id"] = question_id
      form_params["choice_id"] = choice_id
      form_params["contact_id"] = contact_id
      form_params["answer"] = answer

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20116')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#create_survey_response\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Survey Response
    # Create a response in a given survey.
    # @param id Survey id
    # @param question_id Question id
    # @param choice_id Choice id
    # @param contact_id Contact id
    # @param answer Answer for contact survey question choice
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20116]
    def create_survey_response_0(id, question_id, choice_id, contact_id, answer, opts = {})
      data, _status_code, _headers = create_survey_response_0_with_http_info(id, question_id, choice_id, contact_id, answer, opts)
      return data
    end

    # Create Survey Response
    # Create a response in a given survey.
    # @param id Survey id
    # @param question_id Question id
    # @param choice_id Choice id
    # @param contact_id Contact id
    # @param answer Answer for contact survey question choice
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20116, Fixnum, Hash)>] InlineResponse20116 data, response status code and response headers
    def create_survey_response_0_with_http_info(id, question_id, choice_id, contact_id, answer, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.create_survey_response_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SurveysApi.create_survey_response_0"
      end
      # verify the required parameter 'question_id' is set
      if @api_client.config.client_side_validation && question_id.nil?
        fail ArgumentError, "Missing the required parameter 'question_id' when calling SurveysApi.create_survey_response_0"
      end
      # verify the required parameter 'choice_id' is set
      if @api_client.config.client_side_validation && choice_id.nil?
        fail ArgumentError, "Missing the required parameter 'choice_id' when calling SurveysApi.create_survey_response_0"
      end
      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling SurveysApi.create_survey_response_0"
      end
      # verify the required parameter 'answer' is set
      if @api_client.config.client_side_validation && answer.nil?
        fail ArgumentError, "Missing the required parameter 'answer' when calling SurveysApi.create_survey_response_0"
      end
      # resource path
      local_var_path = "/surveys/{id}/responses".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["question_id"] = question_id
      form_params["choice_id"] = choice_id
      form_params["contact_id"] = contact_id
      form_params["answer"] = answer

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20116')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#create_survey_response_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Survey
    # Delete a survey.
    # @param id Survey id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2016]
    def delete_survey(id, opts = {})
      data, _status_code, _headers = delete_survey_with_http_info(id, opts)
      return data
    end

    # Delete Survey
    # Delete a survey.
    # @param id Survey id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2016, Fixnum, Hash)>] InlineResponse2016 data, response status code and response headers
    def delete_survey_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.delete_survey ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SurveysApi.delete_survey"
      end
      # resource path
      local_var_path = "/surveys/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2016')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#delete_survey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Survey
    # Delete a survey.
    # @param id Survey id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2016]
    def delete_survey_0(id, opts = {})
      data, _status_code, _headers = delete_survey_0_with_http_info(id, opts)
      return data
    end

    # Delete Survey
    # Delete a survey.
    # @param id Survey id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2016, Fixnum, Hash)>] InlineResponse2016 data, response status code and response headers
    def delete_survey_0_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.delete_survey_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SurveysApi.delete_survey_0"
      end
      # resource path
      local_var_path = "/surveys/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2016')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#delete_survey_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Survey Question
    # Delete a question from a given survey.
    # @param id Survey id
    # @param qid Question id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20115]
    def delete_survey_question(id, qid, opts = {})
      data, _status_code, _headers = delete_survey_question_with_http_info(id, qid, opts)
      return data
    end

    # Delete Survey Question
    # Delete a question from a given survey.
    # @param id Survey id
    # @param qid Question id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20115, Fixnum, Hash)>] InlineResponse20115 data, response status code and response headers
    def delete_survey_question_with_http_info(id, qid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.delete_survey_question ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SurveysApi.delete_survey_question"
      end
      # verify the required parameter 'qid' is set
      if @api_client.config.client_side_validation && qid.nil?
        fail ArgumentError, "Missing the required parameter 'qid' when calling SurveysApi.delete_survey_question"
      end
      # resource path
      local_var_path = "/surveys/{id}/questions/{qid}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'qid' + '}', qid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20115')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#delete_survey_question\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Survey Question
    # Delete a question from a given survey.
    # @param id Survey id
    # @param qid Question id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20115]
    def delete_survey_question_0(id, qid, opts = {})
      data, _status_code, _headers = delete_survey_question_0_with_http_info(id, qid, opts)
      return data
    end

    # Delete Survey Question
    # Delete a question from a given survey.
    # @param id Survey id
    # @param qid Question id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20115, Fixnum, Hash)>] InlineResponse20115 data, response status code and response headers
    def delete_survey_question_0_with_http_info(id, qid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.delete_survey_question_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SurveysApi.delete_survey_question_0"
      end
      # verify the required parameter 'qid' is set
      if @api_client.config.client_side_validation && qid.nil?
        fail ArgumentError, "Missing the required parameter 'qid' when calling SurveysApi.delete_survey_question_0"
      end
      # resource path
      local_var_path = "/surveys/{id}/questions/{qid}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'qid' + '}', qid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20115')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#delete_survey_question_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Survey Question Choice
    # Delete a choice for a given survey question.
    # @param id Survey id
    # @param qid Question id
    # @param cid Choice id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20117]
    def delete_survey_question_choice(id, qid, cid, opts = {})
      data, _status_code, _headers = delete_survey_question_choice_with_http_info(id, qid, cid, opts)
      return data
    end

    # Delete Survey Question Choice
    # Delete a choice for a given survey question.
    # @param id Survey id
    # @param qid Question id
    # @param cid Choice id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20117, Fixnum, Hash)>] InlineResponse20117 data, response status code and response headers
    def delete_survey_question_choice_with_http_info(id, qid, cid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.delete_survey_question_choice ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SurveysApi.delete_survey_question_choice"
      end
      # verify the required parameter 'qid' is set
      if @api_client.config.client_side_validation && qid.nil?
        fail ArgumentError, "Missing the required parameter 'qid' when calling SurveysApi.delete_survey_question_choice"
      end
      # verify the required parameter 'cid' is set
      if @api_client.config.client_side_validation && cid.nil?
        fail ArgumentError, "Missing the required parameter 'cid' when calling SurveysApi.delete_survey_question_choice"
      end
      # resource path
      local_var_path = "/surveys/{id}/questions/{qid}/choices/{cid}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'qid' + '}', qid.to_s).sub('{' + 'cid' + '}', cid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20117')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#delete_survey_question_choice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Survey Question Choice
    # Delete a choice for a given survey question.
    # @param id Survey id
    # @param qid Question id
    # @param cid Choice id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20117]
    def delete_survey_question_choice_0(id, qid, cid, opts = {})
      data, _status_code, _headers = delete_survey_question_choice_0_with_http_info(id, qid, cid, opts)
      return data
    end

    # Delete Survey Question Choice
    # Delete a choice for a given survey question.
    # @param id Survey id
    # @param qid Question id
    # @param cid Choice id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20117, Fixnum, Hash)>] InlineResponse20117 data, response status code and response headers
    def delete_survey_question_choice_0_with_http_info(id, qid, cid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.delete_survey_question_choice_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SurveysApi.delete_survey_question_choice_0"
      end
      # verify the required parameter 'qid' is set
      if @api_client.config.client_side_validation && qid.nil?
        fail ArgumentError, "Missing the required parameter 'qid' when calling SurveysApi.delete_survey_question_choice_0"
      end
      # verify the required parameter 'cid' is set
      if @api_client.config.client_side_validation && cid.nil?
        fail ArgumentError, "Missing the required parameter 'cid' when calling SurveysApi.delete_survey_question_choice_0"
      end
      # resource path
      local_var_path = "/surveys/{id}/questions/{qid}/choices/{cid}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'qid' + '}', qid.to_s).sub('{' + 'cid' + '}', cid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20117')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#delete_survey_question_choice_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Survey
    # Get information about a survey.
    # @param id Survey id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :associations Include all data associations
    # @return [InlineResponse2016]
    def get_survey(id, opts = {})
      data, _status_code, _headers = get_survey_with_http_info(id, opts)
      return data
    end

    # Get Survey
    # Get information about a survey.
    # @param id Survey id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :associations Include all data associations
    # @return [Array<(InlineResponse2016, Fixnum, Hash)>] InlineResponse2016 data, response status code and response headers
    def get_survey_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.get_survey ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SurveysApi.get_survey"
      end
      # resource path
      local_var_path = "/surveys/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'associations'] = opts[:'associations'] if !opts[:'associations'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded', 'application/offset+octet-stream', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2016')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#get_survey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Survey
    # Get information about a survey.
    # @param id Survey id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :associations Include all data associations
    # @return [InlineResponse2016]
    def get_survey_0(id, opts = {})
      data, _status_code, _headers = get_survey_0_with_http_info(id, opts)
      return data
    end

    # Get Survey
    # Get information about a survey.
    # @param id Survey id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :associations Include all data associations
    # @return [Array<(InlineResponse2016, Fixnum, Hash)>] InlineResponse2016 data, response status code and response headers
    def get_survey_0_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.get_survey_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SurveysApi.get_survey_0"
      end
      # resource path
      local_var_path = "/surveys/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'associations'] = opts[:'associations'] if !opts[:'associations'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded', 'application/offset+octet-stream', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2016')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#get_survey_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Survey Contacts
    # Get a list of contacts for a given survey.
    # @param id Survey id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2004]
    def get_survey_contacts(id, opts = {})
      data, _status_code, _headers = get_survey_contacts_with_http_info(id, opts)
      return data
    end

    # Get Survey Contacts
    # Get a list of contacts for a given survey.
    # @param id Survey id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2004, Fixnum, Hash)>] InlineResponse2004 data, response status code and response headers
    def get_survey_contacts_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.get_survey_contacts ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SurveysApi.get_survey_contacts"
      end
      # resource path
      local_var_path = "/surveys/{id}/contacts".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2004')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#get_survey_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Survey Contacts
    # Get a list of contacts for a given survey.
    # @param id Survey id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2004]
    def get_survey_contacts_0(id, opts = {})
      data, _status_code, _headers = get_survey_contacts_0_with_http_info(id, opts)
      return data
    end

    # Get Survey Contacts
    # Get a list of contacts for a given survey.
    # @param id Survey id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2004, Fixnum, Hash)>] InlineResponse2004 data, response status code and response headers
    def get_survey_contacts_0_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.get_survey_contacts_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SurveysApi.get_survey_contacts_0"
      end
      # resource path
      local_var_path = "/surveys/{id}/contacts".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2004')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#get_survey_contacts_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Survey Question Choices
    # Get a list of all choices for a given survey question.
    # @param id Survey id
    # @param qid Question id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20016]
    def get_survey_question_choices(id, qid, opts = {})
      data, _status_code, _headers = get_survey_question_choices_with_http_info(id, qid, opts)
      return data
    end

    # Get Survey Question Choices
    # Get a list of all choices for a given survey question.
    # @param id Survey id
    # @param qid Question id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20016, Fixnum, Hash)>] InlineResponse20016 data, response status code and response headers
    def get_survey_question_choices_with_http_info(id, qid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.get_survey_question_choices ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SurveysApi.get_survey_question_choices"
      end
      # verify the required parameter 'qid' is set
      if @api_client.config.client_side_validation && qid.nil?
        fail ArgumentError, "Missing the required parameter 'qid' when calling SurveysApi.get_survey_question_choices"
      end
      # resource path
      local_var_path = "/surveys/{id}/questions/{qid}/choices".sub('{' + 'id' + '}', id.to_s).sub('{' + 'qid' + '}', qid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20016')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#get_survey_question_choices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Survey Question Choices
    # Get a list of all choices for a given survey question.
    # @param id Survey id
    # @param qid Question id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20016]
    def get_survey_question_choices_0(id, qid, opts = {})
      data, _status_code, _headers = get_survey_question_choices_0_with_http_info(id, qid, opts)
      return data
    end

    # Get Survey Question Choices
    # Get a list of all choices for a given survey question.
    # @param id Survey id
    # @param qid Question id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20016, Fixnum, Hash)>] InlineResponse20016 data, response status code and response headers
    def get_survey_question_choices_0_with_http_info(id, qid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.get_survey_question_choices_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SurveysApi.get_survey_question_choices_0"
      end
      # verify the required parameter 'qid' is set
      if @api_client.config.client_side_validation && qid.nil?
        fail ArgumentError, "Missing the required parameter 'qid' when calling SurveysApi.get_survey_question_choices_0"
      end
      # resource path
      local_var_path = "/surveys/{id}/questions/{qid}/choices".sub('{' + 'id' + '}', id.to_s).sub('{' + 'qid' + '}', qid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20016')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#get_survey_question_choices_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Survey Questions
    # Get a list of questions for a given survey.
    # @param id Survey id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20013]
    def get_survey_questions(id, opts = {})
      data, _status_code, _headers = get_survey_questions_with_http_info(id, opts)
      return data
    end

    # Get Survey Questions
    # Get a list of questions for a given survey.
    # @param id Survey id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20013, Fixnum, Hash)>] InlineResponse20013 data, response status code and response headers
    def get_survey_questions_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.get_survey_questions ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SurveysApi.get_survey_questions"
      end
      # resource path
      local_var_path = "/surveys/{id}/questions".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20013')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#get_survey_questions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Survey Questions
    # Get a list of questions for a given survey.
    # @param id Survey id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20013]
    def get_survey_questions_0(id, opts = {})
      data, _status_code, _headers = get_survey_questions_0_with_http_info(id, opts)
      return data
    end

    # Get Survey Questions
    # Get a list of questions for a given survey.
    # @param id Survey id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20013, Fixnum, Hash)>] InlineResponse20013 data, response status code and response headers
    def get_survey_questions_0_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.get_survey_questions_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SurveysApi.get_survey_questions_0"
      end
      # resource path
      local_var_path = "/surveys/{id}/questions".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20013')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#get_survey_questions_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Survey Responses
    # Get a list of responses for a given survey.
    # @param id Survey id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20014]
    def get_survey_responses(id, opts = {})
      data, _status_code, _headers = get_survey_responses_with_http_info(id, opts)
      return data
    end

    # Get Survey Responses
    # Get a list of responses for a given survey.
    # @param id Survey id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20014, Fixnum, Hash)>] InlineResponse20014 data, response status code and response headers
    def get_survey_responses_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.get_survey_responses ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SurveysApi.get_survey_responses"
      end
      # resource path
      local_var_path = "/surveys/{id}/responses".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20014')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#get_survey_responses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Survey Responses
    # Get a list of responses for a given survey.
    # @param id Survey id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20014]
    def get_survey_responses_0(id, opts = {})
      data, _status_code, _headers = get_survey_responses_0_with_http_info(id, opts)
      return data
    end

    # Get Survey Responses
    # Get a list of responses for a given survey.
    # @param id Survey id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20014, Fixnum, Hash)>] InlineResponse20014 data, response status code and response headers
    def get_survey_responses_0_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.get_survey_responses_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SurveysApi.get_survey_responses_0"
      end
      # resource path
      local_var_path = "/surveys/{id}/responses".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20014')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#get_survey_responses_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Surveys
    # Get a list of surveys.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2003]
    def get_surveys(opts = {})
      data, _status_code, _headers = get_surveys_with_http_info(opts)
      return data
    end

    # Get Surveys
    # Get a list of surveys.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2003, Fixnum, Hash)>] InlineResponse2003 data, response status code and response headers
    def get_surveys_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.get_surveys ..."
      end
      # resource path
      local_var_path = "/surveys"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2003')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#get_surveys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Surveys
    # Get a list of surveys.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2003]
    def get_surveys_0(opts = {})
      data, _status_code, _headers = get_surveys_0_with_http_info(opts)
      return data
    end

    # Get Surveys
    # Get a list of surveys.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2003, Fixnum, Hash)>] InlineResponse2003 data, response status code and response headers
    def get_surveys_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.get_surveys_0 ..."
      end
      # resource path
      local_var_path = "/surveys"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2003')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#get_surveys_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Survey
    # Update a survey.
    # @param id Survey id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :title Survey title
    # @option opts [Array<String>] :contacts Survey contact ids
    # @return [InlineResponse2016]
    def update_survey(id, opts = {})
      data, _status_code, _headers = update_survey_with_http_info(id, opts)
      return data
    end

    # Update Survey
    # Update a survey.
    # @param id Survey id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :title Survey title
    # @option opts [Array<String>] :contacts Survey contact ids
    # @return [Array<(InlineResponse2016, Fixnum, Hash)>] InlineResponse2016 data, response status code and response headers
    def update_survey_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.update_survey ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SurveysApi.update_survey"
      end
      # resource path
      local_var_path = "/surveys/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["title"] = opts[:'title'] if !opts[:'title'].nil?
      form_params["contacts"] = @api_client.build_collection_param(opts[:'contacts'], :multi) if !opts[:'contacts'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2016')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#update_survey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Survey
    # Update a survey.
    # @param id Survey id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :title Survey title
    # @option opts [Array<String>] :contacts Survey contact ids
    # @return [InlineResponse2016]
    def update_survey_0(id, opts = {})
      data, _status_code, _headers = update_survey_0_with_http_info(id, opts)
      return data
    end

    # Update Survey
    # Update a survey.
    # @param id Survey id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :title Survey title
    # @option opts [Array<String>] :contacts Survey contact ids
    # @return [Array<(InlineResponse2016, Fixnum, Hash)>] InlineResponse2016 data, response status code and response headers
    def update_survey_0_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.update_survey_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SurveysApi.update_survey_0"
      end
      # resource path
      local_var_path = "/surveys/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["title"] = opts[:'title'] if !opts[:'title'].nil?
      form_params["contacts"] = @api_client.build_collection_param(opts[:'contacts'], :multi) if !opts[:'contacts'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2016')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#update_survey_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Survey Question
    # Update a question for a given survey.
    # @param id Survey id
    # @param qid Question id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :question Question prompt
    # @option opts [String] :attribute_name Attribute name used to identify this information
    # @return [InlineResponse20115]
    def update_survey_question(id, qid, opts = {})
      data, _status_code, _headers = update_survey_question_with_http_info(id, qid, opts)
      return data
    end

    # Update Survey Question
    # Update a question for a given survey.
    # @param id Survey id
    # @param qid Question id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :question Question prompt
    # @option opts [String] :attribute_name Attribute name used to identify this information
    # @return [Array<(InlineResponse20115, Fixnum, Hash)>] InlineResponse20115 data, response status code and response headers
    def update_survey_question_with_http_info(id, qid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.update_survey_question ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SurveysApi.update_survey_question"
      end
      # verify the required parameter 'qid' is set
      if @api_client.config.client_side_validation && qid.nil?
        fail ArgumentError, "Missing the required parameter 'qid' when calling SurveysApi.update_survey_question"
      end
      if @api_client.config.client_side_validation && !opts[:'attribute_name'].nil? && opts[:'attribute_name'].to_s.length > 32
        fail ArgumentError, 'invalid value for "opts[:"attribute_name"]" when calling SurveysApi.update_survey_question, the character length must be smaller than or equal to 32.'
      end

      # resource path
      local_var_path = "/surveys/{id}/questions/{qid}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'qid' + '}', qid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["question"] = opts[:'question'] if !opts[:'question'].nil?
      form_params["attribute_name"] = opts[:'attribute_name'] if !opts[:'attribute_name'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20115')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#update_survey_question\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Survey Question
    # Update a question for a given survey.
    # @param id Survey id
    # @param qid Question id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :question Question prompt
    # @option opts [String] :attribute_name Attribute name used to identify this information
    # @return [InlineResponse20115]
    def update_survey_question_0(id, qid, opts = {})
      data, _status_code, _headers = update_survey_question_0_with_http_info(id, qid, opts)
      return data
    end

    # Update Survey Question
    # Update a question for a given survey.
    # @param id Survey id
    # @param qid Question id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :question Question prompt
    # @option opts [String] :attribute_name Attribute name used to identify this information
    # @return [Array<(InlineResponse20115, Fixnum, Hash)>] InlineResponse20115 data, response status code and response headers
    def update_survey_question_0_with_http_info(id, qid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.update_survey_question_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SurveysApi.update_survey_question_0"
      end
      # verify the required parameter 'qid' is set
      if @api_client.config.client_side_validation && qid.nil?
        fail ArgumentError, "Missing the required parameter 'qid' when calling SurveysApi.update_survey_question_0"
      end
      if @api_client.config.client_side_validation && !opts[:'attribute_name'].nil? && opts[:'attribute_name'].to_s.length > 32
        fail ArgumentError, 'invalid value for "opts[:"attribute_name"]" when calling SurveysApi.update_survey_question_0, the character length must be smaller than or equal to 32.'
      end

      # resource path
      local_var_path = "/surveys/{id}/questions/{qid}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'qid' + '}', qid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["question"] = opts[:'question'] if !opts[:'question'].nil?
      form_params["attribute_name"] = opts[:'attribute_name'] if !opts[:'attribute_name'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20115')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#update_survey_question_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Survey Question Choice
    # Update a choice for a given survey question.
    # @param id Survey id
    # @param qid Question id
    # @param cid Choice id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Input field label
    # @option opts [String] :label Input field label
    # @return [InlineResponse20117]
    def update_survey_question_choice(id, qid, cid, opts = {})
      data, _status_code, _headers = update_survey_question_choice_with_http_info(id, qid, cid, opts)
      return data
    end

    # Update Survey Question Choice
    # Update a choice for a given survey question.
    # @param id Survey id
    # @param qid Question id
    # @param cid Choice id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Input field label
    # @option opts [String] :label Input field label
    # @return [Array<(InlineResponse20117, Fixnum, Hash)>] InlineResponse20117 data, response status code and response headers
    def update_survey_question_choice_with_http_info(id, qid, cid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.update_survey_question_choice ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SurveysApi.update_survey_question_choice"
      end
      # verify the required parameter 'qid' is set
      if @api_client.config.client_side_validation && qid.nil?
        fail ArgumentError, "Missing the required parameter 'qid' when calling SurveysApi.update_survey_question_choice"
      end
      # verify the required parameter 'cid' is set
      if @api_client.config.client_side_validation && cid.nil?
        fail ArgumentError, "Missing the required parameter 'cid' when calling SurveysApi.update_survey_question_choice"
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['text', 'textarea'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of text, textarea'
      end
      # resource path
      local_var_path = "/surveys/{id}/questions/{qid}/choices/{cid}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'qid' + '}', qid.to_s).sub('{' + 'cid' + '}', cid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["type"] = opts[:'type'] if !opts[:'type'].nil?
      form_params["label"] = opts[:'label'] if !opts[:'label'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20117')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#update_survey_question_choice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Survey Question Choice
    # Update a choice for a given survey question.
    # @param id Survey id
    # @param qid Question id
    # @param cid Choice id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Input field label
    # @option opts [String] :label Input field label
    # @return [InlineResponse20117]
    def update_survey_question_choice_0(id, qid, cid, opts = {})
      data, _status_code, _headers = update_survey_question_choice_0_with_http_info(id, qid, cid, opts)
      return data
    end

    # Update Survey Question Choice
    # Update a choice for a given survey question.
    # @param id Survey id
    # @param qid Question id
    # @param cid Choice id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Input field label
    # @option opts [String] :label Input field label
    # @return [Array<(InlineResponse20117, Fixnum, Hash)>] InlineResponse20117 data, response status code and response headers
    def update_survey_question_choice_0_with_http_info(id, qid, cid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SurveysApi.update_survey_question_choice_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SurveysApi.update_survey_question_choice_0"
      end
      # verify the required parameter 'qid' is set
      if @api_client.config.client_side_validation && qid.nil?
        fail ArgumentError, "Missing the required parameter 'qid' when calling SurveysApi.update_survey_question_choice_0"
      end
      # verify the required parameter 'cid' is set
      if @api_client.config.client_side_validation && cid.nil?
        fail ArgumentError, "Missing the required parameter 'cid' when calling SurveysApi.update_survey_question_choice_0"
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['text', 'textarea'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of text, textarea'
      end
      # resource path
      local_var_path = "/surveys/{id}/questions/{qid}/choices/{cid}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'qid' + '}', qid.to_s).sub('{' + 'cid' + '}', cid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["type"] = opts[:'type'] if !opts[:'type'].nil?
      form_params["label"] = opts[:'label'] if !opts[:'label'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20117')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveysApi#update_survey_question_choice_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
