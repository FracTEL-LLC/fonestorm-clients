=begin
#FoneStorm API 2.4.0 (Thunder)

#FracTEL's Middleware API

OpenAPI spec version: 2.4.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module SwaggerClient
  class ListsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create List
    # Create a list.
    # @param name Contact list name
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :contacts List of contact ids
    # @return [InlineResponse201]
    def create_list(name, opts = {})
      data, _status_code, _headers = create_list_with_http_info(name, opts)
      return data
    end

    # Create List
    # Create a list.
    # @param name Contact list name
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :contacts List of contact ids
    # @return [Array<(InlineResponse201, Fixnum, Hash)>] InlineResponse201 data, response status code and response headers
    def create_list_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListsApi.create_list ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ListsApi.create_list"
      end
      # resource path
      local_var_path = "/lists"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["name"] = name
      form_params["contacts"] = @api_client.build_collection_param(opts[:'contacts'], :multi) if !opts[:'contacts'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse201')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#create_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create List
    # Create a list.
    # @param name Contact list name
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :contacts List of contact ids
    # @return [InlineResponse201]
    def create_list_0(name, opts = {})
      data, _status_code, _headers = create_list_0_with_http_info(name, opts)
      return data
    end

    # Create List
    # Create a list.
    # @param name Contact list name
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :contacts List of contact ids
    # @return [Array<(InlineResponse201, Fixnum, Hash)>] InlineResponse201 data, response status code and response headers
    def create_list_0_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListsApi.create_list_0 ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ListsApi.create_list_0"
      end
      # resource path
      local_var_path = "/lists"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["name"] = name
      form_params["contacts"] = @api_client.build_collection_param(opts[:'contacts'], :multi) if !opts[:'contacts'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse201')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#create_list_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create List Contact
    # Create a contact in a given list.
    # @param id Contact list id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :contacts List of contact ids
    # @return [InlineResponse2017]
    def create_list_contact(id, opts = {})
      data, _status_code, _headers = create_list_contact_with_http_info(id, opts)
      return data
    end

    # Create List Contact
    # Create a contact in a given list.
    # @param id Contact list id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :contacts List of contact ids
    # @return [Array<(InlineResponse2017, Fixnum, Hash)>] InlineResponse2017 data, response status code and response headers
    def create_list_contact_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListsApi.create_list_contact ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ListsApi.create_list_contact"
      end
      # resource path
      local_var_path = "/lists/{id}/contacts".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["contacts"] = @api_client.build_collection_param(opts[:'contacts'], :multi) if !opts[:'contacts'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2017')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#create_list_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create List Contact
    # Create a contact in a given list.
    # @param id Contact list id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :contacts List of contact ids
    # @return [InlineResponse2017]
    def create_list_contact_0(id, opts = {})
      data, _status_code, _headers = create_list_contact_0_with_http_info(id, opts)
      return data
    end

    # Create List Contact
    # Create a contact in a given list.
    # @param id Contact list id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :contacts List of contact ids
    # @return [Array<(InlineResponse2017, Fixnum, Hash)>] InlineResponse2017 data, response status code and response headers
    def create_list_contact_0_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListsApi.create_list_contact_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ListsApi.create_list_contact_0"
      end
      # resource path
      local_var_path = "/lists/{id}/contacts".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["contacts"] = @api_client.build_collection_param(opts[:'contacts'], :multi) if !opts[:'contacts'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2017')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#create_list_contact_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete List
    # Delete a list.
    # @param id Contact list id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse201]
    def delete_list(id, opts = {})
      data, _status_code, _headers = delete_list_with_http_info(id, opts)
      return data
    end

    # Delete List
    # Delete a list.
    # @param id Contact list id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse201, Fixnum, Hash)>] InlineResponse201 data, response status code and response headers
    def delete_list_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListsApi.delete_list ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ListsApi.delete_list"
      end
      # resource path
      local_var_path = "/lists/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse201')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#delete_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete List
    # Delete a list.
    # @param id Contact list id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse201]
    def delete_list_0(id, opts = {})
      data, _status_code, _headers = delete_list_0_with_http_info(id, opts)
      return data
    end

    # Delete List
    # Delete a list.
    # @param id Contact list id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse201, Fixnum, Hash)>] InlineResponse201 data, response status code and response headers
    def delete_list_0_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListsApi.delete_list_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ListsApi.delete_list_0"
      end
      # resource path
      local_var_path = "/lists/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse201')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#delete_list_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete List Contact
    # Remove a contact from a given list.
    # @param id Contact list id
    # @param cid Contact id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2017]
    def delete_list_contact(id, cid, opts = {})
      data, _status_code, _headers = delete_list_contact_with_http_info(id, cid, opts)
      return data
    end

    # Delete List Contact
    # Remove a contact from a given list.
    # @param id Contact list id
    # @param cid Contact id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2017, Fixnum, Hash)>] InlineResponse2017 data, response status code and response headers
    def delete_list_contact_with_http_info(id, cid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListsApi.delete_list_contact ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ListsApi.delete_list_contact"
      end
      # verify the required parameter 'cid' is set
      if @api_client.config.client_side_validation && cid.nil?
        fail ArgumentError, "Missing the required parameter 'cid' when calling ListsApi.delete_list_contact"
      end
      # resource path
      local_var_path = "/lists/{id}/contacts/{cid}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'cid' + '}', cid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2017')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#delete_list_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete List Contact
    # Remove a contact from a given list.
    # @param id Contact list id
    # @param cid Contact id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2017]
    def delete_list_contact_0(id, cid, opts = {})
      data, _status_code, _headers = delete_list_contact_0_with_http_info(id, cid, opts)
      return data
    end

    # Delete List Contact
    # Remove a contact from a given list.
    # @param id Contact list id
    # @param cid Contact id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2017, Fixnum, Hash)>] InlineResponse2017 data, response status code and response headers
    def delete_list_contact_0_with_http_info(id, cid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListsApi.delete_list_contact_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ListsApi.delete_list_contact_0"
      end
      # verify the required parameter 'cid' is set
      if @api_client.config.client_side_validation && cid.nil?
        fail ArgumentError, "Missing the required parameter 'cid' when calling ListsApi.delete_list_contact_0"
      end
      # resource path
      local_var_path = "/lists/{id}/contacts/{cid}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'cid' + '}', cid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2017')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#delete_list_contact_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List
    # Get a contact list.
    # @param id Contact list id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :associations Include all data associations
    # @return [InlineResponse201]
    def get_list(id, opts = {})
      data, _status_code, _headers = get_list_with_http_info(id, opts)
      return data
    end

    # Get List
    # Get a contact list.
    # @param id Contact list id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :associations Include all data associations
    # @return [Array<(InlineResponse201, Fixnum, Hash)>] InlineResponse201 data, response status code and response headers
    def get_list_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListsApi.get_list ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ListsApi.get_list"
      end
      # resource path
      local_var_path = "/lists/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'associations'] = opts[:'associations'] if !opts[:'associations'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded', 'application/offset+octet-stream', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse201')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#get_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List
    # Get a contact list.
    # @param id Contact list id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :associations Include all data associations
    # @return [InlineResponse201]
    def get_list_0(id, opts = {})
      data, _status_code, _headers = get_list_0_with_http_info(id, opts)
      return data
    end

    # Get List
    # Get a contact list.
    # @param id Contact list id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :associations Include all data associations
    # @return [Array<(InlineResponse201, Fixnum, Hash)>] InlineResponse201 data, response status code and response headers
    def get_list_0_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListsApi.get_list_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ListsApi.get_list_0"
      end
      # resource path
      local_var_path = "/lists/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'associations'] = opts[:'associations'] if !opts[:'associations'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded', 'application/offset+octet-stream', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse201')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#get_list_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List Campaigns
    # Get a list of campaigns for a given contact list.
    # @param id Contact list id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2007]
    def get_list_campaigns(id, opts = {})
      data, _status_code, _headers = get_list_campaigns_with_http_info(id, opts)
      return data
    end

    # Get List Campaigns
    # Get a list of campaigns for a given contact list.
    # @param id Contact list id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2007, Fixnum, Hash)>] InlineResponse2007 data, response status code and response headers
    def get_list_campaigns_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListsApi.get_list_campaigns ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ListsApi.get_list_campaigns"
      end
      # resource path
      local_var_path = "/lists/{id}/campaigns".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2007')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#get_list_campaigns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List Campaigns
    # Get a list of campaigns for a given contact list.
    # @param id Contact list id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2007]
    def get_list_campaigns_0(id, opts = {})
      data, _status_code, _headers = get_list_campaigns_0_with_http_info(id, opts)
      return data
    end

    # Get List Campaigns
    # Get a list of campaigns for a given contact list.
    # @param id Contact list id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2007, Fixnum, Hash)>] InlineResponse2007 data, response status code and response headers
    def get_list_campaigns_0_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListsApi.get_list_campaigns_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ListsApi.get_list_campaigns_0"
      end
      # resource path
      local_var_path = "/lists/{id}/campaigns".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2007')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#get_list_campaigns_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List Contacts
    # Get a list of contacts for a given contact list.
    # @param id Contact list id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2004]
    def get_list_contacts(id, opts = {})
      data, _status_code, _headers = get_list_contacts_with_http_info(id, opts)
      return data
    end

    # Get List Contacts
    # Get a list of contacts for a given contact list.
    # @param id Contact list id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2004, Fixnum, Hash)>] InlineResponse2004 data, response status code and response headers
    def get_list_contacts_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListsApi.get_list_contacts ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ListsApi.get_list_contacts"
      end
      # resource path
      local_var_path = "/lists/{id}/contacts".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2004')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#get_list_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List Contacts
    # Get a list of contacts for a given contact list.
    # @param id Contact list id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2004]
    def get_list_contacts_0(id, opts = {})
      data, _status_code, _headers = get_list_contacts_0_with_http_info(id, opts)
      return data
    end

    # Get List Contacts
    # Get a list of contacts for a given contact list.
    # @param id Contact list id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2004, Fixnum, Hash)>] InlineResponse2004 data, response status code and response headers
    def get_list_contacts_0_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListsApi.get_list_contacts_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ListsApi.get_list_contacts_0"
      end
      # resource path
      local_var_path = "/lists/{id}/contacts".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2004')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#get_list_contacts_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Lists
    # Get a list of all contact lists.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200]
    def get_lists(opts = {})
      data, _status_code, _headers = get_lists_with_http_info(opts)
      return data
    end

    # Get Lists
    # Get a list of all contact lists.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def get_lists_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListsApi.get_lists ..."
      end
      # resource path
      local_var_path = "/lists"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#get_lists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Lists
    # Get a list of all contact lists.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200]
    def get_lists_0(opts = {})
      data, _status_code, _headers = get_lists_0_with_http_info(opts)
      return data
    end

    # Get Lists
    # Get a list of all contact lists.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def get_lists_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListsApi.get_lists_0 ..."
      end
      # resource path
      local_var_path = "/lists"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#get_lists_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update List
    # Update a contact list.
    # @param id Contact list id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Contact list name
    # @option opts [Array<String>] :contacts List of contact ids
    # @return [InlineResponse201]
    def update_list(id, opts = {})
      data, _status_code, _headers = update_list_with_http_info(id, opts)
      return data
    end

    # Update List
    # Update a contact list.
    # @param id Contact list id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Contact list name
    # @option opts [Array<String>] :contacts List of contact ids
    # @return [Array<(InlineResponse201, Fixnum, Hash)>] InlineResponse201 data, response status code and response headers
    def update_list_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListsApi.update_list ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ListsApi.update_list"
      end
      # resource path
      local_var_path = "/lists/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["name"] = opts[:'name'] if !opts[:'name'].nil?
      form_params["contacts"] = @api_client.build_collection_param(opts[:'contacts'], :multi) if !opts[:'contacts'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse201')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#update_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update List
    # Update a contact list.
    # @param id Contact list id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Contact list name
    # @option opts [Array<String>] :contacts List of contact ids
    # @return [InlineResponse201]
    def update_list_0(id, opts = {})
      data, _status_code, _headers = update_list_0_with_http_info(id, opts)
      return data
    end

    # Update List
    # Update a contact list.
    # @param id Contact list id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Contact list name
    # @option opts [Array<String>] :contacts List of contact ids
    # @return [Array<(InlineResponse201, Fixnum, Hash)>] InlineResponse201 data, response status code and response headers
    def update_list_0_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListsApi.update_list_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ListsApi.update_list_0"
      end
      # resource path
      local_var_path = "/lists/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["name"] = opts[:'name'] if !opts[:'name'].nil?
      form_params["contacts"] = @api_client.build_collection_param(opts[:'contacts'], :multi) if !opts[:'contacts'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse201')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#update_list_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
