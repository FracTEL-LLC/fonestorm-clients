=begin
#FoneStorm API 2.2.0

#FracTEL's Middleware API

OpenAPI spec version: 2.2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module SwaggerClient
  class FaxesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a new fax under the account.
    # Returns a JSON response
    # @param fonenumber FracTEL phone number to use for fax.
    # @param to Phone number to fax.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message Message to fax.
    # @option opts [String] :pdf 
    # @return [String]
    def post_faxes(fonenumber, to, opts = {})
      data, _status_code, _headers = post_faxes_with_http_info(fonenumber, to, opts)
      return data
    end

    # Create a new fax under the account.
    # Returns a JSON response
    # @param fonenumber FracTEL phone number to use for fax.
    # @param to Phone number to fax.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message Message to fax.
    # @option opts [String] :pdf 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def post_faxes_with_http_info(fonenumber, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FaxesApi.post_faxes ..."
      end
      # verify the required parameter 'fonenumber' is set
      if @api_client.config.client_side_validation && fonenumber.nil?
        fail ArgumentError, "Missing the required parameter 'fonenumber' when calling FaxesApi.post_faxes"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling FaxesApi.post_faxes"
      end
      # resource path
      local_var_path = "/faxes"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["fonenumber"] = fonenumber
      form_params["to"] = to
      form_params["message"] = opts[:'message'] if !opts[:'message'].nil?
      form_params["pdf"] = opts[:'pdf'] if !opts[:'pdf'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FaxesApi#post_faxes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Configure the callback URL to notify when a fax is received.
    # Returns a JSON response
    # @param fonenumber Your FracTEL phone number.
    # @param method Callback URL method.
    # @param url Callback URL.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :url_username Callback URL username.
    # @option opts [String] :url_password Callback URL password.
    # @return [String]
    def post_faxes_receive_notify(fonenumber, method, url, opts = {})
      data, _status_code, _headers = post_faxes_receive_notify_with_http_info(fonenumber, method, url, opts)
      return data
    end

    # Configure the callback URL to notify when a fax is received.
    # Returns a JSON response
    # @param fonenumber Your FracTEL phone number.
    # @param method Callback URL method.
    # @param url Callback URL.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :url_username Callback URL username.
    # @option opts [String] :url_password Callback URL password.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def post_faxes_receive_notify_with_http_info(fonenumber, method, url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FaxesApi.post_faxes_receive_notify ..."
      end
      # verify the required parameter 'fonenumber' is set
      if @api_client.config.client_side_validation && fonenumber.nil?
        fail ArgumentError, "Missing the required parameter 'fonenumber' when calling FaxesApi.post_faxes_receive_notify"
      end
      # verify the required parameter 'method' is set
      if @api_client.config.client_side_validation && method.nil?
        fail ArgumentError, "Missing the required parameter 'method' when calling FaxesApi.post_faxes_receive_notify"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['GET', 'POST', 'JSON'].include?(method)
        fail ArgumentError, "invalid value for 'method', must be one of GET, POST, JSON"
      end
      # verify the required parameter 'url' is set
      if @api_client.config.client_side_validation && url.nil?
        fail ArgumentError, "Missing the required parameter 'url' when calling FaxesApi.post_faxes_receive_notify"
      end
      # resource path
      local_var_path = "/faxes/receive_notify"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["fonenumber"] = fonenumber
      form_params["method"] = method
      form_params["url"] = url
      form_params["url_username"] = opts[:'url_username'] if !opts[:'url_username'].nil?
      form_params["url_password"] = opts[:'url_password'] if !opts[:'url_password'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FaxesApi#post_faxes_receive_notify\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Configure the callback URL to notify when a fax is made.
    # Returns a JSON response
    # @param fonenumber Your FracTEL phone number
    # @param method Callback URL method.
    # @param url Callback URL.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :url_username Callback URL username.
    # @option opts [String] :url_password Callback URL password.
    # @return [String]
    def post_faxes_send_notify(fonenumber, method, url, opts = {})
      data, _status_code, _headers = post_faxes_send_notify_with_http_info(fonenumber, method, url, opts)
      return data
    end

    # Configure the callback URL to notify when a fax is made.
    # Returns a JSON response
    # @param fonenumber Your FracTEL phone number
    # @param method Callback URL method.
    # @param url Callback URL.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :url_username Callback URL username.
    # @option opts [String] :url_password Callback URL password.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def post_faxes_send_notify_with_http_info(fonenumber, method, url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FaxesApi.post_faxes_send_notify ..."
      end
      # verify the required parameter 'fonenumber' is set
      if @api_client.config.client_side_validation && fonenumber.nil?
        fail ArgumentError, "Missing the required parameter 'fonenumber' when calling FaxesApi.post_faxes_send_notify"
      end
      # verify the required parameter 'method' is set
      if @api_client.config.client_side_validation && method.nil?
        fail ArgumentError, "Missing the required parameter 'method' when calling FaxesApi.post_faxes_send_notify"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['GET', 'POST', 'JSON'].include?(method)
        fail ArgumentError, "invalid value for 'method', must be one of GET, POST, JSON"
      end
      # verify the required parameter 'url' is set
      if @api_client.config.client_side_validation && url.nil?
        fail ArgumentError, "Missing the required parameter 'url' when calling FaxesApi.post_faxes_send_notify"
      end
      # resource path
      local_var_path = "/faxes/send_notify"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["fonenumber"] = fonenumber
      form_params["method"] = method
      form_params["url"] = url
      form_params["url_username"] = opts[:'url_username'] if !opts[:'url_username'].nil?
      form_params["url_password"] = opts[:'url_password'] if !opts[:'url_password'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FaxesApi#post_faxes_send_notify\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
