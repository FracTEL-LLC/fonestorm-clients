=begin
#FoneStorm API 2.4.0 (Thunder)

#FracTEL's Middleware API

OpenAPI spec version: 2.4.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module SwaggerClient
  class TemplatesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create Template
    # Create a template
    # @param name Template name
    # @param type Template type
    # @param body Template body
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2019]
    def create_template(name, type, body, opts = {})
      data, _status_code, _headers = create_template_with_http_info(name, type, body, opts)
      return data
    end

    # Create Template
    # Create a template
    # @param name Template name
    # @param type Template type
    # @param body Template body
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2019, Fixnum, Hash)>] InlineResponse2019 data, response status code and response headers
    def create_template_with_http_info(name, type, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TemplatesApi.create_template ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling TemplatesApi.create_template"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling TemplatesApi.create_template"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['EMAIL', 'SMS', 'CALL', 'FAX'].include?(type)
        fail ArgumentError, "invalid value for 'type', must be one of EMAIL, SMS, CALL, FAX"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TemplatesApi.create_template"
      end
      # resource path
      local_var_path = "/templates"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["name"] = name
      form_params["type"] = type
      form_params["body"] = body

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2019')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#create_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Template
    # Create a template
    # @param name Template name
    # @param type Template type
    # @param body Template body
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2019]
    def create_template_0(name, type, body, opts = {})
      data, _status_code, _headers = create_template_0_with_http_info(name, type, body, opts)
      return data
    end

    # Create Template
    # Create a template
    # @param name Template name
    # @param type Template type
    # @param body Template body
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2019, Fixnum, Hash)>] InlineResponse2019 data, response status code and response headers
    def create_template_0_with_http_info(name, type, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TemplatesApi.create_template_0 ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling TemplatesApi.create_template_0"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling TemplatesApi.create_template_0"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['EMAIL', 'SMS', 'CALL', 'FAX'].include?(type)
        fail ArgumentError, "invalid value for 'type', must be one of EMAIL, SMS, CALL, FAX"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TemplatesApi.create_template_0"
      end
      # resource path
      local_var_path = "/templates"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["name"] = name
      form_params["type"] = type
      form_params["body"] = body

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2019')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#create_template_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Template
    # Delete a template.
    # @param id Template id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2019]
    def delete_template(id, opts = {})
      data, _status_code, _headers = delete_template_with_http_info(id, opts)
      return data
    end

    # Delete Template
    # Delete a template.
    # @param id Template id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2019, Fixnum, Hash)>] InlineResponse2019 data, response status code and response headers
    def delete_template_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TemplatesApi.delete_template ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TemplatesApi.delete_template"
      end
      # resource path
      local_var_path = "/templates/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2019')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#delete_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Template
    # Delete a template.
    # @param id Template id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2019]
    def delete_template_0(id, opts = {})
      data, _status_code, _headers = delete_template_0_with_http_info(id, opts)
      return data
    end

    # Delete Template
    # Delete a template.
    # @param id Template id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2019, Fixnum, Hash)>] InlineResponse2019 data, response status code and response headers
    def delete_template_0_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TemplatesApi.delete_template_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TemplatesApi.delete_template_0"
      end
      # resource path
      local_var_path = "/templates/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2019')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#delete_template_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Template
    # Get information about a template.
    # @param id Template id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :attributes Include all attributes
    # @return [InlineResponse2019]
    def get_template(id, opts = {})
      data, _status_code, _headers = get_template_with_http_info(id, opts)
      return data
    end

    # Get Template
    # Get information about a template.
    # @param id Template id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :attributes Include all attributes
    # @return [Array<(InlineResponse2019, Fixnum, Hash)>] InlineResponse2019 data, response status code and response headers
    def get_template_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TemplatesApi.get_template ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TemplatesApi.get_template"
      end
      # resource path
      local_var_path = "/templates/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'attributes'] = opts[:'attributes'] if !opts[:'attributes'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded', 'application/offset+octet-stream', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2019')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#get_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Template
    # Get information about a template.
    # @param id Template id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :attributes Include all attributes
    # @return [InlineResponse2019]
    def get_template_0(id, opts = {})
      data, _status_code, _headers = get_template_0_with_http_info(id, opts)
      return data
    end

    # Get Template
    # Get information about a template.
    # @param id Template id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :attributes Include all attributes
    # @return [Array<(InlineResponse2019, Fixnum, Hash)>] InlineResponse2019 data, response status code and response headers
    def get_template_0_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TemplatesApi.get_template_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TemplatesApi.get_template_0"
      end
      # resource path
      local_var_path = "/templates/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'attributes'] = opts[:'attributes'] if !opts[:'attributes'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded', 'application/offset+octet-stream', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2019')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#get_template_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Templates
    # Get a list of templates.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2006]
    def get_templates(opts = {})
      data, _status_code, _headers = get_templates_with_http_info(opts)
      return data
    end

    # Get Templates
    # Get a list of templates.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2006, Fixnum, Hash)>] InlineResponse2006 data, response status code and response headers
    def get_templates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TemplatesApi.get_templates ..."
      end
      # resource path
      local_var_path = "/templates"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2006')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#get_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Templates
    # Get a list of templates.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2006]
    def get_templates_0(opts = {})
      data, _status_code, _headers = get_templates_0_with_http_info(opts)
      return data
    end

    # Get Templates
    # Get a list of templates.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2006, Fixnum, Hash)>] InlineResponse2006 data, response status code and response headers
    def get_templates_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TemplatesApi.get_templates_0 ..."
      end
      # resource path
      local_var_path = "/templates"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2006')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#get_templates_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Template
    # Update a template.
    # @param id Template id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Template name
    # @option opts [String] :type Template type
    # @option opts [String] :body Template body
    # @return [InlineResponse2019]
    def update_template(id, opts = {})
      data, _status_code, _headers = update_template_with_http_info(id, opts)
      return data
    end

    # Update Template
    # Update a template.
    # @param id Template id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Template name
    # @option opts [String] :type Template type
    # @option opts [String] :body Template body
    # @return [Array<(InlineResponse2019, Fixnum, Hash)>] InlineResponse2019 data, response status code and response headers
    def update_template_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TemplatesApi.update_template ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TemplatesApi.update_template"
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['EMAIL', 'SMS', 'VOICE', 'FAX'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of EMAIL, SMS, VOICE, FAX'
      end
      # resource path
      local_var_path = "/templates/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["name"] = opts[:'name'] if !opts[:'name'].nil?
      form_params["type"] = opts[:'type'] if !opts[:'type'].nil?
      form_params["body"] = opts[:'body'] if !opts[:'body'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2019')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#update_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Template
    # Update a template.
    # @param id Template id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Template name
    # @option opts [String] :type Template type
    # @option opts [String] :body Template body
    # @return [InlineResponse2019]
    def update_template_0(id, opts = {})
      data, _status_code, _headers = update_template_0_with_http_info(id, opts)
      return data
    end

    # Update Template
    # Update a template.
    # @param id Template id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Template name
    # @option opts [String] :type Template type
    # @option opts [String] :body Template body
    # @return [Array<(InlineResponse2019, Fixnum, Hash)>] InlineResponse2019 data, response status code and response headers
    def update_template_0_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TemplatesApi.update_template_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TemplatesApi.update_template_0"
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['EMAIL', 'SMS', 'VOICE', 'FAX'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of EMAIL, SMS, VOICE, FAX'
      end
      # resource path
      local_var_path = "/templates/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["name"] = opts[:'name'] if !opts[:'name'].nil?
      form_params["type"] = opts[:'type'] if !opts[:'type'].nil?
      form_params["body"] = opts[:'body'] if !opts[:'body'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2019')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#update_template_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
