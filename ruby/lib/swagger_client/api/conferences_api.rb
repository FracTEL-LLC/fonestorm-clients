=begin
#FoneStorm API 2.4.0 (Thunder)

#FracTEL's Middleware API

OpenAPI spec version: 2.4.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module SwaggerClient
  class ConferencesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create Conference
    # Create a conference.
    # @param label Label of conference
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :start_time Start time and date of conference
    # @option opts [Date] :end_time End time and date of conference
    # @option opts [BigDecimal] :fonenumber Fonenumber to use for conference
    # @option opts [String] :before_message Message to play before conference start time
    # @option opts [String] :after_message Message to play after conference end time
    # @option opts [Float] :max_members Maximum number of allowed conference attendees
    # @return [InlineResponse2013]
    def create_conference(label, opts = {})
      data, _status_code, _headers = create_conference_with_http_info(label, opts)
      return data
    end

    # Create Conference
    # Create a conference.
    # @param label Label of conference
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :start_time Start time and date of conference
    # @option opts [Date] :end_time End time and date of conference
    # @option opts [BigDecimal] :fonenumber Fonenumber to use for conference
    # @option opts [String] :before_message Message to play before conference start time
    # @option opts [String] :after_message Message to play after conference end time
    # @option opts [Float] :max_members Maximum number of allowed conference attendees
    # @return [Array<(InlineResponse2013, Fixnum, Hash)>] InlineResponse2013 data, response status code and response headers
    def create_conference_with_http_info(label, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConferencesApi.create_conference ..."
      end
      # verify the required parameter 'label' is set
      if @api_client.config.client_side_validation && label.nil?
        fail ArgumentError, "Missing the required parameter 'label' when calling ConferencesApi.create_conference"
      end
      # resource path
      local_var_path = "/conferences"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["label"] = label
      form_params["start_time"] = opts[:'start_time'] if !opts[:'start_time'].nil?
      form_params["end_time"] = opts[:'end_time'] if !opts[:'end_time'].nil?
      form_params["fonenumber"] = opts[:'fonenumber'] if !opts[:'fonenumber'].nil?
      form_params["before_message"] = opts[:'before_message'] if !opts[:'before_message'].nil?
      form_params["after_message"] = opts[:'after_message'] if !opts[:'after_message'].nil?
      form_params["max_members"] = opts[:'max_members'] if !opts[:'max_members'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2013')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConferencesApi#create_conference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Conference
    # Create a conference.
    # @param label Label of conference
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :start_time Start time and date of conference
    # @option opts [Date] :end_time End time and date of conference
    # @option opts [BigDecimal] :fonenumber Fonenumber to use for conference
    # @option opts [String] :before_message Message to play before conference start time
    # @option opts [String] :after_message Message to play after conference end time
    # @option opts [Float] :max_members Maximum number of allowed conference attendees
    # @return [InlineResponse2013]
    def create_conference_0(label, opts = {})
      data, _status_code, _headers = create_conference_0_with_http_info(label, opts)
      return data
    end

    # Create Conference
    # Create a conference.
    # @param label Label of conference
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :start_time Start time and date of conference
    # @option opts [Date] :end_time End time and date of conference
    # @option opts [BigDecimal] :fonenumber Fonenumber to use for conference
    # @option opts [String] :before_message Message to play before conference start time
    # @option opts [String] :after_message Message to play after conference end time
    # @option opts [Float] :max_members Maximum number of allowed conference attendees
    # @return [Array<(InlineResponse2013, Fixnum, Hash)>] InlineResponse2013 data, response status code and response headers
    def create_conference_0_with_http_info(label, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConferencesApi.create_conference_0 ..."
      end
      # verify the required parameter 'label' is set
      if @api_client.config.client_side_validation && label.nil?
        fail ArgumentError, "Missing the required parameter 'label' when calling ConferencesApi.create_conference_0"
      end
      # resource path
      local_var_path = "/conferences"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["label"] = label
      form_params["start_time"] = opts[:'start_time'] if !opts[:'start_time'].nil?
      form_params["end_time"] = opts[:'end_time'] if !opts[:'end_time'].nil?
      form_params["fonenumber"] = opts[:'fonenumber'] if !opts[:'fonenumber'].nil?
      form_params["before_message"] = opts[:'before_message'] if !opts[:'before_message'].nil?
      form_params["after_message"] = opts[:'after_message'] if !opts[:'after_message'].nil?
      form_params["max_members"] = opts[:'max_members'] if !opts[:'max_members'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2013')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConferencesApi#create_conference_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Conference
    # Delete a conference.
    # @param id Conference id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2013]
    def delete_conference(id, opts = {})
      data, _status_code, _headers = delete_conference_with_http_info(id, opts)
      return data
    end

    # Delete Conference
    # Delete a conference.
    # @param id Conference id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2013, Fixnum, Hash)>] InlineResponse2013 data, response status code and response headers
    def delete_conference_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConferencesApi.delete_conference ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ConferencesApi.delete_conference"
      end
      # resource path
      local_var_path = "/conferences/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2013')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConferencesApi#delete_conference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Conference
    # Delete a conference.
    # @param id Conference id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2013]
    def delete_conference_0(id, opts = {})
      data, _status_code, _headers = delete_conference_0_with_http_info(id, opts)
      return data
    end

    # Delete Conference
    # Delete a conference.
    # @param id Conference id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2013, Fixnum, Hash)>] InlineResponse2013 data, response status code and response headers
    def delete_conference_0_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConferencesApi.delete_conference_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ConferencesApi.delete_conference_0"
      end
      # resource path
      local_var_path = "/conferences/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2013')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConferencesApi#delete_conference_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Conference
    # Get information about a conference.
    # @param id Conference id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2013]
    def get_conference(id, opts = {})
      data, _status_code, _headers = get_conference_with_http_info(id, opts)
      return data
    end

    # Get Conference
    # Get information about a conference.
    # @param id Conference id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2013, Fixnum, Hash)>] InlineResponse2013 data, response status code and response headers
    def get_conference_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConferencesApi.get_conference ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ConferencesApi.get_conference"
      end
      # resource path
      local_var_path = "/conferences/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2013')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConferencesApi#get_conference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Conference
    # Get information about a conference.
    # @param id Conference id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2013]
    def get_conference_0(id, opts = {})
      data, _status_code, _headers = get_conference_0_with_http_info(id, opts)
      return data
    end

    # Get Conference
    # Get information about a conference.
    # @param id Conference id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2013, Fixnum, Hash)>] InlineResponse2013 data, response status code and response headers
    def get_conference_0_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConferencesApi.get_conference_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ConferencesApi.get_conference_0"
      end
      # resource path
      local_var_path = "/conferences/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2013')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConferencesApi#get_conference_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Conference Fonenumbers
    # Get fonenumbers assigned to a conference.
    # @param id Conference id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def get_conference_fonenumbers(id, opts = {})
      data, _status_code, _headers = get_conference_fonenumbers_with_http_info(id, opts)
      return data
    end

    # Conference Fonenumbers
    # Get fonenumbers assigned to a conference.
    # @param id Conference id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def get_conference_fonenumbers_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConferencesApi.get_conference_fonenumbers ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ConferencesApi.get_conference_fonenumbers"
      end
      # resource path
      local_var_path = "/conferences/{id}/fonenumbers".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConferencesApi#get_conference_fonenumbers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Conference Fonenumbers
    # Get fonenumbers assigned to a conference.
    # @param id Conference id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def get_conference_fonenumbers_0(id, opts = {})
      data, _status_code, _headers = get_conference_fonenumbers_0_with_http_info(id, opts)
      return data
    end

    # Conference Fonenumbers
    # Get fonenumbers assigned to a conference.
    # @param id Conference id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def get_conference_fonenumbers_0_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConferencesApi.get_conference_fonenumbers_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ConferencesApi.get_conference_fonenumbers_0"
      end
      # resource path
      local_var_path = "/conferences/{id}/fonenumbers".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConferencesApi#get_conference_fonenumbers_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Conferences
    # Get a list of all conferences.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200]
    def get_conferences(opts = {})
      data, _status_code, _headers = get_conferences_with_http_info(opts)
      return data
    end

    # Get Conferences
    # Get a list of all conferences.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def get_conferences_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConferencesApi.get_conferences ..."
      end
      # resource path
      local_var_path = "/conferences"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConferencesApi#get_conferences\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Conferences
    # Get a list of all conferences.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200]
    def get_conferences_0(opts = {})
      data, _status_code, _headers = get_conferences_0_with_http_info(opts)
      return data
    end

    # Get Conferences
    # Get a list of all conferences.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def get_conferences_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConferencesApi.get_conferences_0 ..."
      end
      # resource path
      local_var_path = "/conferences"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConferencesApi#get_conferences_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Conference
    # Update a conference.
    # @param id Conference id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :label Label of conference
    # @option opts [Date] :start_time Start time and date of conference
    # @option opts [Date] :end_time End time and date of conference
    # @option opts [BigDecimal] :fonenumber Fonenumber to use for conference
    # @option opts [String] :before_message Message to play before conference start time
    # @option opts [String] :after_message Message to play after conference end time
    # @option opts [Float] :max_members Maximum number of allowed conference attendees
    # @return [InlineResponse2013]
    def update_conference(id, opts = {})
      data, _status_code, _headers = update_conference_with_http_info(id, opts)
      return data
    end

    # Update Conference
    # Update a conference.
    # @param id Conference id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :label Label of conference
    # @option opts [Date] :start_time Start time and date of conference
    # @option opts [Date] :end_time End time and date of conference
    # @option opts [BigDecimal] :fonenumber Fonenumber to use for conference
    # @option opts [String] :before_message Message to play before conference start time
    # @option opts [String] :after_message Message to play after conference end time
    # @option opts [Float] :max_members Maximum number of allowed conference attendees
    # @return [Array<(InlineResponse2013, Fixnum, Hash)>] InlineResponse2013 data, response status code and response headers
    def update_conference_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConferencesApi.update_conference ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ConferencesApi.update_conference"
      end
      # resource path
      local_var_path = "/conferences/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["label"] = opts[:'label'] if !opts[:'label'].nil?
      form_params["start_time"] = opts[:'start_time'] if !opts[:'start_time'].nil?
      form_params["end_time"] = opts[:'end_time'] if !opts[:'end_time'].nil?
      form_params["fonenumber"] = opts[:'fonenumber'] if !opts[:'fonenumber'].nil?
      form_params["before_message"] = opts[:'before_message'] if !opts[:'before_message'].nil?
      form_params["after_message"] = opts[:'after_message'] if !opts[:'after_message'].nil?
      form_params["max_members"] = opts[:'max_members'] if !opts[:'max_members'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2013')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConferencesApi#update_conference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Conference
    # Update a conference.
    # @param id Conference id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :label Label of conference
    # @option opts [Date] :start_time Start time and date of conference
    # @option opts [Date] :end_time End time and date of conference
    # @option opts [BigDecimal] :fonenumber Fonenumber to use for conference
    # @option opts [String] :before_message Message to play before conference start time
    # @option opts [String] :after_message Message to play after conference end time
    # @option opts [Float] :max_members Maximum number of allowed conference attendees
    # @return [InlineResponse2013]
    def update_conference_0(id, opts = {})
      data, _status_code, _headers = update_conference_0_with_http_info(id, opts)
      return data
    end

    # Update Conference
    # Update a conference.
    # @param id Conference id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :label Label of conference
    # @option opts [Date] :start_time Start time and date of conference
    # @option opts [Date] :end_time End time and date of conference
    # @option opts [BigDecimal] :fonenumber Fonenumber to use for conference
    # @option opts [String] :before_message Message to play before conference start time
    # @option opts [String] :after_message Message to play after conference end time
    # @option opts [Float] :max_members Maximum number of allowed conference attendees
    # @return [Array<(InlineResponse2013, Fixnum, Hash)>] InlineResponse2013 data, response status code and response headers
    def update_conference_0_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConferencesApi.update_conference_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ConferencesApi.update_conference_0"
      end
      # resource path
      local_var_path = "/conferences/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["label"] = opts[:'label'] if !opts[:'label'].nil?
      form_params["start_time"] = opts[:'start_time'] if !opts[:'start_time'].nil?
      form_params["end_time"] = opts[:'end_time'] if !opts[:'end_time'].nil?
      form_params["fonenumber"] = opts[:'fonenumber'] if !opts[:'fonenumber'].nil?
      form_params["before_message"] = opts[:'before_message'] if !opts[:'before_message'].nil?
      form_params["after_message"] = opts[:'after_message'] if !opts[:'after_message'].nil?
      form_params["max_members"] = opts[:'max_members'] if !opts[:'max_members'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2013')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConferencesApi#update_conference_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
