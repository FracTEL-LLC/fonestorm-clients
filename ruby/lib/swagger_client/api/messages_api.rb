=begin
#FracTEL API 2.1.1

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.1.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module SwaggerClient
  class MessagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Configure the delivery service type used as the destination for received messages.
    # Returns a JSON response
    # @param fonenumber Your FracTEL phone number.
    # @param type Message routing type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :value Message routing type value.
    # @option opts [String] :url_method URL method when type is URL.
    # @option opts [String] :url_username Optional URL username when type is URL.
    # @option opts [String] :url_password Optional URL password when type is URL.
    # @return [String]
    def post_messages_receive(fonenumber, type, opts = {})
      data, _status_code, _headers = post_messages_receive_with_http_info(fonenumber, type, opts)
      return data
    end

    # Configure the delivery service type used as the destination for received messages.
    # Returns a JSON response
    # @param fonenumber Your FracTEL phone number.
    # @param type Message routing type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :value Message routing type value.
    # @option opts [String] :url_method URL method when type is URL.
    # @option opts [String] :url_username Optional URL username when type is URL.
    # @option opts [String] :url_password Optional URL password when type is URL.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def post_messages_receive_with_http_info(fonenumber, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagesApi.post_messages_receive ..."
      end
      # verify the required parameter 'fonenumber' is set
      if @api_client.config.client_side_validation && fonenumber.nil?
        fail ArgumentError, "Missing the required parameter 'fonenumber' when calling MessagesApi.post_messages_receive"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling MessagesApi.post_messages_receive"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['None', 'Device', 'Email', 'URL', 'Forward'].include?(type)
        fail ArgumentError, "invalid value for 'type', must be one of None, Device, Email, URL, Forward"
      end
      if @api_client.config.client_side_validation && opts[:'url_method'] && !['GET', 'POST', 'JSON'].include?(opts[:'url_method'])
        fail ArgumentError, 'invalid value for "url_method", must be one of GET, POST, JSON'
      end
      # resource path
      local_var_path = "/messages/receive"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["fonenumber"] = fonenumber
      form_params["type"] = type
      form_params["value"] = opts[:'value'] if !opts[:'value'].nil?
      form_params["url_method"] = opts[:'url_method'] if !opts[:'url_method'].nil?
      form_params["url_username"] = opts[:'url_username'] if !opts[:'url_username'].nil?
      form_params["url_password"] = opts[:'url_password'] if !opts[:'url_password'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#post_messages_receive\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Configure the callback URL to notify when a message is received.
    # Returns a JSON response
    # @param fonenumber Your FracTEL phone number.
    # @param method Callback URL method.
    # @param url Callback URL.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :url_username Callback URL username.
    # @option opts [String] :url_password Callback URL password.
    # @return [String]
    def post_messages_receive_notify(fonenumber, method, url, opts = {})
      data, _status_code, _headers = post_messages_receive_notify_with_http_info(fonenumber, method, url, opts)
      return data
    end

    # Configure the callback URL to notify when a message is received.
    # Returns a JSON response
    # @param fonenumber Your FracTEL phone number.
    # @param method Callback URL method.
    # @param url Callback URL.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :url_username Callback URL username.
    # @option opts [String] :url_password Callback URL password.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def post_messages_receive_notify_with_http_info(fonenumber, method, url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagesApi.post_messages_receive_notify ..."
      end
      # verify the required parameter 'fonenumber' is set
      if @api_client.config.client_side_validation && fonenumber.nil?
        fail ArgumentError, "Missing the required parameter 'fonenumber' when calling MessagesApi.post_messages_receive_notify"
      end
      # verify the required parameter 'method' is set
      if @api_client.config.client_side_validation && method.nil?
        fail ArgumentError, "Missing the required parameter 'method' when calling MessagesApi.post_messages_receive_notify"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['GET', 'POST', 'JSON'].include?(method)
        fail ArgumentError, "invalid value for 'method', must be one of GET, POST, JSON"
      end
      # verify the required parameter 'url' is set
      if @api_client.config.client_side_validation && url.nil?
        fail ArgumentError, "Missing the required parameter 'url' when calling MessagesApi.post_messages_receive_notify"
      end
      # resource path
      local_var_path = "/messages/receive_notify"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["fonenumber"] = fonenumber
      form_params["method"] = method
      form_params["url"] = url
      form_params["url_username"] = opts[:'url_username'] if !opts[:'url_username'].nil?
      form_params["url_password"] = opts[:'url_password'] if !opts[:'url_password'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#post_messages_receive_notify\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send an SMS or MMS message to a recipient.
    # Returns a JSON response
    # @param to The recipient&#39;s 10 digits phone number.
    # @param fonenumber Your FracTEL phone number to use as from
    # @param message Content of SMS
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :media_url URL for media for send via SMS (up to 10)
    # @option opts [String] :confirmation_url Callback URL for confirmation
    # @option opts [String] :confirmation_url_username Callback URL username for confirmation
    # @option opts [String] :confirmation_url_password Callback URL password for confirmation
    # @option opts [BOOLEAN] :require_confirmation Only send message if confirmation is available
    # @return [String]
    def post_messages_send(to, fonenumber, message, opts = {})
      data, _status_code, _headers = post_messages_send_with_http_info(to, fonenumber, message, opts)
      return data
    end

    # Send an SMS or MMS message to a recipient.
    # Returns a JSON response
    # @param to The recipient&#39;s 10 digits phone number.
    # @param fonenumber Your FracTEL phone number to use as from
    # @param message Content of SMS
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :media_url URL for media for send via SMS (up to 10)
    # @option opts [String] :confirmation_url Callback URL for confirmation
    # @option opts [String] :confirmation_url_username Callback URL username for confirmation
    # @option opts [String] :confirmation_url_password Callback URL password for confirmation
    # @option opts [BOOLEAN] :require_confirmation Only send message if confirmation is available
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def post_messages_send_with_http_info(to, fonenumber, message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagesApi.post_messages_send ..."
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling MessagesApi.post_messages_send"
      end
      # verify the required parameter 'fonenumber' is set
      if @api_client.config.client_side_validation && fonenumber.nil?
        fail ArgumentError, "Missing the required parameter 'fonenumber' when calling MessagesApi.post_messages_send"
      end
      # verify the required parameter 'message' is set
      if @api_client.config.client_side_validation && message.nil?
        fail ArgumentError, "Missing the required parameter 'message' when calling MessagesApi.post_messages_send"
      end
      if @api_client.config.client_side_validation && !opts[:'media_url'].nil? && opts[:'media_url'].length > 10
        fail ArgumentError, 'invalid value for "opts[:"media_url"]" when calling MessagesApi.post_messages_send, number of items must be less than or equal to 10.'
      end

      # resource path
      local_var_path = "/messages/send"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["to"] = to
      form_params["fonenumber"] = fonenumber
      form_params["message"] = message
      form_params["media_url"] = @api_client.build_collection_param(opts[:'media_url'], :multi) if !opts[:'media_url'].nil?
      form_params["confirmation_url"] = opts[:'confirmation_url'] if !opts[:'confirmation_url'].nil?
      form_params["confirmation_url_username"] = opts[:'confirmation_url_username'] if !opts[:'confirmation_url_username'].nil?
      form_params["confirmation_url_password"] = opts[:'confirmation_url_password'] if !opts[:'confirmation_url_password'].nil?
      form_params["require_confirmation"] = opts[:'require_confirmation'] if !opts[:'require_confirmation'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#post_messages_send\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Configure the callback URL to notify when a message is sent.
    # Returns a JSON response
    # @param fonenumber Your FracTEL phone number
    # @param method Callback URL method.
    # @param url Callback URL.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :url_username Callback URL username.
    # @option opts [String] :url_password Callback URL password.
    # @return [String]
    def post_messages_send_notify(fonenumber, method, url, opts = {})
      data, _status_code, _headers = post_messages_send_notify_with_http_info(fonenumber, method, url, opts)
      return data
    end

    # Configure the callback URL to notify when a message is sent.
    # Returns a JSON response
    # @param fonenumber Your FracTEL phone number
    # @param method Callback URL method.
    # @param url Callback URL.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :url_username Callback URL username.
    # @option opts [String] :url_password Callback URL password.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def post_messages_send_notify_with_http_info(fonenumber, method, url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagesApi.post_messages_send_notify ..."
      end
      # verify the required parameter 'fonenumber' is set
      if @api_client.config.client_side_validation && fonenumber.nil?
        fail ArgumentError, "Missing the required parameter 'fonenumber' when calling MessagesApi.post_messages_send_notify"
      end
      # verify the required parameter 'method' is set
      if @api_client.config.client_side_validation && method.nil?
        fail ArgumentError, "Missing the required parameter 'method' when calling MessagesApi.post_messages_send_notify"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['GET', 'POST', 'JSON'].include?(method)
        fail ArgumentError, "invalid value for 'method', must be one of GET, POST, JSON"
      end
      # verify the required parameter 'url' is set
      if @api_client.config.client_side_validation && url.nil?
        fail ArgumentError, "Missing the required parameter 'url' when calling MessagesApi.post_messages_send_notify"
      end
      # resource path
      local_var_path = "/messages/send_notify"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["fonenumber"] = fonenumber
      form_params["method"] = method
      form_params["url"] = url
      form_params["url_username"] = opts[:'url_username'] if !opts[:'url_username'].nil?
      form_params["url_password"] = opts[:'url_password'] if !opts[:'url_password'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#post_messages_send_notify\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
