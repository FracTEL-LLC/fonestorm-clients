=begin
#FoneStorm API 2.4.0 (Thunder)

#FracTEL's Middleware API

OpenAPI spec version: 2.4.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module SwaggerClient
  class EventsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create Event
    # Create an event.
    # @param id Event id
    # @param organizer_contact_id Event organizer contact id
    # @param start_time Event start time
    # @param end_time Event end time
    # @param title Event title
    # @param attendees Event attendee contact ids
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description Event description
    # @option opts [String] :location Event location
    # @option opts [String] :status Event status
    # @option opts [Float] :reschedule_count Event reschedule count
    # @return [InlineResponse2012]
    def create_event(id, organizer_contact_id, start_time, end_time, title, attendees, opts = {})
      data, _status_code, _headers = create_event_with_http_info(id, organizer_contact_id, start_time, end_time, title, attendees, opts)
      return data
    end

    # Create Event
    # Create an event.
    # @param id Event id
    # @param organizer_contact_id Event organizer contact id
    # @param start_time Event start time
    # @param end_time Event end time
    # @param title Event title
    # @param attendees Event attendee contact ids
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description Event description
    # @option opts [String] :location Event location
    # @option opts [String] :status Event status
    # @option opts [Float] :reschedule_count Event reschedule count
    # @return [Array<(InlineResponse2012, Fixnum, Hash)>] InlineResponse2012 data, response status code and response headers
    def create_event_with_http_info(id, organizer_contact_id, start_time, end_time, title, attendees, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventsApi.create_event ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventsApi.create_event"
      end
      # verify the required parameter 'organizer_contact_id' is set
      if @api_client.config.client_side_validation && organizer_contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'organizer_contact_id' when calling EventsApi.create_event"
      end
      # verify the required parameter 'start_time' is set
      if @api_client.config.client_side_validation && start_time.nil?
        fail ArgumentError, "Missing the required parameter 'start_time' when calling EventsApi.create_event"
      end
      # verify the required parameter 'end_time' is set
      if @api_client.config.client_side_validation && end_time.nil?
        fail ArgumentError, "Missing the required parameter 'end_time' when calling EventsApi.create_event"
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling EventsApi.create_event"
      end
      if @api_client.config.client_side_validation && title.to_s.length > 64
        fail ArgumentError, 'invalid value for "title" when calling EventsApi.create_event, the character length must be smaller than or equal to 64.'
      end

      # verify the required parameter 'attendees' is set
      if @api_client.config.client_side_validation && attendees.nil?
        fail ArgumentError, "Missing the required parameter 'attendees' when calling EventsApi.create_event"
      end
      if @api_client.config.client_side_validation && !opts[:'location'].nil? && opts[:'location'].to_s.length > 64
        fail ArgumentError, 'invalid value for "opts[:"location"]" when calling EventsApi.create_event, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && opts[:'status'] && !['PENDING', 'PROCESSED', 'CANCELLED', 'FAILED', 'SUSPENDED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of PENDING, PROCESSED, CANCELLED, FAILED, SUSPENDED'
      end
      # resource path
      local_var_path = "/events"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["id"] = id
      form_params["organizer_contact_id"] = organizer_contact_id
      form_params["start_time"] = start_time
      form_params["end_time"] = end_time
      form_params["title"] = title
      form_params["attendees"] = @api_client.build_collection_param(attendees, :multi)
      form_params["description"] = opts[:'description'] if !opts[:'description'].nil?
      form_params["location"] = opts[:'location'] if !opts[:'location'].nil?
      form_params["status"] = opts[:'status'] if !opts[:'status'].nil?
      form_params["reschedule_count"] = opts[:'reschedule_count'] if !opts[:'reschedule_count'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2012')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#create_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Event
    # Create an event.
    # @param id Event id
    # @param organizer_contact_id Event organizer contact id
    # @param start_time Event start time
    # @param end_time Event end time
    # @param title Event title
    # @param attendees Event attendee contact ids
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description Event description
    # @option opts [String] :location Event location
    # @option opts [String] :status Event status
    # @option opts [Float] :reschedule_count Event reschedule count
    # @return [InlineResponse2012]
    def create_event_0(id, organizer_contact_id, start_time, end_time, title, attendees, opts = {})
      data, _status_code, _headers = create_event_0_with_http_info(id, organizer_contact_id, start_time, end_time, title, attendees, opts)
      return data
    end

    # Create Event
    # Create an event.
    # @param id Event id
    # @param organizer_contact_id Event organizer contact id
    # @param start_time Event start time
    # @param end_time Event end time
    # @param title Event title
    # @param attendees Event attendee contact ids
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description Event description
    # @option opts [String] :location Event location
    # @option opts [String] :status Event status
    # @option opts [Float] :reschedule_count Event reschedule count
    # @return [Array<(InlineResponse2012, Fixnum, Hash)>] InlineResponse2012 data, response status code and response headers
    def create_event_0_with_http_info(id, organizer_contact_id, start_time, end_time, title, attendees, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventsApi.create_event_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventsApi.create_event_0"
      end
      # verify the required parameter 'organizer_contact_id' is set
      if @api_client.config.client_side_validation && organizer_contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'organizer_contact_id' when calling EventsApi.create_event_0"
      end
      # verify the required parameter 'start_time' is set
      if @api_client.config.client_side_validation && start_time.nil?
        fail ArgumentError, "Missing the required parameter 'start_time' when calling EventsApi.create_event_0"
      end
      # verify the required parameter 'end_time' is set
      if @api_client.config.client_side_validation && end_time.nil?
        fail ArgumentError, "Missing the required parameter 'end_time' when calling EventsApi.create_event_0"
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling EventsApi.create_event_0"
      end
      if @api_client.config.client_side_validation && title.to_s.length > 64
        fail ArgumentError, 'invalid value for "title" when calling EventsApi.create_event_0, the character length must be smaller than or equal to 64.'
      end

      # verify the required parameter 'attendees' is set
      if @api_client.config.client_side_validation && attendees.nil?
        fail ArgumentError, "Missing the required parameter 'attendees' when calling EventsApi.create_event_0"
      end
      if @api_client.config.client_side_validation && !opts[:'location'].nil? && opts[:'location'].to_s.length > 64
        fail ArgumentError, 'invalid value for "opts[:"location"]" when calling EventsApi.create_event_0, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && opts[:'status'] && !['PENDING', 'PROCESSED', 'CANCELLED', 'FAILED', 'SUSPENDED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of PENDING, PROCESSED, CANCELLED, FAILED, SUSPENDED'
      end
      # resource path
      local_var_path = "/events"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["id"] = id
      form_params["organizer_contact_id"] = organizer_contact_id
      form_params["start_time"] = start_time
      form_params["end_time"] = end_time
      form_params["title"] = title
      form_params["attendees"] = @api_client.build_collection_param(attendees, :multi)
      form_params["description"] = opts[:'description'] if !opts[:'description'].nil?
      form_params["location"] = opts[:'location'] if !opts[:'location'].nil?
      form_params["status"] = opts[:'status'] if !opts[:'status'].nil?
      form_params["reschedule_count"] = opts[:'reschedule_count'] if !opts[:'reschedule_count'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2012')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#create_event_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Event
    # Delete a single event.
    # @param id Event id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2012]
    def delete_event(id, opts = {})
      data, _status_code, _headers = delete_event_with_http_info(id, opts)
      return data
    end

    # Delete Event
    # Delete a single event.
    # @param id Event id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2012, Fixnum, Hash)>] InlineResponse2012 data, response status code and response headers
    def delete_event_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventsApi.delete_event ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventsApi.delete_event"
      end
      # resource path
      local_var_path = "/events/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2012')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#delete_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Event
    # Delete a single event.
    # @param id Event id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2012]
    def delete_event_0(id, opts = {})
      data, _status_code, _headers = delete_event_0_with_http_info(id, opts)
      return data
    end

    # Delete Event
    # Delete a single event.
    # @param id Event id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2012, Fixnum, Hash)>] InlineResponse2012 data, response status code and response headers
    def delete_event_0_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventsApi.delete_event_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventsApi.delete_event_0"
      end
      # resource path
      local_var_path = "/events/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2012')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#delete_event_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Event
    # Get information about an event.
    # @param id Event id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2012]
    def get_event(id, opts = {})
      data, _status_code, _headers = get_event_with_http_info(id, opts)
      return data
    end

    # Get Event
    # Get information about an event.
    # @param id Event id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2012, Fixnum, Hash)>] InlineResponse2012 data, response status code and response headers
    def get_event_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventsApi.get_event ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventsApi.get_event"
      end
      # resource path
      local_var_path = "/events/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2012')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#get_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Event
    # Get information about an event.
    # @param id Event id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2012]
    def get_event_0(id, opts = {})
      data, _status_code, _headers = get_event_0_with_http_info(id, opts)
      return data
    end

    # Get Event
    # Get information about an event.
    # @param id Event id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2012, Fixnum, Hash)>] InlineResponse2012 data, response status code and response headers
    def get_event_0_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventsApi.get_event_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventsApi.get_event_0"
      end
      # resource path
      local_var_path = "/events/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2012')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#get_event_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Events
    # Get a list of all events.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2001]
    def get_events(opts = {})
      data, _status_code, _headers = get_events_with_http_info(opts)
      return data
    end

    # Get Events
    # Get a list of all events.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2001, Fixnum, Hash)>] InlineResponse2001 data, response status code and response headers
    def get_events_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventsApi.get_events ..."
      end
      # resource path
      local_var_path = "/events"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2001')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#get_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Events
    # Get a list of all events.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2001]
    def get_events_0(opts = {})
      data, _status_code, _headers = get_events_0_with_http_info(opts)
      return data
    end

    # Get Events
    # Get a list of all events.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2001, Fixnum, Hash)>] InlineResponse2001 data, response status code and response headers
    def get_events_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventsApi.get_events_0 ..."
      end
      # resource path
      local_var_path = "/events"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2001')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#get_events_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Event
    # Update an event.
    # @param id Event id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :organizer_contact_id Event organizer contact id
    # @option opts [Date] :start_time Event start time
    # @option opts [Date] :end_time Event end time
    # @option opts [String] :title Event title
    # @option opts [String] :description Event description
    # @option opts [String] :location Event location
    # @option opts [Array<String>] :attendees Event attendee contact ids
    # @option opts [String] :status Event status
    # @option opts [Float] :reschedule_count Event reschedule count
    # @return [InlineResponse2012]
    def update_event(id, opts = {})
      data, _status_code, _headers = update_event_with_http_info(id, opts)
      return data
    end

    # Update Event
    # Update an event.
    # @param id Event id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :organizer_contact_id Event organizer contact id
    # @option opts [Date] :start_time Event start time
    # @option opts [Date] :end_time Event end time
    # @option opts [String] :title Event title
    # @option opts [String] :description Event description
    # @option opts [String] :location Event location
    # @option opts [Array<String>] :attendees Event attendee contact ids
    # @option opts [String] :status Event status
    # @option opts [Float] :reschedule_count Event reschedule count
    # @return [Array<(InlineResponse2012, Fixnum, Hash)>] InlineResponse2012 data, response status code and response headers
    def update_event_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventsApi.update_event ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventsApi.update_event"
      end
      if @api_client.config.client_side_validation && !opts[:'title'].nil? && opts[:'title'].to_s.length > 64
        fail ArgumentError, 'invalid value for "opts[:"title"]" when calling EventsApi.update_event, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && !opts[:'location'].nil? && opts[:'location'].to_s.length > 64
        fail ArgumentError, 'invalid value for "opts[:"location"]" when calling EventsApi.update_event, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && opts[:'status'] && !['PENDING', 'PROCESSED', 'CANCELLED', 'FAILED', 'SUSPENDED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of PENDING, PROCESSED, CANCELLED, FAILED, SUSPENDED'
      end
      # resource path
      local_var_path = "/events/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["organizer_contact_id"] = opts[:'organizer_contact_id'] if !opts[:'organizer_contact_id'].nil?
      form_params["start_time"] = opts[:'start_time'] if !opts[:'start_time'].nil?
      form_params["end_time"] = opts[:'end_time'] if !opts[:'end_time'].nil?
      form_params["title"] = opts[:'title'] if !opts[:'title'].nil?
      form_params["description"] = opts[:'description'] if !opts[:'description'].nil?
      form_params["location"] = opts[:'location'] if !opts[:'location'].nil?
      form_params["attendees"] = @api_client.build_collection_param(opts[:'attendees'], :multi) if !opts[:'attendees'].nil?
      form_params["status"] = opts[:'status'] if !opts[:'status'].nil?
      form_params["reschedule_count"] = opts[:'reschedule_count'] if !opts[:'reschedule_count'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2012')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#update_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Event
    # Update an event.
    # @param id Event id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :organizer_contact_id Event organizer contact id
    # @option opts [Date] :start_time Event start time
    # @option opts [Date] :end_time Event end time
    # @option opts [String] :title Event title
    # @option opts [String] :description Event description
    # @option opts [String] :location Event location
    # @option opts [Array<String>] :attendees Event attendee contact ids
    # @option opts [String] :status Event status
    # @option opts [Float] :reschedule_count Event reschedule count
    # @return [InlineResponse2012]
    def update_event_0(id, opts = {})
      data, _status_code, _headers = update_event_0_with_http_info(id, opts)
      return data
    end

    # Update Event
    # Update an event.
    # @param id Event id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :organizer_contact_id Event organizer contact id
    # @option opts [Date] :start_time Event start time
    # @option opts [Date] :end_time Event end time
    # @option opts [String] :title Event title
    # @option opts [String] :description Event description
    # @option opts [String] :location Event location
    # @option opts [Array<String>] :attendees Event attendee contact ids
    # @option opts [String] :status Event status
    # @option opts [Float] :reschedule_count Event reschedule count
    # @return [Array<(InlineResponse2012, Fixnum, Hash)>] InlineResponse2012 data, response status code and response headers
    def update_event_0_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventsApi.update_event_0 ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventsApi.update_event_0"
      end
      if @api_client.config.client_side_validation && !opts[:'title'].nil? && opts[:'title'].to_s.length > 64
        fail ArgumentError, 'invalid value for "opts[:"title"]" when calling EventsApi.update_event_0, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && !opts[:'location'].nil? && opts[:'location'].to_s.length > 64
        fail ArgumentError, 'invalid value for "opts[:"location"]" when calling EventsApi.update_event_0, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && opts[:'status'] && !['PENDING', 'PROCESSED', 'CANCELLED', 'FAILED', 'SUSPENDED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of PENDING, PROCESSED, CANCELLED, FAILED, SUSPENDED'
      end
      # resource path
      local_var_path = "/events/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["organizer_contact_id"] = opts[:'organizer_contact_id'] if !opts[:'organizer_contact_id'].nil?
      form_params["start_time"] = opts[:'start_time'] if !opts[:'start_time'].nil?
      form_params["end_time"] = opts[:'end_time'] if !opts[:'end_time'].nil?
      form_params["title"] = opts[:'title'] if !opts[:'title'].nil?
      form_params["description"] = opts[:'description'] if !opts[:'description'].nil?
      form_params["location"] = opts[:'location'] if !opts[:'location'].nil?
      form_params["attendees"] = @api_client.build_collection_param(opts[:'attendees'], :multi) if !opts[:'attendees'].nil?
      form_params["status"] = opts[:'status'] if !opts[:'status'].nil?
      form_params["reschedule_count"] = opts[:'reschedule_count'] if !opts[:'reschedule_count'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['jwt']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2012')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#update_event_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
