=begin
#FracTEL API 2.1.2

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.1.2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module SwaggerClient
  class FonenumbersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Remove fonenumber from the account.
    # Returns a JSON response
    # @param fonenumber Your FracTEL fonenumber.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def delete_fonenumbers_fonenumber(fonenumber, opts = {})
      data, _status_code, _headers = delete_fonenumbers_fonenumber_with_http_info(fonenumber, opts)
      return data
    end

    # Remove fonenumber from the account.
    # Returns a JSON response
    # @param fonenumber Your FracTEL fonenumber.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def delete_fonenumbers_fonenumber_with_http_info(fonenumber, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FonenumbersApi.delete_fonenumbers_fonenumber ..."
      end
      # verify the required parameter 'fonenumber' is set
      if @api_client.config.client_side_validation && fonenumber.nil?
        fail ArgumentError, "Missing the required parameter 'fonenumber' when calling FonenumbersApi.delete_fonenumbers_fonenumber"
      end
      # resource path
      local_var_path = "/fonenumbers/{fonenumber}".sub('{' + 'fonenumber' + '}', fonenumber.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FonenumbersApi#delete_fonenumbers_fonenumber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all active fonenumbers listed under the account.
    # Returns a JSON response
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filters for the response.
    # @return [String]
    def get_fonenumbers(opts = {})
      data, _status_code, _headers = get_fonenumbers_with_http_info(opts)
      return data
    end

    # Get all active fonenumbers listed under the account.
    # Returns a JSON response
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filters for the response.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_fonenumbers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FonenumbersApi.get_fonenumbers ..."
      end
      if @api_client.config.client_side_validation && opts[:'filter'] && !['fonenumbers', 'all'].include?(opts[:'filter'])
        fail ArgumentError, 'invalid value for "filter", must be one of fonenumbers, all'
      end
      # resource path
      local_var_path = "/fonenumbers"

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FonenumbersApi#get_fonenumbers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a single fonenumber listed under the account.
    # Returns a JSON response
    # @param fonenumber Your FracTEL fonenumber.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_fonenumbers_fonenumber(fonenumber, opts = {})
      data, _status_code, _headers = get_fonenumbers_fonenumber_with_http_info(fonenumber, opts)
      return data
    end

    # Get a single fonenumber listed under the account.
    # Returns a JSON response
    # @param fonenumber Your FracTEL fonenumber.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_fonenumbers_fonenumber_with_http_info(fonenumber, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FonenumbersApi.get_fonenumbers_fonenumber ..."
      end
      # verify the required parameter 'fonenumber' is set
      if @api_client.config.client_side_validation && fonenumber.nil?
        fail ArgumentError, "Missing the required parameter 'fonenumber' when calling FonenumbersApi.get_fonenumbers_fonenumber"
      end
      # resource path
      local_var_path = "/fonenumbers/{fonenumber}".sub('{' + 'fonenumber' + '}', fonenumber.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FonenumbersApi#get_fonenumbers_fonenumber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Order quick fonenumber for the account.
    # Returns a JSON response
    # @param area_code A valid 3-digit Area Code.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def post_fonenumbers(area_code, opts = {})
      data, _status_code, _headers = post_fonenumbers_with_http_info(area_code, opts)
      return data
    end

    # Order quick fonenumber for the account.
    # Returns a JSON response
    # @param area_code A valid 3-digit Area Code.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def post_fonenumbers_with_http_info(area_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FonenumbersApi.post_fonenumbers ..."
      end
      # verify the required parameter 'area_code' is set
      if @api_client.config.client_side_validation && area_code.nil?
        fail ArgumentError, "Missing the required parameter 'area_code' when calling FonenumbersApi.post_fonenumbers"
      end
      # resource path
      local_var_path = "/fonenumbers"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["area_code"] = area_code

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FonenumbersApi#post_fonenumbers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Configure the service type for an account fonenumber.
    # Returns a JSON response
    # @param fonenumber Your FracTEL fonenumber.
    # @param type Message routing type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :value Message routing type value.
    # @option opts [String] :url_method URL method.
    # @option opts [String] :url_username URL auth username.
    # @option opts [String] :url_password URL auth password.
    # @return [String]
    def put_fonenumbers_fonenumber(fonenumber, type, opts = {})
      data, _status_code, _headers = put_fonenumbers_fonenumber_with_http_info(fonenumber, type, opts)
      return data
    end

    # Configure the service type for an account fonenumber.
    # Returns a JSON response
    # @param fonenumber Your FracTEL fonenumber.
    # @param type Message routing type.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :value Message routing type value.
    # @option opts [String] :url_method URL method.
    # @option opts [String] :url_username URL auth username.
    # @option opts [String] :url_password URL auth password.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def put_fonenumbers_fonenumber_with_http_info(fonenumber, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FonenumbersApi.put_fonenumbers_fonenumber ..."
      end
      # verify the required parameter 'fonenumber' is set
      if @api_client.config.client_side_validation && fonenumber.nil?
        fail ArgumentError, "Missing the required parameter 'fonenumber' when calling FonenumbersApi.put_fonenumbers_fonenumber"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling FonenumbersApi.put_fonenumbers_fonenumber"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['None', 'Device', 'Email', 'URL', 'Forward'].include?(type)
        fail ArgumentError, "invalid value for 'type', must be one of None, Device, Email, URL, Forward"
      end
      if @api_client.config.client_side_validation && opts[:'url_method'] && !['GET', 'POST', 'JSON'].include?(opts[:'url_method'])
        fail ArgumentError, 'invalid value for "url_method", must be one of GET, POST, JSON'
      end
      # resource path
      local_var_path = "/fonenumbers/{fonenumber}".sub('{' + 'fonenumber' + '}', fonenumber.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["type"] = type
      form_params["value"] = opts[:'value'] if !opts[:'value'].nil?
      form_params["url_method"] = opts[:'url_method'] if !opts[:'url_method'].nil?
      form_params["url_username"] = opts[:'url_username'] if !opts[:'url_username'].nil?
      form_params["url_password"] = opts[:'url_password'] if !opts[:'url_password'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FonenumbersApi#put_fonenumbers_fonenumber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
