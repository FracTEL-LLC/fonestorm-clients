=begin comment

FoneStorm API 2.2.0 (Breeze)

FracTEL's Middleware API

OpenAPI spec version: 2.2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::FonenumbersApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# create_fonenumber
#
# Create FoneNumber
# 
# @param string $area_code Valid 3-digit area code (required)
{
    my $params = {
    'area_code' => {
        data_type => 'string',
        description => 'Valid 3-digit area code',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_fonenumber' } = { 
    	summary => 'Create FoneNumber',
        params => $params,
        returns => 'InlineResponse2013',
        };
}
# @return InlineResponse2013
#
sub create_fonenumber {
    my ($self, %args) = @_;

    # verify the required parameter 'area_code' is set
    unless (exists $args{'area_code'}) {
      croak("Missing the required parameter 'area_code' when calling create_fonenumber");
    }

    # parse inputs
    my $_resource_path = '/fonenumbers';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # form params
    if ( exists $args{'area_code'} ) {
                $form_params->{'area_code'} = $self->{api_client}->to_form_value($args{'area_code'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2013', $response);
    return $_response_object;
}

#
# create_fonenumber_0
#
# Create FoneNumber
# 
# @param string $area_code Valid 3-digit area code (required)
{
    my $params = {
    'area_code' => {
        data_type => 'string',
        description => 'Valid 3-digit area code',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_fonenumber_0' } = { 
    	summary => 'Create FoneNumber',
        params => $params,
        returns => 'InlineResponse2013',
        };
}
# @return InlineResponse2013
#
sub create_fonenumber_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'area_code' is set
    unless (exists $args{'area_code'}) {
      croak("Missing the required parameter 'area_code' when calling create_fonenumber_0");
    }

    # parse inputs
    my $_resource_path = '/fonenumbers';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # form params
    if ( exists $args{'area_code'} ) {
                $form_params->{'area_code'} = $self->{api_client}->to_form_value($args{'area_code'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2013', $response);
    return $_response_object;
}

#
# delete_fonenumber
#
# Delete FoneNumber
# 
# @param string $fonenumber FoneNumber associated with the account (required)
{
    my $params = {
    'fonenumber' => {
        data_type => 'string',
        description => 'FoneNumber associated with the account',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_fonenumber' } = { 
    	summary => 'Delete FoneNumber',
        params => $params,
        returns => 'InlineResponse2013',
        };
}
# @return InlineResponse2013
#
sub delete_fonenumber {
    my ($self, %args) = @_;

    # verify the required parameter 'fonenumber' is set
    unless (exists $args{'fonenumber'}) {
      croak("Missing the required parameter 'fonenumber' when calling delete_fonenumber");
    }

    # parse inputs
    my $_resource_path = '/fonenumbers/{fonenumber}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'fonenumber'}) {
        my $_base_variable = "{" . "fonenumber" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'fonenumber'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2013', $response);
    return $_response_object;
}

#
# delete_fonenumber_0
#
# Delete FoneNumber
# 
# @param string $fonenumber FoneNumber associated with the account (required)
{
    my $params = {
    'fonenumber' => {
        data_type => 'string',
        description => 'FoneNumber associated with the account',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_fonenumber_0' } = { 
    	summary => 'Delete FoneNumber',
        params => $params,
        returns => 'InlineResponse2013',
        };
}
# @return InlineResponse2013
#
sub delete_fonenumber_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'fonenumber' is set
    unless (exists $args{'fonenumber'}) {
      croak("Missing the required parameter 'fonenumber' when calling delete_fonenumber_0");
    }

    # parse inputs
    my $_resource_path = '/fonenumbers/{fonenumber}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'fonenumber'}) {
        my $_base_variable = "{" . "fonenumber" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'fonenumber'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2013', $response);
    return $_response_object;
}

#
# get_fonenumber
#
# Get FoneNumber
# 
# @param string $fonenumber FoneNumber associated with the account (required)
{
    my $params = {
    'fonenumber' => {
        data_type => 'string',
        description => 'FoneNumber associated with the account',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_fonenumber' } = { 
    	summary => 'Get FoneNumber',
        params => $params,
        returns => 'InlineResponse2013',
        };
}
# @return InlineResponse2013
#
sub get_fonenumber {
    my ($self, %args) = @_;

    # verify the required parameter 'fonenumber' is set
    unless (exists $args{'fonenumber'}) {
      croak("Missing the required parameter 'fonenumber' when calling get_fonenumber");
    }

    # parse inputs
    my $_resource_path = '/fonenumbers/{fonenumber}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'fonenumber'}) {
        my $_base_variable = "{" . "fonenumber" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'fonenumber'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2013', $response);
    return $_response_object;
}

#
# get_fonenumber_0
#
# Get FoneNumber
# 
# @param string $fonenumber FoneNumber associated with the account (required)
{
    my $params = {
    'fonenumber' => {
        data_type => 'string',
        description => 'FoneNumber associated with the account',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_fonenumber_0' } = { 
    	summary => 'Get FoneNumber',
        params => $params,
        returns => 'InlineResponse2013',
        };
}
# @return InlineResponse2013
#
sub get_fonenumber_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'fonenumber' is set
    unless (exists $args{'fonenumber'}) {
      croak("Missing the required parameter 'fonenumber' when calling get_fonenumber_0");
    }

    # parse inputs
    my $_resource_path = '/fonenumbers/{fonenumber}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'fonenumber'}) {
        my $_base_variable = "{" . "fonenumber" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'fonenumber'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2013', $response);
    return $_response_object;
}

#
# get_fonenumbers
#
# Get FoneNumbers
# 
# @param string $filter Filter the response attributes. Allowed values are &#x60;fonenumbers&#x60; or &#x60;all&#x60;. See **Notes** for additional information. (optional)
{
    my $params = {
    'filter' => {
        data_type => 'string',
        description => 'Filter the response attributes. Allowed values are &#x60;fonenumbers&#x60; or &#x60;all&#x60;. See **Notes** for additional information.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_fonenumbers' } = { 
    	summary => 'Get FoneNumbers',
        params => $params,
        returns => 'InlineResponse200',
        };
}
# @return InlineResponse200
#
sub get_fonenumbers {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/fonenumbers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # query params
    if ( exists $args{'filter'}) {
        $query_params->{'filter'} = $self->{api_client}->to_query_value($args{'filter'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse200', $response);
    return $_response_object;
}

#
# get_fonenumbers_0
#
# Get FoneNumbers
# 
# @param string $filter Filter the response attributes. Allowed values are &#x60;fonenumbers&#x60; or &#x60;all&#x60;. See **Notes** for additional information. (optional)
{
    my $params = {
    'filter' => {
        data_type => 'string',
        description => 'Filter the response attributes. Allowed values are &#x60;fonenumbers&#x60; or &#x60;all&#x60;. See **Notes** for additional information.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_fonenumbers_0' } = { 
    	summary => 'Get FoneNumbers',
        params => $params,
        returns => 'InlineResponse200',
        };
}
# @return InlineResponse200
#
sub get_fonenumbers_0 {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/fonenumbers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # query params
    if ( exists $args{'filter'}) {
        $query_params->{'filter'} = $self->{api_client}->to_query_value($args{'filter'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse200', $response);
    return $_response_object;
}

#
# update_fonenumber
#
# Update FoneNumber
# 
# @param string $fonenumber FoneNumber associated with the account (required)
# @param string $type Message routing type. Allowed values are &#x60;None&#x60;, &#x60;Device&#x60;, &#x60;Email&#x60;, &#x60;URL&#x60;, or &#x60;Forward&#x60;. (required)
# @param string $value Message routing type value (required)
# @param string $url_method URL method. Allowed values are &#x60;GET&#x60;, &#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information. (required)
# @param string $url_username Username for HTTP **Basic** authentication scheme (optional)
# @param string $url_password Password for HTTP **Basic** authentication scheme (optional)
{
    my $params = {
    'fonenumber' => {
        data_type => 'string',
        description => 'FoneNumber associated with the account',
        required => '1',
    },
    'type' => {
        data_type => 'string',
        description => 'Message routing type. Allowed values are &#x60;None&#x60;, &#x60;Device&#x60;, &#x60;Email&#x60;, &#x60;URL&#x60;, or &#x60;Forward&#x60;.',
        required => '1',
    },
    'value' => {
        data_type => 'string',
        description => 'Message routing type value',
        required => '1',
    },
    'url_method' => {
        data_type => 'string',
        description => 'URL method. Allowed values are &#x60;GET&#x60;, &#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.',
        required => '1',
    },
    'url_username' => {
        data_type => 'string',
        description => 'Username for HTTP **Basic** authentication scheme',
        required => '0',
    },
    'url_password' => {
        data_type => 'string',
        description => 'Password for HTTP **Basic** authentication scheme',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_fonenumber' } = { 
    	summary => 'Update FoneNumber',
        params => $params,
        returns => 'InlineResponse2013',
        };
}
# @return InlineResponse2013
#
sub update_fonenumber {
    my ($self, %args) = @_;

    # verify the required parameter 'fonenumber' is set
    unless (exists $args{'fonenumber'}) {
      croak("Missing the required parameter 'fonenumber' when calling update_fonenumber");
    }

    # verify the required parameter 'type' is set
    unless (exists $args{'type'}) {
      croak("Missing the required parameter 'type' when calling update_fonenumber");
    }

    # verify the required parameter 'value' is set
    unless (exists $args{'value'}) {
      croak("Missing the required parameter 'value' when calling update_fonenumber");
    }

    # verify the required parameter 'url_method' is set
    unless (exists $args{'url_method'}) {
      croak("Missing the required parameter 'url_method' when calling update_fonenumber");
    }

    # parse inputs
    my $_resource_path = '/fonenumbers/{fonenumber}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'fonenumber'}) {
        my $_base_variable = "{" . "fonenumber" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'fonenumber'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'type'} ) {
                $form_params->{'type'} = $self->{api_client}->to_form_value($args{'type'});
    }
    
    # form params
    if ( exists $args{'value'} ) {
                $form_params->{'value'} = $self->{api_client}->to_form_value($args{'value'});
    }
    
    # form params
    if ( exists $args{'url_method'} ) {
                $form_params->{'url_method'} = $self->{api_client}->to_form_value($args{'url_method'});
    }
    
    # form params
    if ( exists $args{'url_username'} ) {
                $form_params->{'url_username'} = $self->{api_client}->to_form_value($args{'url_username'});
    }
    
    # form params
    if ( exists $args{'url_password'} ) {
                $form_params->{'url_password'} = $self->{api_client}->to_form_value($args{'url_password'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2013', $response);
    return $_response_object;
}

#
# update_fonenumber_0
#
# Update FoneNumber
# 
# @param string $fonenumber FoneNumber associated with the account (required)
# @param string $type Message routing type. Allowed values are &#x60;None&#x60;, &#x60;Device&#x60;, &#x60;Email&#x60;, &#x60;URL&#x60;, or &#x60;Forward&#x60;. (required)
# @param string $value Message routing type value (required)
# @param string $url_method URL method. Allowed values are &#x60;GET&#x60;, &#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information. (required)
# @param string $url_username Username for HTTP **Basic** authentication scheme (optional)
# @param string $url_password Password for HTTP **Basic** authentication scheme (optional)
{
    my $params = {
    'fonenumber' => {
        data_type => 'string',
        description => 'FoneNumber associated with the account',
        required => '1',
    },
    'type' => {
        data_type => 'string',
        description => 'Message routing type. Allowed values are &#x60;None&#x60;, &#x60;Device&#x60;, &#x60;Email&#x60;, &#x60;URL&#x60;, or &#x60;Forward&#x60;.',
        required => '1',
    },
    'value' => {
        data_type => 'string',
        description => 'Message routing type value',
        required => '1',
    },
    'url_method' => {
        data_type => 'string',
        description => 'URL method. Allowed values are &#x60;GET&#x60;, &#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.',
        required => '1',
    },
    'url_username' => {
        data_type => 'string',
        description => 'Username for HTTP **Basic** authentication scheme',
        required => '0',
    },
    'url_password' => {
        data_type => 'string',
        description => 'Password for HTTP **Basic** authentication scheme',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_fonenumber_0' } = { 
    	summary => 'Update FoneNumber',
        params => $params,
        returns => 'InlineResponse2013',
        };
}
# @return InlineResponse2013
#
sub update_fonenumber_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'fonenumber' is set
    unless (exists $args{'fonenumber'}) {
      croak("Missing the required parameter 'fonenumber' when calling update_fonenumber_0");
    }

    # verify the required parameter 'type' is set
    unless (exists $args{'type'}) {
      croak("Missing the required parameter 'type' when calling update_fonenumber_0");
    }

    # verify the required parameter 'value' is set
    unless (exists $args{'value'}) {
      croak("Missing the required parameter 'value' when calling update_fonenumber_0");
    }

    # verify the required parameter 'url_method' is set
    unless (exists $args{'url_method'}) {
      croak("Missing the required parameter 'url_method' when calling update_fonenumber_0");
    }

    # parse inputs
    my $_resource_path = '/fonenumbers/{fonenumber}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'fonenumber'}) {
        my $_base_variable = "{" . "fonenumber" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'fonenumber'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'type'} ) {
                $form_params->{'type'} = $self->{api_client}->to_form_value($args{'type'});
    }
    
    # form params
    if ( exists $args{'value'} ) {
                $form_params->{'value'} = $self->{api_client}->to_form_value($args{'value'});
    }
    
    # form params
    if ( exists $args{'url_method'} ) {
                $form_params->{'url_method'} = $self->{api_client}->to_form_value($args{'url_method'});
    }
    
    # form params
    if ( exists $args{'url_username'} ) {
                $form_params->{'url_username'} = $self->{api_client}->to_form_value($args{'url_username'});
    }
    
    # form params
    if ( exists $args{'url_password'} ) {
                $form_params->{'url_password'} = $self->{api_client}->to_form_value($args{'url_password'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2013', $response);
    return $_response_object;
}

1;
