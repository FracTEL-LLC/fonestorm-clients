=begin comment

FoneStorm API 2.4.0 (Thunder)

FracTEL's Middleware API

OpenAPI spec version: 2.4.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::EventsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# create_event
#
# Create Event
# 
# @param string $id Event id (required)
# @param string $organizer_contact_id Event organizer contact id (required)
# @param DateTime $start_time Event start time (required)
# @param DateTime $end_time Event end time (required)
# @param string $title Event title (required)
# @param ARRAY[string] $attendees Event attendee contact ids (required)
# @param string $description Event description (optional)
# @param string $location Event location (optional)
# @param string $status Event status (optional)
# @param Number $reschedule_count Event reschedule count (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Event id',
        required => '1',
    },
    'organizer_contact_id' => {
        data_type => 'string',
        description => 'Event organizer contact id',
        required => '1',
    },
    'start_time' => {
        data_type => 'DateTime',
        description => 'Event start time',
        required => '1',
    },
    'end_time' => {
        data_type => 'DateTime',
        description => 'Event end time',
        required => '1',
    },
    'title' => {
        data_type => 'string',
        description => 'Event title',
        required => '1',
    },
    'attendees' => {
        data_type => 'ARRAY[string]',
        description => 'Event attendee contact ids',
        required => '1',
    },
    'description' => {
        data_type => 'string',
        description => 'Event description',
        required => '0',
    },
    'location' => {
        data_type => 'string',
        description => 'Event location',
        required => '0',
    },
    'status' => {
        data_type => 'string',
        description => 'Event status',
        required => '0',
    },
    'reschedule_count' => {
        data_type => 'Number',
        description => 'Event reschedule count',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_event' } = { 
    	summary => 'Create Event',
        params => $params,
        returns => 'InlineResponse2012',
        };
}
# @return InlineResponse2012
#
sub create_event {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling create_event");
    }

    # verify the required parameter 'organizer_contact_id' is set
    unless (exists $args{'organizer_contact_id'}) {
      croak("Missing the required parameter 'organizer_contact_id' when calling create_event");
    }

    # verify the required parameter 'start_time' is set
    unless (exists $args{'start_time'}) {
      croak("Missing the required parameter 'start_time' when calling create_event");
    }

    # verify the required parameter 'end_time' is set
    unless (exists $args{'end_time'}) {
      croak("Missing the required parameter 'end_time' when calling create_event");
    }

    # verify the required parameter 'title' is set
    unless (exists $args{'title'}) {
      croak("Missing the required parameter 'title' when calling create_event");
    }

    # verify the required parameter 'attendees' is set
    unless (exists $args{'attendees'}) {
      croak("Missing the required parameter 'attendees' when calling create_event");
    }

    # parse inputs
    my $_resource_path = '/events';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # form params
    if ( exists $args{'id'} ) {
                $form_params->{'id'} = $self->{api_client}->to_form_value($args{'id'});
    }
    
    # form params
    if ( exists $args{'organizer_contact_id'} ) {
                $form_params->{'organizer_contact_id'} = $self->{api_client}->to_form_value($args{'organizer_contact_id'});
    }
    
    # form params
    if ( exists $args{'start_time'} ) {
                $form_params->{'start_time'} = $self->{api_client}->to_form_value($args{'start_time'});
    }
    
    # form params
    if ( exists $args{'end_time'} ) {
                $form_params->{'end_time'} = $self->{api_client}->to_form_value($args{'end_time'});
    }
    
    # form params
    if ( exists $args{'title'} ) {
                $form_params->{'title'} = $self->{api_client}->to_form_value($args{'title'});
    }
    
    # form params
    if ( exists $args{'description'} ) {
                $form_params->{'description'} = $self->{api_client}->to_form_value($args{'description'});
    }
    
    # form params
    if ( exists $args{'location'} ) {
                $form_params->{'location'} = $self->{api_client}->to_form_value($args{'location'});
    }
    
    # form params
    if ( exists $args{'attendees'} ) {
                $form_params->{'attendees'} = $self->{api_client}->to_form_value($args{'attendees'});
    }
    
    # form params
    if ( exists $args{'status'} ) {
                $form_params->{'status'} = $self->{api_client}->to_form_value($args{'status'});
    }
    
    # form params
    if ( exists $args{'reschedule_count'} ) {
                $form_params->{'reschedule_count'} = $self->{api_client}->to_form_value($args{'reschedule_count'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2012', $response);
    return $_response_object;
}

#
# create_event_0
#
# Create Event
# 
# @param string $id Event id (required)
# @param string $organizer_contact_id Event organizer contact id (required)
# @param DateTime $start_time Event start time (required)
# @param DateTime $end_time Event end time (required)
# @param string $title Event title (required)
# @param ARRAY[string] $attendees Event attendee contact ids (required)
# @param string $description Event description (optional)
# @param string $location Event location (optional)
# @param string $status Event status (optional)
# @param Number $reschedule_count Event reschedule count (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Event id',
        required => '1',
    },
    'organizer_contact_id' => {
        data_type => 'string',
        description => 'Event organizer contact id',
        required => '1',
    },
    'start_time' => {
        data_type => 'DateTime',
        description => 'Event start time',
        required => '1',
    },
    'end_time' => {
        data_type => 'DateTime',
        description => 'Event end time',
        required => '1',
    },
    'title' => {
        data_type => 'string',
        description => 'Event title',
        required => '1',
    },
    'attendees' => {
        data_type => 'ARRAY[string]',
        description => 'Event attendee contact ids',
        required => '1',
    },
    'description' => {
        data_type => 'string',
        description => 'Event description',
        required => '0',
    },
    'location' => {
        data_type => 'string',
        description => 'Event location',
        required => '0',
    },
    'status' => {
        data_type => 'string',
        description => 'Event status',
        required => '0',
    },
    'reschedule_count' => {
        data_type => 'Number',
        description => 'Event reschedule count',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_event_0' } = { 
    	summary => 'Create Event',
        params => $params,
        returns => 'InlineResponse2012',
        };
}
# @return InlineResponse2012
#
sub create_event_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling create_event_0");
    }

    # verify the required parameter 'organizer_contact_id' is set
    unless (exists $args{'organizer_contact_id'}) {
      croak("Missing the required parameter 'organizer_contact_id' when calling create_event_0");
    }

    # verify the required parameter 'start_time' is set
    unless (exists $args{'start_time'}) {
      croak("Missing the required parameter 'start_time' when calling create_event_0");
    }

    # verify the required parameter 'end_time' is set
    unless (exists $args{'end_time'}) {
      croak("Missing the required parameter 'end_time' when calling create_event_0");
    }

    # verify the required parameter 'title' is set
    unless (exists $args{'title'}) {
      croak("Missing the required parameter 'title' when calling create_event_0");
    }

    # verify the required parameter 'attendees' is set
    unless (exists $args{'attendees'}) {
      croak("Missing the required parameter 'attendees' when calling create_event_0");
    }

    # parse inputs
    my $_resource_path = '/events';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # form params
    if ( exists $args{'id'} ) {
                $form_params->{'id'} = $self->{api_client}->to_form_value($args{'id'});
    }
    
    # form params
    if ( exists $args{'organizer_contact_id'} ) {
                $form_params->{'organizer_contact_id'} = $self->{api_client}->to_form_value($args{'organizer_contact_id'});
    }
    
    # form params
    if ( exists $args{'start_time'} ) {
                $form_params->{'start_time'} = $self->{api_client}->to_form_value($args{'start_time'});
    }
    
    # form params
    if ( exists $args{'end_time'} ) {
                $form_params->{'end_time'} = $self->{api_client}->to_form_value($args{'end_time'});
    }
    
    # form params
    if ( exists $args{'title'} ) {
                $form_params->{'title'} = $self->{api_client}->to_form_value($args{'title'});
    }
    
    # form params
    if ( exists $args{'description'} ) {
                $form_params->{'description'} = $self->{api_client}->to_form_value($args{'description'});
    }
    
    # form params
    if ( exists $args{'location'} ) {
                $form_params->{'location'} = $self->{api_client}->to_form_value($args{'location'});
    }
    
    # form params
    if ( exists $args{'attendees'} ) {
                $form_params->{'attendees'} = $self->{api_client}->to_form_value($args{'attendees'});
    }
    
    # form params
    if ( exists $args{'status'} ) {
                $form_params->{'status'} = $self->{api_client}->to_form_value($args{'status'});
    }
    
    # form params
    if ( exists $args{'reschedule_count'} ) {
                $form_params->{'reschedule_count'} = $self->{api_client}->to_form_value($args{'reschedule_count'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2012', $response);
    return $_response_object;
}

#
# delete_event
#
# Delete Event
# 
# @param string $id Event id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Event id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_event' } = { 
    	summary => 'Delete Event',
        params => $params,
        returns => 'InlineResponse2012',
        };
}
# @return InlineResponse2012
#
sub delete_event {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_event");
    }

    # parse inputs
    my $_resource_path = '/events/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2012', $response);
    return $_response_object;
}

#
# delete_event_0
#
# Delete Event
# 
# @param string $id Event id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Event id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_event_0' } = { 
    	summary => 'Delete Event',
        params => $params,
        returns => 'InlineResponse2012',
        };
}
# @return InlineResponse2012
#
sub delete_event_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_event_0");
    }

    # parse inputs
    my $_resource_path = '/events/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2012', $response);
    return $_response_object;
}

#
# get_event
#
# Get Event
# 
# @param string $id Event id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Event id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_event' } = { 
    	summary => 'Get Event',
        params => $params,
        returns => 'InlineResponse2012',
        };
}
# @return InlineResponse2012
#
sub get_event {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_event");
    }

    # parse inputs
    my $_resource_path = '/events/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2012', $response);
    return $_response_object;
}

#
# get_event_0
#
# Get Event
# 
# @param string $id Event id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Event id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_event_0' } = { 
    	summary => 'Get Event',
        params => $params,
        returns => 'InlineResponse2012',
        };
}
# @return InlineResponse2012
#
sub get_event_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_event_0");
    }

    # parse inputs
    my $_resource_path = '/events/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2012', $response);
    return $_response_object;
}

#
# get_events
#
# Get Events
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_events' } = { 
    	summary => 'Get Events',
        params => $params,
        returns => 'InlineResponse2001',
        };
}
# @return InlineResponse2001
#
sub get_events {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/events';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2001', $response);
    return $_response_object;
}

#
# get_events_0
#
# Get Events
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_events_0' } = { 
    	summary => 'Get Events',
        params => $params,
        returns => 'InlineResponse2001',
        };
}
# @return InlineResponse2001
#
sub get_events_0 {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/events';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2001', $response);
    return $_response_object;
}

#
# update_event
#
# Update Event
# 
# @param string $id Event id (required)
# @param string $organizer_contact_id Event organizer contact id (optional)
# @param DateTime $start_time Event start time (optional)
# @param DateTime $end_time Event end time (optional)
# @param string $title Event title (optional)
# @param string $description Event description (optional)
# @param string $location Event location (optional)
# @param ARRAY[string] $attendees Event attendee contact ids (optional)
# @param string $status Event status (optional)
# @param Number $reschedule_count Event reschedule count (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Event id',
        required => '1',
    },
    'organizer_contact_id' => {
        data_type => 'string',
        description => 'Event organizer contact id',
        required => '0',
    },
    'start_time' => {
        data_type => 'DateTime',
        description => 'Event start time',
        required => '0',
    },
    'end_time' => {
        data_type => 'DateTime',
        description => 'Event end time',
        required => '0',
    },
    'title' => {
        data_type => 'string',
        description => 'Event title',
        required => '0',
    },
    'description' => {
        data_type => 'string',
        description => 'Event description',
        required => '0',
    },
    'location' => {
        data_type => 'string',
        description => 'Event location',
        required => '0',
    },
    'attendees' => {
        data_type => 'ARRAY[string]',
        description => 'Event attendee contact ids',
        required => '0',
    },
    'status' => {
        data_type => 'string',
        description => 'Event status',
        required => '0',
    },
    'reschedule_count' => {
        data_type => 'Number',
        description => 'Event reschedule count',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_event' } = { 
    	summary => 'Update Event',
        params => $params,
        returns => 'InlineResponse2012',
        };
}
# @return InlineResponse2012
#
sub update_event {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_event");
    }

    # parse inputs
    my $_resource_path = '/events/{id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'organizer_contact_id'} ) {
                $form_params->{'organizer_contact_id'} = $self->{api_client}->to_form_value($args{'organizer_contact_id'});
    }
    
    # form params
    if ( exists $args{'start_time'} ) {
                $form_params->{'start_time'} = $self->{api_client}->to_form_value($args{'start_time'});
    }
    
    # form params
    if ( exists $args{'end_time'} ) {
                $form_params->{'end_time'} = $self->{api_client}->to_form_value($args{'end_time'});
    }
    
    # form params
    if ( exists $args{'title'} ) {
                $form_params->{'title'} = $self->{api_client}->to_form_value($args{'title'});
    }
    
    # form params
    if ( exists $args{'description'} ) {
                $form_params->{'description'} = $self->{api_client}->to_form_value($args{'description'});
    }
    
    # form params
    if ( exists $args{'location'} ) {
                $form_params->{'location'} = $self->{api_client}->to_form_value($args{'location'});
    }
    
    # form params
    if ( exists $args{'attendees'} ) {
                $form_params->{'attendees'} = $self->{api_client}->to_form_value($args{'attendees'});
    }
    
    # form params
    if ( exists $args{'status'} ) {
                $form_params->{'status'} = $self->{api_client}->to_form_value($args{'status'});
    }
    
    # form params
    if ( exists $args{'reschedule_count'} ) {
                $form_params->{'reschedule_count'} = $self->{api_client}->to_form_value($args{'reschedule_count'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2012', $response);
    return $_response_object;
}

#
# update_event_0
#
# Update Event
# 
# @param string $id Event id (required)
# @param string $organizer_contact_id Event organizer contact id (optional)
# @param DateTime $start_time Event start time (optional)
# @param DateTime $end_time Event end time (optional)
# @param string $title Event title (optional)
# @param string $description Event description (optional)
# @param string $location Event location (optional)
# @param ARRAY[string] $attendees Event attendee contact ids (optional)
# @param string $status Event status (optional)
# @param Number $reschedule_count Event reschedule count (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Event id',
        required => '1',
    },
    'organizer_contact_id' => {
        data_type => 'string',
        description => 'Event organizer contact id',
        required => '0',
    },
    'start_time' => {
        data_type => 'DateTime',
        description => 'Event start time',
        required => '0',
    },
    'end_time' => {
        data_type => 'DateTime',
        description => 'Event end time',
        required => '0',
    },
    'title' => {
        data_type => 'string',
        description => 'Event title',
        required => '0',
    },
    'description' => {
        data_type => 'string',
        description => 'Event description',
        required => '0',
    },
    'location' => {
        data_type => 'string',
        description => 'Event location',
        required => '0',
    },
    'attendees' => {
        data_type => 'ARRAY[string]',
        description => 'Event attendee contact ids',
        required => '0',
    },
    'status' => {
        data_type => 'string',
        description => 'Event status',
        required => '0',
    },
    'reschedule_count' => {
        data_type => 'Number',
        description => 'Event reschedule count',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_event_0' } = { 
    	summary => 'Update Event',
        params => $params,
        returns => 'InlineResponse2012',
        };
}
# @return InlineResponse2012
#
sub update_event_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_event_0");
    }

    # parse inputs
    my $_resource_path = '/events/{id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'organizer_contact_id'} ) {
                $form_params->{'organizer_contact_id'} = $self->{api_client}->to_form_value($args{'organizer_contact_id'});
    }
    
    # form params
    if ( exists $args{'start_time'} ) {
                $form_params->{'start_time'} = $self->{api_client}->to_form_value($args{'start_time'});
    }
    
    # form params
    if ( exists $args{'end_time'} ) {
                $form_params->{'end_time'} = $self->{api_client}->to_form_value($args{'end_time'});
    }
    
    # form params
    if ( exists $args{'title'} ) {
                $form_params->{'title'} = $self->{api_client}->to_form_value($args{'title'});
    }
    
    # form params
    if ( exists $args{'description'} ) {
                $form_params->{'description'} = $self->{api_client}->to_form_value($args{'description'});
    }
    
    # form params
    if ( exists $args{'location'} ) {
                $form_params->{'location'} = $self->{api_client}->to_form_value($args{'location'});
    }
    
    # form params
    if ( exists $args{'attendees'} ) {
                $form_params->{'attendees'} = $self->{api_client}->to_form_value($args{'attendees'});
    }
    
    # form params
    if ( exists $args{'status'} ) {
                $form_params->{'status'} = $self->{api_client}->to_form_value($args{'status'});
    }
    
    # form params
    if ( exists $args{'reschedule_count'} ) {
                $form_params->{'reschedule_count'} = $self->{api_client}->to_form_value($args{'reschedule_count'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2012', $response);
    return $_response_object;
}

1;
