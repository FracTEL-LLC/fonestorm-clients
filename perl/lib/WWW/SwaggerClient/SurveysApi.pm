=begin comment

FoneStorm API 2.4.0 (Thunder)

FracTEL's Middleware API

OpenAPI spec version: 2.4.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::SurveysApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# create_survey
#
# Create Survey
# 
# @param string $title Survey title (required)
# @param ARRAY[string] $contacts Survey contact ids (required)
{
    my $params = {
    'title' => {
        data_type => 'string',
        description => 'Survey title',
        required => '1',
    },
    'contacts' => {
        data_type => 'ARRAY[string]',
        description => 'Survey contact ids',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_survey' } = { 
    	summary => 'Create Survey',
        params => $params,
        returns => 'InlineResponse2016',
        };
}
# @return InlineResponse2016
#
sub create_survey {
    my ($self, %args) = @_;

    # verify the required parameter 'title' is set
    unless (exists $args{'title'}) {
      croak("Missing the required parameter 'title' when calling create_survey");
    }

    # verify the required parameter 'contacts' is set
    unless (exists $args{'contacts'}) {
      croak("Missing the required parameter 'contacts' when calling create_survey");
    }

    # parse inputs
    my $_resource_path = '/surveys';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # form params
    if ( exists $args{'title'} ) {
                $form_params->{'title'} = $self->{api_client}->to_form_value($args{'title'});
    }
    
    # form params
    if ( exists $args{'contacts'} ) {
                $form_params->{'contacts'} = $self->{api_client}->to_form_value($args{'contacts'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2016', $response);
    return $_response_object;
}

#
# create_survey_0
#
# Create Survey
# 
# @param string $title Survey title (required)
# @param ARRAY[string] $contacts Survey contact ids (required)
{
    my $params = {
    'title' => {
        data_type => 'string',
        description => 'Survey title',
        required => '1',
    },
    'contacts' => {
        data_type => 'ARRAY[string]',
        description => 'Survey contact ids',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_survey_0' } = { 
    	summary => 'Create Survey',
        params => $params,
        returns => 'InlineResponse2016',
        };
}
# @return InlineResponse2016
#
sub create_survey_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'title' is set
    unless (exists $args{'title'}) {
      croak("Missing the required parameter 'title' when calling create_survey_0");
    }

    # verify the required parameter 'contacts' is set
    unless (exists $args{'contacts'}) {
      croak("Missing the required parameter 'contacts' when calling create_survey_0");
    }

    # parse inputs
    my $_resource_path = '/surveys';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # form params
    if ( exists $args{'title'} ) {
                $form_params->{'title'} = $self->{api_client}->to_form_value($args{'title'});
    }
    
    # form params
    if ( exists $args{'contacts'} ) {
                $form_params->{'contacts'} = $self->{api_client}->to_form_value($args{'contacts'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2016', $response);
    return $_response_object;
}

#
# create_survey_question
#
# Create Survey Question
# 
# @param string $id Survey id (required)
# @param string $question Question prompt (required)
# @param string $attribute_name Attribute name used to identify this information (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Survey id',
        required => '1',
    },
    'question' => {
        data_type => 'string',
        description => 'Question prompt',
        required => '1',
    },
    'attribute_name' => {
        data_type => 'string',
        description => 'Attribute name used to identify this information',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_survey_question' } = { 
    	summary => 'Create Survey Question',
        params => $params,
        returns => 'InlineResponse20115',
        };
}
# @return InlineResponse20115
#
sub create_survey_question {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling create_survey_question");
    }

    # verify the required parameter 'question' is set
    unless (exists $args{'question'}) {
      croak("Missing the required parameter 'question' when calling create_survey_question");
    }

    # parse inputs
    my $_resource_path = '/surveys/{id}/questions';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'question'} ) {
                $form_params->{'question'} = $self->{api_client}->to_form_value($args{'question'});
    }
    
    # form params
    if ( exists $args{'attribute_name'} ) {
                $form_params->{'attribute_name'} = $self->{api_client}->to_form_value($args{'attribute_name'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20115', $response);
    return $_response_object;
}

#
# create_survey_question_0
#
# Create Survey Question
# 
# @param string $id Survey id (required)
# @param string $question Question prompt (required)
# @param string $attribute_name Attribute name used to identify this information (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Survey id',
        required => '1',
    },
    'question' => {
        data_type => 'string',
        description => 'Question prompt',
        required => '1',
    },
    'attribute_name' => {
        data_type => 'string',
        description => 'Attribute name used to identify this information',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_survey_question_0' } = { 
    	summary => 'Create Survey Question',
        params => $params,
        returns => 'InlineResponse20115',
        };
}
# @return InlineResponse20115
#
sub create_survey_question_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling create_survey_question_0");
    }

    # verify the required parameter 'question' is set
    unless (exists $args{'question'}) {
      croak("Missing the required parameter 'question' when calling create_survey_question_0");
    }

    # parse inputs
    my $_resource_path = '/surveys/{id}/questions';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'question'} ) {
                $form_params->{'question'} = $self->{api_client}->to_form_value($args{'question'});
    }
    
    # form params
    if ( exists $args{'attribute_name'} ) {
                $form_params->{'attribute_name'} = $self->{api_client}->to_form_value($args{'attribute_name'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20115', $response);
    return $_response_object;
}

#
# create_survey_question_choice
#
# Create Survey Question Choice
# 
# @param string $id Survey id (required)
# @param string $qid Question id (required)
# @param string $type Input field label (required)
# @param string $label Input field label (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Survey id',
        required => '1',
    },
    'qid' => {
        data_type => 'string',
        description => 'Question id',
        required => '1',
    },
    'type' => {
        data_type => 'string',
        description => 'Input field label',
        required => '1',
    },
    'label' => {
        data_type => 'string',
        description => 'Input field label',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_survey_question_choice' } = { 
    	summary => 'Create Survey Question Choice',
        params => $params,
        returns => 'InlineResponse20117',
        };
}
# @return InlineResponse20117
#
sub create_survey_question_choice {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling create_survey_question_choice");
    }

    # verify the required parameter 'qid' is set
    unless (exists $args{'qid'}) {
      croak("Missing the required parameter 'qid' when calling create_survey_question_choice");
    }

    # verify the required parameter 'type' is set
    unless (exists $args{'type'}) {
      croak("Missing the required parameter 'type' when calling create_survey_question_choice");
    }

    # parse inputs
    my $_resource_path = '/surveys/{id}/questions/{qid}/choices';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'qid'}) {
        my $_base_variable = "{" . "qid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'qid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'type'} ) {
                $form_params->{'type'} = $self->{api_client}->to_form_value($args{'type'});
    }
    
    # form params
    if ( exists $args{'label'} ) {
                $form_params->{'label'} = $self->{api_client}->to_form_value($args{'label'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20117', $response);
    return $_response_object;
}

#
# create_survey_question_choice_0
#
# Create Survey Question Choice
# 
# @param string $id Survey id (required)
# @param string $qid Question id (required)
# @param string $type Input field label (required)
# @param string $label Input field label (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Survey id',
        required => '1',
    },
    'qid' => {
        data_type => 'string',
        description => 'Question id',
        required => '1',
    },
    'type' => {
        data_type => 'string',
        description => 'Input field label',
        required => '1',
    },
    'label' => {
        data_type => 'string',
        description => 'Input field label',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_survey_question_choice_0' } = { 
    	summary => 'Create Survey Question Choice',
        params => $params,
        returns => 'InlineResponse20117',
        };
}
# @return InlineResponse20117
#
sub create_survey_question_choice_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling create_survey_question_choice_0");
    }

    # verify the required parameter 'qid' is set
    unless (exists $args{'qid'}) {
      croak("Missing the required parameter 'qid' when calling create_survey_question_choice_0");
    }

    # verify the required parameter 'type' is set
    unless (exists $args{'type'}) {
      croak("Missing the required parameter 'type' when calling create_survey_question_choice_0");
    }

    # parse inputs
    my $_resource_path = '/surveys/{id}/questions/{qid}/choices';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'qid'}) {
        my $_base_variable = "{" . "qid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'qid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'type'} ) {
                $form_params->{'type'} = $self->{api_client}->to_form_value($args{'type'});
    }
    
    # form params
    if ( exists $args{'label'} ) {
                $form_params->{'label'} = $self->{api_client}->to_form_value($args{'label'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20117', $response);
    return $_response_object;
}

#
# create_survey_response
#
# Create Survey Response
# 
# @param string $id Survey id (required)
# @param string $question_id Question id (required)
# @param string $choice_id Choice id (required)
# @param string $contact_id Contact id (required)
# @param string $answer Answer for contact survey question choice (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Survey id',
        required => '1',
    },
    'question_id' => {
        data_type => 'string',
        description => 'Question id',
        required => '1',
    },
    'choice_id' => {
        data_type => 'string',
        description => 'Choice id',
        required => '1',
    },
    'contact_id' => {
        data_type => 'string',
        description => 'Contact id',
        required => '1',
    },
    'answer' => {
        data_type => 'string',
        description => 'Answer for contact survey question choice',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_survey_response' } = { 
    	summary => 'Create Survey Response',
        params => $params,
        returns => 'InlineResponse20116',
        };
}
# @return InlineResponse20116
#
sub create_survey_response {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling create_survey_response");
    }

    # verify the required parameter 'question_id' is set
    unless (exists $args{'question_id'}) {
      croak("Missing the required parameter 'question_id' when calling create_survey_response");
    }

    # verify the required parameter 'choice_id' is set
    unless (exists $args{'choice_id'}) {
      croak("Missing the required parameter 'choice_id' when calling create_survey_response");
    }

    # verify the required parameter 'contact_id' is set
    unless (exists $args{'contact_id'}) {
      croak("Missing the required parameter 'contact_id' when calling create_survey_response");
    }

    # verify the required parameter 'answer' is set
    unless (exists $args{'answer'}) {
      croak("Missing the required parameter 'answer' when calling create_survey_response");
    }

    # parse inputs
    my $_resource_path = '/surveys/{id}/responses';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'question_id'} ) {
                $form_params->{'question_id'} = $self->{api_client}->to_form_value($args{'question_id'});
    }
    
    # form params
    if ( exists $args{'choice_id'} ) {
                $form_params->{'choice_id'} = $self->{api_client}->to_form_value($args{'choice_id'});
    }
    
    # form params
    if ( exists $args{'contact_id'} ) {
                $form_params->{'contact_id'} = $self->{api_client}->to_form_value($args{'contact_id'});
    }
    
    # form params
    if ( exists $args{'answer'} ) {
                $form_params->{'answer'} = $self->{api_client}->to_form_value($args{'answer'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20116', $response);
    return $_response_object;
}

#
# create_survey_response_0
#
# Create Survey Response
# 
# @param string $id Survey id (required)
# @param string $question_id Question id (required)
# @param string $choice_id Choice id (required)
# @param string $contact_id Contact id (required)
# @param string $answer Answer for contact survey question choice (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Survey id',
        required => '1',
    },
    'question_id' => {
        data_type => 'string',
        description => 'Question id',
        required => '1',
    },
    'choice_id' => {
        data_type => 'string',
        description => 'Choice id',
        required => '1',
    },
    'contact_id' => {
        data_type => 'string',
        description => 'Contact id',
        required => '1',
    },
    'answer' => {
        data_type => 'string',
        description => 'Answer for contact survey question choice',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_survey_response_0' } = { 
    	summary => 'Create Survey Response',
        params => $params,
        returns => 'InlineResponse20116',
        };
}
# @return InlineResponse20116
#
sub create_survey_response_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling create_survey_response_0");
    }

    # verify the required parameter 'question_id' is set
    unless (exists $args{'question_id'}) {
      croak("Missing the required parameter 'question_id' when calling create_survey_response_0");
    }

    # verify the required parameter 'choice_id' is set
    unless (exists $args{'choice_id'}) {
      croak("Missing the required parameter 'choice_id' when calling create_survey_response_0");
    }

    # verify the required parameter 'contact_id' is set
    unless (exists $args{'contact_id'}) {
      croak("Missing the required parameter 'contact_id' when calling create_survey_response_0");
    }

    # verify the required parameter 'answer' is set
    unless (exists $args{'answer'}) {
      croak("Missing the required parameter 'answer' when calling create_survey_response_0");
    }

    # parse inputs
    my $_resource_path = '/surveys/{id}/responses';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'question_id'} ) {
                $form_params->{'question_id'} = $self->{api_client}->to_form_value($args{'question_id'});
    }
    
    # form params
    if ( exists $args{'choice_id'} ) {
                $form_params->{'choice_id'} = $self->{api_client}->to_form_value($args{'choice_id'});
    }
    
    # form params
    if ( exists $args{'contact_id'} ) {
                $form_params->{'contact_id'} = $self->{api_client}->to_form_value($args{'contact_id'});
    }
    
    # form params
    if ( exists $args{'answer'} ) {
                $form_params->{'answer'} = $self->{api_client}->to_form_value($args{'answer'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20116', $response);
    return $_response_object;
}

#
# delete_survey
#
# Delete Survey
# 
# @param string $id Survey id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Survey id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_survey' } = { 
    	summary => 'Delete Survey',
        params => $params,
        returns => 'InlineResponse2016',
        };
}
# @return InlineResponse2016
#
sub delete_survey {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_survey");
    }

    # parse inputs
    my $_resource_path = '/surveys/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2016', $response);
    return $_response_object;
}

#
# delete_survey_0
#
# Delete Survey
# 
# @param string $id Survey id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Survey id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_survey_0' } = { 
    	summary => 'Delete Survey',
        params => $params,
        returns => 'InlineResponse2016',
        };
}
# @return InlineResponse2016
#
sub delete_survey_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_survey_0");
    }

    # parse inputs
    my $_resource_path = '/surveys/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2016', $response);
    return $_response_object;
}

#
# delete_survey_question
#
# Delete Survey Question
# 
# @param string $id Survey id (required)
# @param string $qid Question id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Survey id',
        required => '1',
    },
    'qid' => {
        data_type => 'string',
        description => 'Question id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_survey_question' } = { 
    	summary => 'Delete Survey Question',
        params => $params,
        returns => 'InlineResponse20115',
        };
}
# @return InlineResponse20115
#
sub delete_survey_question {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_survey_question");
    }

    # verify the required parameter 'qid' is set
    unless (exists $args{'qid'}) {
      croak("Missing the required parameter 'qid' when calling delete_survey_question");
    }

    # parse inputs
    my $_resource_path = '/surveys/{id}/questions/{qid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'qid'}) {
        my $_base_variable = "{" . "qid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'qid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20115', $response);
    return $_response_object;
}

#
# delete_survey_question_0
#
# Delete Survey Question
# 
# @param string $id Survey id (required)
# @param string $qid Question id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Survey id',
        required => '1',
    },
    'qid' => {
        data_type => 'string',
        description => 'Question id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_survey_question_0' } = { 
    	summary => 'Delete Survey Question',
        params => $params,
        returns => 'InlineResponse20115',
        };
}
# @return InlineResponse20115
#
sub delete_survey_question_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_survey_question_0");
    }

    # verify the required parameter 'qid' is set
    unless (exists $args{'qid'}) {
      croak("Missing the required parameter 'qid' when calling delete_survey_question_0");
    }

    # parse inputs
    my $_resource_path = '/surveys/{id}/questions/{qid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'qid'}) {
        my $_base_variable = "{" . "qid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'qid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20115', $response);
    return $_response_object;
}

#
# delete_survey_question_choice
#
# Delete Survey Question Choice
# 
# @param string $id Survey id (required)
# @param string $qid Question id (required)
# @param string $cid Choice id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Survey id',
        required => '1',
    },
    'qid' => {
        data_type => 'string',
        description => 'Question id',
        required => '1',
    },
    'cid' => {
        data_type => 'string',
        description => 'Choice id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_survey_question_choice' } = { 
    	summary => 'Delete Survey Question Choice',
        params => $params,
        returns => 'InlineResponse20117',
        };
}
# @return InlineResponse20117
#
sub delete_survey_question_choice {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_survey_question_choice");
    }

    # verify the required parameter 'qid' is set
    unless (exists $args{'qid'}) {
      croak("Missing the required parameter 'qid' when calling delete_survey_question_choice");
    }

    # verify the required parameter 'cid' is set
    unless (exists $args{'cid'}) {
      croak("Missing the required parameter 'cid' when calling delete_survey_question_choice");
    }

    # parse inputs
    my $_resource_path = '/surveys/{id}/questions/{qid}/choices/{cid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'qid'}) {
        my $_base_variable = "{" . "qid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'qid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'cid'}) {
        my $_base_variable = "{" . "cid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'cid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20117', $response);
    return $_response_object;
}

#
# delete_survey_question_choice_0
#
# Delete Survey Question Choice
# 
# @param string $id Survey id (required)
# @param string $qid Question id (required)
# @param string $cid Choice id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Survey id',
        required => '1',
    },
    'qid' => {
        data_type => 'string',
        description => 'Question id',
        required => '1',
    },
    'cid' => {
        data_type => 'string',
        description => 'Choice id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_survey_question_choice_0' } = { 
    	summary => 'Delete Survey Question Choice',
        params => $params,
        returns => 'InlineResponse20117',
        };
}
# @return InlineResponse20117
#
sub delete_survey_question_choice_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_survey_question_choice_0");
    }

    # verify the required parameter 'qid' is set
    unless (exists $args{'qid'}) {
      croak("Missing the required parameter 'qid' when calling delete_survey_question_choice_0");
    }

    # verify the required parameter 'cid' is set
    unless (exists $args{'cid'}) {
      croak("Missing the required parameter 'cid' when calling delete_survey_question_choice_0");
    }

    # parse inputs
    my $_resource_path = '/surveys/{id}/questions/{qid}/choices/{cid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'qid'}) {
        my $_base_variable = "{" . "qid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'qid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'cid'}) {
        my $_base_variable = "{" . "cid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'cid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20117', $response);
    return $_response_object;
}

#
# get_survey
#
# Get Survey
# 
# @param string $id Survey id (required)
# @param boolean $associations Include all data associations (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Survey id',
        required => '1',
    },
    'associations' => {
        data_type => 'boolean',
        description => 'Include all data associations',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_survey' } = { 
    	summary => 'Get Survey',
        params => $params,
        returns => 'InlineResponse2016',
        };
}
# @return InlineResponse2016
#
sub get_survey {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_survey");
    }

    # parse inputs
    my $_resource_path = '/surveys/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded', 'application/offset+octet-stream', 'multipart/form-data');

    # query params
    if ( exists $args{'associations'}) {
        $query_params->{'associations'} = $self->{api_client}->to_query_value($args{'associations'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2016', $response);
    return $_response_object;
}

#
# get_survey_0
#
# Get Survey
# 
# @param string $id Survey id (required)
# @param boolean $associations Include all data associations (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Survey id',
        required => '1',
    },
    'associations' => {
        data_type => 'boolean',
        description => 'Include all data associations',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_survey_0' } = { 
    	summary => 'Get Survey',
        params => $params,
        returns => 'InlineResponse2016',
        };
}
# @return InlineResponse2016
#
sub get_survey_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_survey_0");
    }

    # parse inputs
    my $_resource_path = '/surveys/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded', 'application/offset+octet-stream', 'multipart/form-data');

    # query params
    if ( exists $args{'associations'}) {
        $query_params->{'associations'} = $self->{api_client}->to_query_value($args{'associations'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2016', $response);
    return $_response_object;
}

#
# get_survey_contacts
#
# Get Survey Contacts
# 
# @param string $id Survey id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Survey id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_survey_contacts' } = { 
    	summary => 'Get Survey Contacts',
        params => $params,
        returns => 'InlineResponse2004',
        };
}
# @return InlineResponse2004
#
sub get_survey_contacts {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_survey_contacts");
    }

    # parse inputs
    my $_resource_path = '/surveys/{id}/contacts';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2004', $response);
    return $_response_object;
}

#
# get_survey_contacts_0
#
# Get Survey Contacts
# 
# @param string $id Survey id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Survey id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_survey_contacts_0' } = { 
    	summary => 'Get Survey Contacts',
        params => $params,
        returns => 'InlineResponse2004',
        };
}
# @return InlineResponse2004
#
sub get_survey_contacts_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_survey_contacts_0");
    }

    # parse inputs
    my $_resource_path = '/surveys/{id}/contacts';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2004', $response);
    return $_response_object;
}

#
# get_survey_question_choices
#
# Get Survey Question Choices
# 
# @param string $id Survey id (required)
# @param string $qid Question id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Survey id',
        required => '1',
    },
    'qid' => {
        data_type => 'string',
        description => 'Question id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_survey_question_choices' } = { 
    	summary => 'Get Survey Question Choices',
        params => $params,
        returns => 'InlineResponse20016',
        };
}
# @return InlineResponse20016
#
sub get_survey_question_choices {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_survey_question_choices");
    }

    # verify the required parameter 'qid' is set
    unless (exists $args{'qid'}) {
      croak("Missing the required parameter 'qid' when calling get_survey_question_choices");
    }

    # parse inputs
    my $_resource_path = '/surveys/{id}/questions/{qid}/choices';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'qid'}) {
        my $_base_variable = "{" . "qid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'qid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20016', $response);
    return $_response_object;
}

#
# get_survey_question_choices_0
#
# Get Survey Question Choices
# 
# @param string $id Survey id (required)
# @param string $qid Question id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Survey id',
        required => '1',
    },
    'qid' => {
        data_type => 'string',
        description => 'Question id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_survey_question_choices_0' } = { 
    	summary => 'Get Survey Question Choices',
        params => $params,
        returns => 'InlineResponse20016',
        };
}
# @return InlineResponse20016
#
sub get_survey_question_choices_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_survey_question_choices_0");
    }

    # verify the required parameter 'qid' is set
    unless (exists $args{'qid'}) {
      croak("Missing the required parameter 'qid' when calling get_survey_question_choices_0");
    }

    # parse inputs
    my $_resource_path = '/surveys/{id}/questions/{qid}/choices';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'qid'}) {
        my $_base_variable = "{" . "qid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'qid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20016', $response);
    return $_response_object;
}

#
# get_survey_questions
#
# Get Survey Questions
# 
# @param string $id Survey id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Survey id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_survey_questions' } = { 
    	summary => 'Get Survey Questions',
        params => $params,
        returns => 'InlineResponse20013',
        };
}
# @return InlineResponse20013
#
sub get_survey_questions {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_survey_questions");
    }

    # parse inputs
    my $_resource_path = '/surveys/{id}/questions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20013', $response);
    return $_response_object;
}

#
# get_survey_questions_0
#
# Get Survey Questions
# 
# @param string $id Survey id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Survey id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_survey_questions_0' } = { 
    	summary => 'Get Survey Questions',
        params => $params,
        returns => 'InlineResponse20013',
        };
}
# @return InlineResponse20013
#
sub get_survey_questions_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_survey_questions_0");
    }

    # parse inputs
    my $_resource_path = '/surveys/{id}/questions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20013', $response);
    return $_response_object;
}

#
# get_survey_responses
#
# Get Survey Responses
# 
# @param string $id Survey id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Survey id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_survey_responses' } = { 
    	summary => 'Get Survey Responses',
        params => $params,
        returns => 'InlineResponse20014',
        };
}
# @return InlineResponse20014
#
sub get_survey_responses {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_survey_responses");
    }

    # parse inputs
    my $_resource_path = '/surveys/{id}/responses';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20014', $response);
    return $_response_object;
}

#
# get_survey_responses_0
#
# Get Survey Responses
# 
# @param string $id Survey id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Survey id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_survey_responses_0' } = { 
    	summary => 'Get Survey Responses',
        params => $params,
        returns => 'InlineResponse20014',
        };
}
# @return InlineResponse20014
#
sub get_survey_responses_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_survey_responses_0");
    }

    # parse inputs
    my $_resource_path = '/surveys/{id}/responses';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20014', $response);
    return $_response_object;
}

#
# get_surveys
#
# Get Surveys
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_surveys' } = { 
    	summary => 'Get Surveys',
        params => $params,
        returns => 'InlineResponse2003',
        };
}
# @return InlineResponse2003
#
sub get_surveys {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/surveys';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2003', $response);
    return $_response_object;
}

#
# get_surveys_0
#
# Get Surveys
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_surveys_0' } = { 
    	summary => 'Get Surveys',
        params => $params,
        returns => 'InlineResponse2003',
        };
}
# @return InlineResponse2003
#
sub get_surveys_0 {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/surveys';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2003', $response);
    return $_response_object;
}

#
# update_survey
#
# Update Survey
# 
# @param string $id Survey id (required)
# @param string $title Survey title (optional)
# @param ARRAY[string] $contacts Survey contact ids (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Survey id',
        required => '1',
    },
    'title' => {
        data_type => 'string',
        description => 'Survey title',
        required => '0',
    },
    'contacts' => {
        data_type => 'ARRAY[string]',
        description => 'Survey contact ids',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_survey' } = { 
    	summary => 'Update Survey',
        params => $params,
        returns => 'InlineResponse2016',
        };
}
# @return InlineResponse2016
#
sub update_survey {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_survey");
    }

    # parse inputs
    my $_resource_path = '/surveys/{id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'title'} ) {
                $form_params->{'title'} = $self->{api_client}->to_form_value($args{'title'});
    }
    
    # form params
    if ( exists $args{'contacts'} ) {
                $form_params->{'contacts'} = $self->{api_client}->to_form_value($args{'contacts'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2016', $response);
    return $_response_object;
}

#
# update_survey_0
#
# Update Survey
# 
# @param string $id Survey id (required)
# @param string $title Survey title (optional)
# @param ARRAY[string] $contacts Survey contact ids (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Survey id',
        required => '1',
    },
    'title' => {
        data_type => 'string',
        description => 'Survey title',
        required => '0',
    },
    'contacts' => {
        data_type => 'ARRAY[string]',
        description => 'Survey contact ids',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_survey_0' } = { 
    	summary => 'Update Survey',
        params => $params,
        returns => 'InlineResponse2016',
        };
}
# @return InlineResponse2016
#
sub update_survey_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_survey_0");
    }

    # parse inputs
    my $_resource_path = '/surveys/{id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'title'} ) {
                $form_params->{'title'} = $self->{api_client}->to_form_value($args{'title'});
    }
    
    # form params
    if ( exists $args{'contacts'} ) {
                $form_params->{'contacts'} = $self->{api_client}->to_form_value($args{'contacts'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2016', $response);
    return $_response_object;
}

#
# update_survey_question
#
# Update Survey Question
# 
# @param string $id Survey id (required)
# @param string $qid Question id (required)
# @param string $question Question prompt (optional)
# @param string $attribute_name Attribute name used to identify this information (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Survey id',
        required => '1',
    },
    'qid' => {
        data_type => 'string',
        description => 'Question id',
        required => '1',
    },
    'question' => {
        data_type => 'string',
        description => 'Question prompt',
        required => '0',
    },
    'attribute_name' => {
        data_type => 'string',
        description => 'Attribute name used to identify this information',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_survey_question' } = { 
    	summary => 'Update Survey Question',
        params => $params,
        returns => 'InlineResponse20115',
        };
}
# @return InlineResponse20115
#
sub update_survey_question {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_survey_question");
    }

    # verify the required parameter 'qid' is set
    unless (exists $args{'qid'}) {
      croak("Missing the required parameter 'qid' when calling update_survey_question");
    }

    # parse inputs
    my $_resource_path = '/surveys/{id}/questions/{qid}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'qid'}) {
        my $_base_variable = "{" . "qid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'qid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'question'} ) {
                $form_params->{'question'} = $self->{api_client}->to_form_value($args{'question'});
    }
    
    # form params
    if ( exists $args{'attribute_name'} ) {
                $form_params->{'attribute_name'} = $self->{api_client}->to_form_value($args{'attribute_name'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20115', $response);
    return $_response_object;
}

#
# update_survey_question_0
#
# Update Survey Question
# 
# @param string $id Survey id (required)
# @param string $qid Question id (required)
# @param string $question Question prompt (optional)
# @param string $attribute_name Attribute name used to identify this information (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Survey id',
        required => '1',
    },
    'qid' => {
        data_type => 'string',
        description => 'Question id',
        required => '1',
    },
    'question' => {
        data_type => 'string',
        description => 'Question prompt',
        required => '0',
    },
    'attribute_name' => {
        data_type => 'string',
        description => 'Attribute name used to identify this information',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_survey_question_0' } = { 
    	summary => 'Update Survey Question',
        params => $params,
        returns => 'InlineResponse20115',
        };
}
# @return InlineResponse20115
#
sub update_survey_question_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_survey_question_0");
    }

    # verify the required parameter 'qid' is set
    unless (exists $args{'qid'}) {
      croak("Missing the required parameter 'qid' when calling update_survey_question_0");
    }

    # parse inputs
    my $_resource_path = '/surveys/{id}/questions/{qid}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'qid'}) {
        my $_base_variable = "{" . "qid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'qid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'question'} ) {
                $form_params->{'question'} = $self->{api_client}->to_form_value($args{'question'});
    }
    
    # form params
    if ( exists $args{'attribute_name'} ) {
                $form_params->{'attribute_name'} = $self->{api_client}->to_form_value($args{'attribute_name'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20115', $response);
    return $_response_object;
}

#
# update_survey_question_choice
#
# Update Survey Question Choice
# 
# @param string $id Survey id (required)
# @param string $qid Question id (required)
# @param string $cid Choice id (required)
# @param string $type Input field label (optional)
# @param string $label Input field label (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Survey id',
        required => '1',
    },
    'qid' => {
        data_type => 'string',
        description => 'Question id',
        required => '1',
    },
    'cid' => {
        data_type => 'string',
        description => 'Choice id',
        required => '1',
    },
    'type' => {
        data_type => 'string',
        description => 'Input field label',
        required => '0',
    },
    'label' => {
        data_type => 'string',
        description => 'Input field label',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_survey_question_choice' } = { 
    	summary => 'Update Survey Question Choice',
        params => $params,
        returns => 'InlineResponse20117',
        };
}
# @return InlineResponse20117
#
sub update_survey_question_choice {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_survey_question_choice");
    }

    # verify the required parameter 'qid' is set
    unless (exists $args{'qid'}) {
      croak("Missing the required parameter 'qid' when calling update_survey_question_choice");
    }

    # verify the required parameter 'cid' is set
    unless (exists $args{'cid'}) {
      croak("Missing the required parameter 'cid' when calling update_survey_question_choice");
    }

    # parse inputs
    my $_resource_path = '/surveys/{id}/questions/{qid}/choices/{cid}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'qid'}) {
        my $_base_variable = "{" . "qid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'qid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'cid'}) {
        my $_base_variable = "{" . "cid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'cid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'type'} ) {
                $form_params->{'type'} = $self->{api_client}->to_form_value($args{'type'});
    }
    
    # form params
    if ( exists $args{'label'} ) {
                $form_params->{'label'} = $self->{api_client}->to_form_value($args{'label'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20117', $response);
    return $_response_object;
}

#
# update_survey_question_choice_0
#
# Update Survey Question Choice
# 
# @param string $id Survey id (required)
# @param string $qid Question id (required)
# @param string $cid Choice id (required)
# @param string $type Input field label (optional)
# @param string $label Input field label (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Survey id',
        required => '1',
    },
    'qid' => {
        data_type => 'string',
        description => 'Question id',
        required => '1',
    },
    'cid' => {
        data_type => 'string',
        description => 'Choice id',
        required => '1',
    },
    'type' => {
        data_type => 'string',
        description => 'Input field label',
        required => '0',
    },
    'label' => {
        data_type => 'string',
        description => 'Input field label',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_survey_question_choice_0' } = { 
    	summary => 'Update Survey Question Choice',
        params => $params,
        returns => 'InlineResponse20117',
        };
}
# @return InlineResponse20117
#
sub update_survey_question_choice_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_survey_question_choice_0");
    }

    # verify the required parameter 'qid' is set
    unless (exists $args{'qid'}) {
      croak("Missing the required parameter 'qid' when calling update_survey_question_choice_0");
    }

    # verify the required parameter 'cid' is set
    unless (exists $args{'cid'}) {
      croak("Missing the required parameter 'cid' when calling update_survey_question_choice_0");
    }

    # parse inputs
    my $_resource_path = '/surveys/{id}/questions/{qid}/choices/{cid}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'qid'}) {
        my $_base_variable = "{" . "qid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'qid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'cid'}) {
        my $_base_variable = "{" . "cid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'cid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'type'} ) {
                $form_params->{'type'} = $self->{api_client}->to_form_value($args{'type'});
    }
    
    # form params
    if ( exists $args{'label'} ) {
                $form_params->{'label'} = $self->{api_client}->to_form_value($args{'label'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20117', $response);
    return $_response_object;
}

1;
