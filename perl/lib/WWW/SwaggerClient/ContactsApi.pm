=begin comment

FoneStorm API 2.4.0 (Thunder)

FracTEL's Middleware API

OpenAPI spec version: 2.4.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::ContactsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# create_contact
#
# Create Contact
# 
# @param string $email Contact email address (optional)
# @param string $first_name Contact first name (optional)
# @param string $last_name Contact last name (optional)
# @param boolean $opt_in_call Contact opt-in for calls (optional)
# @param boolean $opt_in_email Contact opt-in for emails (optional)
# @param boolean $opt_in_fax Contact opt-in for faxes (optional)
# @param boolean $opt_in_message Contact opt-in for messages (optional)
# @param string $phone Contact phone number (optional)
{
    my $params = {
    'email' => {
        data_type => 'string',
        description => 'Contact email address',
        required => '0',
    },
    'first_name' => {
        data_type => 'string',
        description => 'Contact first name',
        required => '0',
    },
    'last_name' => {
        data_type => 'string',
        description => 'Contact last name',
        required => '0',
    },
    'opt_in_call' => {
        data_type => 'boolean',
        description => 'Contact opt-in for calls',
        required => '0',
    },
    'opt_in_email' => {
        data_type => 'boolean',
        description => 'Contact opt-in for emails',
        required => '0',
    },
    'opt_in_fax' => {
        data_type => 'boolean',
        description => 'Contact opt-in for faxes',
        required => '0',
    },
    'opt_in_message' => {
        data_type => 'boolean',
        description => 'Contact opt-in for messages',
        required => '0',
    },
    'phone' => {
        data_type => 'string',
        description => 'Contact phone number',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_contact' } = { 
    	summary => 'Create Contact',
        params => $params,
        returns => 'InlineResponse2017',
        };
}
# @return InlineResponse2017
#
sub create_contact {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/contacts';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # form params
    if ( exists $args{'email'} ) {
                $form_params->{'email'} = $self->{api_client}->to_form_value($args{'email'});
    }
    
    # form params
    if ( exists $args{'first_name'} ) {
                $form_params->{'first_name'} = $self->{api_client}->to_form_value($args{'first_name'});
    }
    
    # form params
    if ( exists $args{'last_name'} ) {
                $form_params->{'last_name'} = $self->{api_client}->to_form_value($args{'last_name'});
    }
    
    # form params
    if ( exists $args{'opt_in_call'} ) {
                $form_params->{'opt_in_call'} = $self->{api_client}->to_form_value($args{'opt_in_call'});
    }
    
    # form params
    if ( exists $args{'opt_in_email'} ) {
                $form_params->{'opt_in_email'} = $self->{api_client}->to_form_value($args{'opt_in_email'});
    }
    
    # form params
    if ( exists $args{'opt_in_fax'} ) {
                $form_params->{'opt_in_fax'} = $self->{api_client}->to_form_value($args{'opt_in_fax'});
    }
    
    # form params
    if ( exists $args{'opt_in_message'} ) {
                $form_params->{'opt_in_message'} = $self->{api_client}->to_form_value($args{'opt_in_message'});
    }
    
    # form params
    if ( exists $args{'phone'} ) {
                $form_params->{'phone'} = $self->{api_client}->to_form_value($args{'phone'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2017', $response);
    return $_response_object;
}

#
# create_contact_0
#
# Create Contact
# 
# @param string $email Contact email address (optional)
# @param string $first_name Contact first name (optional)
# @param string $last_name Contact last name (optional)
# @param boolean $opt_in_call Contact opt-in for calls (optional)
# @param boolean $opt_in_email Contact opt-in for emails (optional)
# @param boolean $opt_in_fax Contact opt-in for faxes (optional)
# @param boolean $opt_in_message Contact opt-in for messages (optional)
# @param string $phone Contact phone number (optional)
{
    my $params = {
    'email' => {
        data_type => 'string',
        description => 'Contact email address',
        required => '0',
    },
    'first_name' => {
        data_type => 'string',
        description => 'Contact first name',
        required => '0',
    },
    'last_name' => {
        data_type => 'string',
        description => 'Contact last name',
        required => '0',
    },
    'opt_in_call' => {
        data_type => 'boolean',
        description => 'Contact opt-in for calls',
        required => '0',
    },
    'opt_in_email' => {
        data_type => 'boolean',
        description => 'Contact opt-in for emails',
        required => '0',
    },
    'opt_in_fax' => {
        data_type => 'boolean',
        description => 'Contact opt-in for faxes',
        required => '0',
    },
    'opt_in_message' => {
        data_type => 'boolean',
        description => 'Contact opt-in for messages',
        required => '0',
    },
    'phone' => {
        data_type => 'string',
        description => 'Contact phone number',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_contact_0' } = { 
    	summary => 'Create Contact',
        params => $params,
        returns => 'InlineResponse2017',
        };
}
# @return InlineResponse2017
#
sub create_contact_0 {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/contacts';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # form params
    if ( exists $args{'email'} ) {
                $form_params->{'email'} = $self->{api_client}->to_form_value($args{'email'});
    }
    
    # form params
    if ( exists $args{'first_name'} ) {
                $form_params->{'first_name'} = $self->{api_client}->to_form_value($args{'first_name'});
    }
    
    # form params
    if ( exists $args{'last_name'} ) {
                $form_params->{'last_name'} = $self->{api_client}->to_form_value($args{'last_name'});
    }
    
    # form params
    if ( exists $args{'opt_in_call'} ) {
                $form_params->{'opt_in_call'} = $self->{api_client}->to_form_value($args{'opt_in_call'});
    }
    
    # form params
    if ( exists $args{'opt_in_email'} ) {
                $form_params->{'opt_in_email'} = $self->{api_client}->to_form_value($args{'opt_in_email'});
    }
    
    # form params
    if ( exists $args{'opt_in_fax'} ) {
                $form_params->{'opt_in_fax'} = $self->{api_client}->to_form_value($args{'opt_in_fax'});
    }
    
    # form params
    if ( exists $args{'opt_in_message'} ) {
                $form_params->{'opt_in_message'} = $self->{api_client}->to_form_value($args{'opt_in_message'});
    }
    
    # form params
    if ( exists $args{'phone'} ) {
                $form_params->{'phone'} = $self->{api_client}->to_form_value($args{'phone'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2017', $response);
    return $_response_object;
}

#
# delete_contact
#
# Delete Contact
# 
# @param string $id Contact id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Contact id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_contact' } = { 
    	summary => 'Delete Contact',
        params => $params,
        returns => 'InlineResponse2017',
        };
}
# @return InlineResponse2017
#
sub delete_contact {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_contact");
    }

    # parse inputs
    my $_resource_path = '/contacts/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2017', $response);
    return $_response_object;
}

#
# delete_contact_0
#
# Delete Contact
# 
# @param string $id Contact id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Contact id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_contact_0' } = { 
    	summary => 'Delete Contact',
        params => $params,
        returns => 'InlineResponse2017',
        };
}
# @return InlineResponse2017
#
sub delete_contact_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_contact_0");
    }

    # parse inputs
    my $_resource_path = '/contacts/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2017', $response);
    return $_response_object;
}

#
# get_contact
#
# Get Contact
# 
# @param string $id Contact id (required)
# @param boolean $attributes Include all attributes (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Contact id',
        required => '1',
    },
    'attributes' => {
        data_type => 'boolean',
        description => 'Include all attributes',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_contact' } = { 
    	summary => 'Get Contact',
        params => $params,
        returns => 'InlineResponse2004',
        };
}
# @return InlineResponse2004
#
sub get_contact {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_contact");
    }

    # parse inputs
    my $_resource_path = '/contacts/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded', 'application/offset+octet-stream', 'multipart/form-data');

    # query params
    if ( exists $args{'attributes'}) {
        $query_params->{'attributes'} = $self->{api_client}->to_query_value($args{'attributes'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2004', $response);
    return $_response_object;
}

#
# get_contact_0
#
# Get Contact
# 
# @param string $id Contact id (required)
# @param boolean $attributes Include all attributes (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Contact id',
        required => '1',
    },
    'attributes' => {
        data_type => 'boolean',
        description => 'Include all attributes',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_contact_0' } = { 
    	summary => 'Get Contact',
        params => $params,
        returns => 'InlineResponse2004',
        };
}
# @return InlineResponse2004
#
sub get_contact_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_contact_0");
    }

    # parse inputs
    my $_resource_path = '/contacts/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded', 'application/offset+octet-stream', 'multipart/form-data');

    # query params
    if ( exists $args{'attributes'}) {
        $query_params->{'attributes'} = $self->{api_client}->to_query_value($args{'attributes'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2004', $response);
    return $_response_object;
}

#
# get_contact_events
#
# Get Contact Events
# 
# @param string $id Contact id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Contact id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_contact_events' } = { 
    	summary => 'Get Contact Events',
        params => $params,
        returns => 'InlineResponse2001',
        };
}
# @return InlineResponse2001
#
sub get_contact_events {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_contact_events");
    }

    # parse inputs
    my $_resource_path = '/contacts/{id}/events';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2001', $response);
    return $_response_object;
}

#
# get_contact_events_0
#
# Get Contact Events
# 
# @param string $id Contact id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Contact id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_contact_events_0' } = { 
    	summary => 'Get Contact Events',
        params => $params,
        returns => 'InlineResponse2001',
        };
}
# @return InlineResponse2001
#
sub get_contact_events_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_contact_events_0");
    }

    # parse inputs
    my $_resource_path = '/contacts/{id}/events';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2001', $response);
    return $_response_object;
}

#
# get_contact_surveys
#
# Get Contact Surveys
# 
# @param string $id Contact id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Contact id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_contact_surveys' } = { 
    	summary => 'Get Contact Surveys',
        params => $params,
        returns => 'InlineResponse2003',
        };
}
# @return InlineResponse2003
#
sub get_contact_surveys {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_contact_surveys");
    }

    # parse inputs
    my $_resource_path = '/contacts/{id}/surveys';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2003', $response);
    return $_response_object;
}

#
# get_contact_surveys_0
#
# Get Contact Surveys
# 
# @param string $id Contact id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Contact id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_contact_surveys_0' } = { 
    	summary => 'Get Contact Surveys',
        params => $params,
        returns => 'InlineResponse2003',
        };
}
# @return InlineResponse2003
#
sub get_contact_surveys_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_contact_surveys_0");
    }

    # parse inputs
    my $_resource_path = '/contacts/{id}/surveys';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2003', $response);
    return $_response_object;
}

#
# get_contacts
#
# Get Contacts
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_contacts' } = { 
    	summary => 'Get Contacts',
        params => $params,
        returns => 'InlineResponse2004',
        };
}
# @return InlineResponse2004
#
sub get_contacts {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/contacts';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2004', $response);
    return $_response_object;
}

#
# get_contacts_0
#
# Get Contacts
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_contacts_0' } = { 
    	summary => 'Get Contacts',
        params => $params,
        returns => 'InlineResponse2004',
        };
}
# @return InlineResponse2004
#
sub get_contacts_0 {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/contacts';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2004', $response);
    return $_response_object;
}

#
# update_contact
#
# Update Contact
# 
# @param string $id Contact id (required)
# @param string $email Contact email address (optional)
# @param string $first_name Contact first name (optional)
# @param string $last_name Contact last name (optional)
# @param boolean $opt_in_call Contact opt-in for calls (optional)
# @param boolean $opt_in_email Contact opt-in for emails (optional)
# @param boolean $opt_in_fax Contact opt-in for faxes (optional)
# @param boolean $opt_in_message Contact opt-in for messages (optional)
# @param string $phone Contact phone number (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Contact id',
        required => '1',
    },
    'email' => {
        data_type => 'string',
        description => 'Contact email address',
        required => '0',
    },
    'first_name' => {
        data_type => 'string',
        description => 'Contact first name',
        required => '0',
    },
    'last_name' => {
        data_type => 'string',
        description => 'Contact last name',
        required => '0',
    },
    'opt_in_call' => {
        data_type => 'boolean',
        description => 'Contact opt-in for calls',
        required => '0',
    },
    'opt_in_email' => {
        data_type => 'boolean',
        description => 'Contact opt-in for emails',
        required => '0',
    },
    'opt_in_fax' => {
        data_type => 'boolean',
        description => 'Contact opt-in for faxes',
        required => '0',
    },
    'opt_in_message' => {
        data_type => 'boolean',
        description => 'Contact opt-in for messages',
        required => '0',
    },
    'phone' => {
        data_type => 'string',
        description => 'Contact phone number',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_contact' } = { 
    	summary => 'Update Contact',
        params => $params,
        returns => 'InlineResponse2017',
        };
}
# @return InlineResponse2017
#
sub update_contact {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_contact");
    }

    # parse inputs
    my $_resource_path = '/contacts/{id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'email'} ) {
                $form_params->{'email'} = $self->{api_client}->to_form_value($args{'email'});
    }
    
    # form params
    if ( exists $args{'first_name'} ) {
                $form_params->{'first_name'} = $self->{api_client}->to_form_value($args{'first_name'});
    }
    
    # form params
    if ( exists $args{'last_name'} ) {
                $form_params->{'last_name'} = $self->{api_client}->to_form_value($args{'last_name'});
    }
    
    # form params
    if ( exists $args{'opt_in_call'} ) {
                $form_params->{'opt_in_call'} = $self->{api_client}->to_form_value($args{'opt_in_call'});
    }
    
    # form params
    if ( exists $args{'opt_in_email'} ) {
                $form_params->{'opt_in_email'} = $self->{api_client}->to_form_value($args{'opt_in_email'});
    }
    
    # form params
    if ( exists $args{'opt_in_fax'} ) {
                $form_params->{'opt_in_fax'} = $self->{api_client}->to_form_value($args{'opt_in_fax'});
    }
    
    # form params
    if ( exists $args{'opt_in_message'} ) {
                $form_params->{'opt_in_message'} = $self->{api_client}->to_form_value($args{'opt_in_message'});
    }
    
    # form params
    if ( exists $args{'phone'} ) {
                $form_params->{'phone'} = $self->{api_client}->to_form_value($args{'phone'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2017', $response);
    return $_response_object;
}

#
# update_contact_0
#
# Update Contact
# 
# @param string $id Contact id (required)
# @param string $email Contact email address (optional)
# @param string $first_name Contact first name (optional)
# @param string $last_name Contact last name (optional)
# @param boolean $opt_in_call Contact opt-in for calls (optional)
# @param boolean $opt_in_email Contact opt-in for emails (optional)
# @param boolean $opt_in_fax Contact opt-in for faxes (optional)
# @param boolean $opt_in_message Contact opt-in for messages (optional)
# @param string $phone Contact phone number (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Contact id',
        required => '1',
    },
    'email' => {
        data_type => 'string',
        description => 'Contact email address',
        required => '0',
    },
    'first_name' => {
        data_type => 'string',
        description => 'Contact first name',
        required => '0',
    },
    'last_name' => {
        data_type => 'string',
        description => 'Contact last name',
        required => '0',
    },
    'opt_in_call' => {
        data_type => 'boolean',
        description => 'Contact opt-in for calls',
        required => '0',
    },
    'opt_in_email' => {
        data_type => 'boolean',
        description => 'Contact opt-in for emails',
        required => '0',
    },
    'opt_in_fax' => {
        data_type => 'boolean',
        description => 'Contact opt-in for faxes',
        required => '0',
    },
    'opt_in_message' => {
        data_type => 'boolean',
        description => 'Contact opt-in for messages',
        required => '0',
    },
    'phone' => {
        data_type => 'string',
        description => 'Contact phone number',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_contact_0' } = { 
    	summary => 'Update Contact',
        params => $params,
        returns => 'InlineResponse2017',
        };
}
# @return InlineResponse2017
#
sub update_contact_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_contact_0");
    }

    # parse inputs
    my $_resource_path = '/contacts/{id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'email'} ) {
                $form_params->{'email'} = $self->{api_client}->to_form_value($args{'email'});
    }
    
    # form params
    if ( exists $args{'first_name'} ) {
                $form_params->{'first_name'} = $self->{api_client}->to_form_value($args{'first_name'});
    }
    
    # form params
    if ( exists $args{'last_name'} ) {
                $form_params->{'last_name'} = $self->{api_client}->to_form_value($args{'last_name'});
    }
    
    # form params
    if ( exists $args{'opt_in_call'} ) {
                $form_params->{'opt_in_call'} = $self->{api_client}->to_form_value($args{'opt_in_call'});
    }
    
    # form params
    if ( exists $args{'opt_in_email'} ) {
                $form_params->{'opt_in_email'} = $self->{api_client}->to_form_value($args{'opt_in_email'});
    }
    
    # form params
    if ( exists $args{'opt_in_fax'} ) {
                $form_params->{'opt_in_fax'} = $self->{api_client}->to_form_value($args{'opt_in_fax'});
    }
    
    # form params
    if ( exists $args{'opt_in_message'} ) {
                $form_params->{'opt_in_message'} = $self->{api_client}->to_form_value($args{'opt_in_message'});
    }
    
    # form params
    if ( exists $args{'phone'} ) {
                $form_params->{'phone'} = $self->{api_client}->to_form_value($args{'phone'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2017', $response);
    return $_response_object;
}

1;
