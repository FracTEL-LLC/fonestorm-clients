=begin comment

FoneStorm API 2.4.0 (Thunder)

FracTEL's Middleware API

OpenAPI spec version: 2.4.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::AccountsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# configure_account_cdr_notify
#
# Set CDR Callback
# 
# @param string $account_id FoneStorm account id (required)
# @param string $method Callback URL method (required)
# @param string $url Callback URL. See **Notes** for additional information. (required)
# @param string $username Callback URL username (optional)
# @param string $password Callback URL password (optional)
{
    my $params = {
    'account_id' => {
        data_type => 'string',
        description => 'FoneStorm account id',
        required => '1',
    },
    'method' => {
        data_type => 'string',
        description => 'Callback URL method',
        required => '1',
    },
    'url' => {
        data_type => 'string',
        description => 'Callback URL. See **Notes** for additional information.',
        required => '1',
    },
    'username' => {
        data_type => 'string',
        description => 'Callback URL username',
        required => '0',
    },
    'password' => {
        data_type => 'string',
        description => 'Callback URL password',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'configure_account_cdr_notify' } = { 
    	summary => 'Set CDR Callback',
        params => $params,
        returns => 'InlineResponse20011',
        };
}
# @return InlineResponse20011
#
sub configure_account_cdr_notify {
    my ($self, %args) = @_;

    # verify the required parameter 'account_id' is set
    unless (exists $args{'account_id'}) {
      croak("Missing the required parameter 'account_id' when calling configure_account_cdr_notify");
    }

    # verify the required parameter 'method' is set
    unless (exists $args{'method'}) {
      croak("Missing the required parameter 'method' when calling configure_account_cdr_notify");
    }

    # verify the required parameter 'url' is set
    unless (exists $args{'url'}) {
      croak("Missing the required parameter 'url' when calling configure_account_cdr_notify");
    }

    # parse inputs
    my $_resource_path = '/accounts/cdr_notify';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # form params
    if ( exists $args{'account_id'} ) {
                $form_params->{'account_id'} = $self->{api_client}->to_form_value($args{'account_id'});
    }
    
    # form params
    if ( exists $args{'method'} ) {
                $form_params->{'method'} = $self->{api_client}->to_form_value($args{'method'});
    }
    
    # form params
    if ( exists $args{'url'} ) {
                $form_params->{'url'} = $self->{api_client}->to_form_value($args{'url'});
    }
    
    # form params
    if ( exists $args{'username'} ) {
                $form_params->{'username'} = $self->{api_client}->to_form_value($args{'username'});
    }
    
    # form params
    if ( exists $args{'password'} ) {
                $form_params->{'password'} = $self->{api_client}->to_form_value($args{'password'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20011', $response);
    return $_response_object;
}

#
# configure_account_cdr_notify_0
#
# Set CDR Callback
# 
# @param string $account_id FoneStorm account id (required)
# @param string $method Callback URL method (required)
# @param string $url Callback URL. See **Notes** for additional information. (required)
# @param string $username Callback URL username (optional)
# @param string $password Callback URL password (optional)
{
    my $params = {
    'account_id' => {
        data_type => 'string',
        description => 'FoneStorm account id',
        required => '1',
    },
    'method' => {
        data_type => 'string',
        description => 'Callback URL method',
        required => '1',
    },
    'url' => {
        data_type => 'string',
        description => 'Callback URL. See **Notes** for additional information.',
        required => '1',
    },
    'username' => {
        data_type => 'string',
        description => 'Callback URL username',
        required => '0',
    },
    'password' => {
        data_type => 'string',
        description => 'Callback URL password',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'configure_account_cdr_notify_0' } = { 
    	summary => 'Set CDR Callback',
        params => $params,
        returns => 'InlineResponse20011',
        };
}
# @return InlineResponse20011
#
sub configure_account_cdr_notify_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'account_id' is set
    unless (exists $args{'account_id'}) {
      croak("Missing the required parameter 'account_id' when calling configure_account_cdr_notify_0");
    }

    # verify the required parameter 'method' is set
    unless (exists $args{'method'}) {
      croak("Missing the required parameter 'method' when calling configure_account_cdr_notify_0");
    }

    # verify the required parameter 'url' is set
    unless (exists $args{'url'}) {
      croak("Missing the required parameter 'url' when calling configure_account_cdr_notify_0");
    }

    # parse inputs
    my $_resource_path = '/accounts/cdr_notify';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # form params
    if ( exists $args{'account_id'} ) {
                $form_params->{'account_id'} = $self->{api_client}->to_form_value($args{'account_id'});
    }
    
    # form params
    if ( exists $args{'method'} ) {
                $form_params->{'method'} = $self->{api_client}->to_form_value($args{'method'});
    }
    
    # form params
    if ( exists $args{'url'} ) {
                $form_params->{'url'} = $self->{api_client}->to_form_value($args{'url'});
    }
    
    # form params
    if ( exists $args{'username'} ) {
                $form_params->{'username'} = $self->{api_client}->to_form_value($args{'username'});
    }
    
    # form params
    if ( exists $args{'password'} ) {
                $form_params->{'password'} = $self->{api_client}->to_form_value($args{'password'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20011', $response);
    return $_response_object;
}

#
# get_account
#
# Get Account
# 
# @param string $id Account id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Account id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_account' } = { 
    	summary => 'Get Account',
        params => $params,
        returns => 'InlineResponse20011',
        };
}
# @return InlineResponse20011
#
sub get_account {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_account");
    }

    # parse inputs
    my $_resource_path = '/accounts/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded', 'application/offset+octet-stream', 'multipart/form-data');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20011', $response);
    return $_response_object;
}

#
# get_account_0
#
# Get Account
# 
# @param string $id Account id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Account id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_account_0' } = { 
    	summary => 'Get Account',
        params => $params,
        returns => 'InlineResponse20011',
        };
}
# @return InlineResponse20011
#
sub get_account_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_account_0");
    }

    # parse inputs
    my $_resource_path = '/accounts/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded', 'application/offset+octet-stream', 'multipart/form-data');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20011', $response);
    return $_response_object;
}

#
# get_account_integrations
#
# Get Account Integrations
# 
# @param string $id Account id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Account id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_account_integrations' } = { 
    	summary => 'Get Account Integrations',
        params => $params,
        returns => 'InlineResponse20010',
        };
}
# @return InlineResponse20010
#
sub get_account_integrations {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_account_integrations");
    }

    # parse inputs
    my $_resource_path = '/accounts/{id}/integrations';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded', 'application/offset+octet-stream', 'multipart/form-data');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20010', $response);
    return $_response_object;
}

#
# get_account_integrations_0
#
# Get Account Integrations
# 
# @param string $id Account id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Account id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_account_integrations_0' } = { 
    	summary => 'Get Account Integrations',
        params => $params,
        returns => 'InlineResponse20010',
        };
}
# @return InlineResponse20010
#
sub get_account_integrations_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_account_integrations_0");
    }

    # parse inputs
    my $_resource_path = '/accounts/{id}/integrations';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded', 'application/offset+octet-stream', 'multipart/form-data');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20010', $response);
    return $_response_object;
}

#
# update_account
#
# Update Account
# 
# @param string $id Account id (required)
# @param string $primary_color Branding primary color (optional)
# @param string $secondary_color Branding secondary color (optional)
# @param string $background_color Branding background color (optional)
# @param string $font_family Branding font family (optional)
# @param string $logo Branding logo (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Account id',
        required => '1',
    },
    'primary_color' => {
        data_type => 'string',
        description => 'Branding primary color',
        required => '0',
    },
    'secondary_color' => {
        data_type => 'string',
        description => 'Branding secondary color',
        required => '0',
    },
    'background_color' => {
        data_type => 'string',
        description => 'Branding background color',
        required => '0',
    },
    'font_family' => {
        data_type => 'string',
        description => 'Branding font family',
        required => '0',
    },
    'logo' => {
        data_type => 'string',
        description => 'Branding logo',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_account' } = { 
    	summary => 'Update Account',
        params => $params,
        returns => 'InlineResponse20011',
        };
}
# @return InlineResponse20011
#
sub update_account {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_account");
    }

    # parse inputs
    my $_resource_path = '/accounts/{id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'primary_color'} ) {
                $form_params->{'primary_color'} = $self->{api_client}->to_form_value($args{'primary_color'});
    }
    
    # form params
    if ( exists $args{'secondary_color'} ) {
                $form_params->{'secondary_color'} = $self->{api_client}->to_form_value($args{'secondary_color'});
    }
    
    # form params
    if ( exists $args{'background_color'} ) {
                $form_params->{'background_color'} = $self->{api_client}->to_form_value($args{'background_color'});
    }
    
    # form params
    if ( exists $args{'font_family'} ) {
                $form_params->{'font_family'} = $self->{api_client}->to_form_value($args{'font_family'});
    }
    
    # form params
    if ( exists $args{'logo'} ) {
                $form_params->{'logo'} = $self->{api_client}->to_form_value($args{'logo'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20011', $response);
    return $_response_object;
}

#
# update_account_0
#
# Update Account
# 
# @param string $id Account id (required)
# @param string $primary_color Branding primary color (optional)
# @param string $secondary_color Branding secondary color (optional)
# @param string $background_color Branding background color (optional)
# @param string $font_family Branding font family (optional)
# @param string $logo Branding logo (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Account id',
        required => '1',
    },
    'primary_color' => {
        data_type => 'string',
        description => 'Branding primary color',
        required => '0',
    },
    'secondary_color' => {
        data_type => 'string',
        description => 'Branding secondary color',
        required => '0',
    },
    'background_color' => {
        data_type => 'string',
        description => 'Branding background color',
        required => '0',
    },
    'font_family' => {
        data_type => 'string',
        description => 'Branding font family',
        required => '0',
    },
    'logo' => {
        data_type => 'string',
        description => 'Branding logo',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_account_0' } = { 
    	summary => 'Update Account',
        params => $params,
        returns => 'InlineResponse20011',
        };
}
# @return InlineResponse20011
#
sub update_account_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_account_0");
    }

    # parse inputs
    my $_resource_path = '/accounts/{id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'primary_color'} ) {
                $form_params->{'primary_color'} = $self->{api_client}->to_form_value($args{'primary_color'});
    }
    
    # form params
    if ( exists $args{'secondary_color'} ) {
                $form_params->{'secondary_color'} = $self->{api_client}->to_form_value($args{'secondary_color'});
    }
    
    # form params
    if ( exists $args{'background_color'} ) {
                $form_params->{'background_color'} = $self->{api_client}->to_form_value($args{'background_color'});
    }
    
    # form params
    if ( exists $args{'font_family'} ) {
                $form_params->{'font_family'} = $self->{api_client}->to_form_value($args{'font_family'});
    }
    
    # form params
    if ( exists $args{'logo'} ) {
                $form_params->{'logo'} = $self->{api_client}->to_form_value($args{'logo'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20011', $response);
    return $_response_object;
}

1;
