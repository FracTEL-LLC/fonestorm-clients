=begin comment

FoneStorm API 2.2.0 (Breeze)

FracTEL's Middleware API

OpenAPI spec version: 2.2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::MessagesApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# configure_message_receive
#
# Set Delivery Service
# 
# @param string $fonenumber Your FracTEL FoneNumber (required)
# @param string $type Message routing type (required)
# @param string $value Message routing type value (required)
# @param string $url_method URL method (when &#x60;type&#x60; is URL) (required)
# @param string $url_username Username for HTTP **Basic** authentication scheme (optional)
# @param string $url_password Password for HTTP **Basic** authentication scheme (optional)
{
    my $params = {
    'fonenumber' => {
        data_type => 'string',
        description => 'Your FracTEL FoneNumber',
        required => '1',
    },
    'type' => {
        data_type => 'string',
        description => 'Message routing type',
        required => '1',
    },
    'value' => {
        data_type => 'string',
        description => 'Message routing type value',
        required => '1',
    },
    'url_method' => {
        data_type => 'string',
        description => 'URL method (when &#x60;type&#x60; is URL)',
        required => '1',
    },
    'url_username' => {
        data_type => 'string',
        description => 'Username for HTTP **Basic** authentication scheme',
        required => '0',
    },
    'url_password' => {
        data_type => 'string',
        description => 'Password for HTTP **Basic** authentication scheme',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'configure_message_receive' } = { 
    	summary => 'Set Delivery Service',
        params => $params,
        returns => 'InlineResponse2013',
        };
}
# @return InlineResponse2013
#
sub configure_message_receive {
    my ($self, %args) = @_;

    # verify the required parameter 'fonenumber' is set
    unless (exists $args{'fonenumber'}) {
      croak("Missing the required parameter 'fonenumber' when calling configure_message_receive");
    }

    # verify the required parameter 'type' is set
    unless (exists $args{'type'}) {
      croak("Missing the required parameter 'type' when calling configure_message_receive");
    }

    # verify the required parameter 'value' is set
    unless (exists $args{'value'}) {
      croak("Missing the required parameter 'value' when calling configure_message_receive");
    }

    # verify the required parameter 'url_method' is set
    unless (exists $args{'url_method'}) {
      croak("Missing the required parameter 'url_method' when calling configure_message_receive");
    }

    # parse inputs
    my $_resource_path = '/messages/receive';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # form params
    if ( exists $args{'fonenumber'} ) {
                $form_params->{'fonenumber'} = $self->{api_client}->to_form_value($args{'fonenumber'});
    }
    
    # form params
    if ( exists $args{'type'} ) {
                $form_params->{'type'} = $self->{api_client}->to_form_value($args{'type'});
    }
    
    # form params
    if ( exists $args{'value'} ) {
                $form_params->{'value'} = $self->{api_client}->to_form_value($args{'value'});
    }
    
    # form params
    if ( exists $args{'url_method'} ) {
                $form_params->{'url_method'} = $self->{api_client}->to_form_value($args{'url_method'});
    }
    
    # form params
    if ( exists $args{'url_username'} ) {
                $form_params->{'url_username'} = $self->{api_client}->to_form_value($args{'url_username'});
    }
    
    # form params
    if ( exists $args{'url_password'} ) {
                $form_params->{'url_password'} = $self->{api_client}->to_form_value($args{'url_password'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2013', $response);
    return $_response_object;
}

#
# configure_message_receive_0
#
# Set Delivery Service
# 
# @param string $fonenumber Your FracTEL FoneNumber (required)
# @param string $type Message routing type (required)
# @param string $value Message routing type value (required)
# @param string $url_method URL method (when &#x60;type&#x60; is URL) (required)
# @param string $url_username Username for HTTP **Basic** authentication scheme (optional)
# @param string $url_password Password for HTTP **Basic** authentication scheme (optional)
{
    my $params = {
    'fonenumber' => {
        data_type => 'string',
        description => 'Your FracTEL FoneNumber',
        required => '1',
    },
    'type' => {
        data_type => 'string',
        description => 'Message routing type',
        required => '1',
    },
    'value' => {
        data_type => 'string',
        description => 'Message routing type value',
        required => '1',
    },
    'url_method' => {
        data_type => 'string',
        description => 'URL method (when &#x60;type&#x60; is URL)',
        required => '1',
    },
    'url_username' => {
        data_type => 'string',
        description => 'Username for HTTP **Basic** authentication scheme',
        required => '0',
    },
    'url_password' => {
        data_type => 'string',
        description => 'Password for HTTP **Basic** authentication scheme',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'configure_message_receive_0' } = { 
    	summary => 'Set Delivery Service',
        params => $params,
        returns => 'InlineResponse2013',
        };
}
# @return InlineResponse2013
#
sub configure_message_receive_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'fonenumber' is set
    unless (exists $args{'fonenumber'}) {
      croak("Missing the required parameter 'fonenumber' when calling configure_message_receive_0");
    }

    # verify the required parameter 'type' is set
    unless (exists $args{'type'}) {
      croak("Missing the required parameter 'type' when calling configure_message_receive_0");
    }

    # verify the required parameter 'value' is set
    unless (exists $args{'value'}) {
      croak("Missing the required parameter 'value' when calling configure_message_receive_0");
    }

    # verify the required parameter 'url_method' is set
    unless (exists $args{'url_method'}) {
      croak("Missing the required parameter 'url_method' when calling configure_message_receive_0");
    }

    # parse inputs
    my $_resource_path = '/messages/receive';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # form params
    if ( exists $args{'fonenumber'} ) {
                $form_params->{'fonenumber'} = $self->{api_client}->to_form_value($args{'fonenumber'});
    }
    
    # form params
    if ( exists $args{'type'} ) {
                $form_params->{'type'} = $self->{api_client}->to_form_value($args{'type'});
    }
    
    # form params
    if ( exists $args{'value'} ) {
                $form_params->{'value'} = $self->{api_client}->to_form_value($args{'value'});
    }
    
    # form params
    if ( exists $args{'url_method'} ) {
                $form_params->{'url_method'} = $self->{api_client}->to_form_value($args{'url_method'});
    }
    
    # form params
    if ( exists $args{'url_username'} ) {
                $form_params->{'url_username'} = $self->{api_client}->to_form_value($args{'url_username'});
    }
    
    # form params
    if ( exists $args{'url_password'} ) {
                $form_params->{'url_password'} = $self->{api_client}->to_form_value($args{'url_password'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2013', $response);
    return $_response_object;
}

#
# configure_message_receive_notify
#
# Set Receive Callback
# 
# @param string $fonenumber Your FracTEL FoneNumber (required)
# @param string $method Callback URL method (required)
# @param string $url Callback URL. See **Notes** for additional information. (required)
# @param string $url_username Username for HTTP **Basic** authentication scheme (optional)
# @param string $url_password Password for HTTP **Basic** authentication scheme (optional)
{
    my $params = {
    'fonenumber' => {
        data_type => 'string',
        description => 'Your FracTEL FoneNumber',
        required => '1',
    },
    'method' => {
        data_type => 'string',
        description => 'Callback URL method',
        required => '1',
    },
    'url' => {
        data_type => 'string',
        description => 'Callback URL. See **Notes** for additional information.',
        required => '1',
    },
    'url_username' => {
        data_type => 'string',
        description => 'Username for HTTP **Basic** authentication scheme',
        required => '0',
    },
    'url_password' => {
        data_type => 'string',
        description => 'Password for HTTP **Basic** authentication scheme',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'configure_message_receive_notify' } = { 
    	summary => 'Set Receive Callback',
        params => $params,
        returns => 'InlineResponse2013',
        };
}
# @return InlineResponse2013
#
sub configure_message_receive_notify {
    my ($self, %args) = @_;

    # verify the required parameter 'fonenumber' is set
    unless (exists $args{'fonenumber'}) {
      croak("Missing the required parameter 'fonenumber' when calling configure_message_receive_notify");
    }

    # verify the required parameter 'method' is set
    unless (exists $args{'method'}) {
      croak("Missing the required parameter 'method' when calling configure_message_receive_notify");
    }

    # verify the required parameter 'url' is set
    unless (exists $args{'url'}) {
      croak("Missing the required parameter 'url' when calling configure_message_receive_notify");
    }

    # parse inputs
    my $_resource_path = '/messages/receive_notify';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # form params
    if ( exists $args{'fonenumber'} ) {
                $form_params->{'fonenumber'} = $self->{api_client}->to_form_value($args{'fonenumber'});
    }
    
    # form params
    if ( exists $args{'method'} ) {
                $form_params->{'method'} = $self->{api_client}->to_form_value($args{'method'});
    }
    
    # form params
    if ( exists $args{'url'} ) {
                $form_params->{'url'} = $self->{api_client}->to_form_value($args{'url'});
    }
    
    # form params
    if ( exists $args{'url_username'} ) {
                $form_params->{'url_username'} = $self->{api_client}->to_form_value($args{'url_username'});
    }
    
    # form params
    if ( exists $args{'url_password'} ) {
                $form_params->{'url_password'} = $self->{api_client}->to_form_value($args{'url_password'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2013', $response);
    return $_response_object;
}

#
# configure_message_receive_notify_0
#
# Set Receive Callback
# 
# @param string $fonenumber Your FracTEL FoneNumber (required)
# @param string $method Callback URL method (required)
# @param string $url Callback URL. See **Notes** for additional information. (required)
# @param string $url_username Username for HTTP **Basic** authentication scheme (optional)
# @param string $url_password Password for HTTP **Basic** authentication scheme (optional)
{
    my $params = {
    'fonenumber' => {
        data_type => 'string',
        description => 'Your FracTEL FoneNumber',
        required => '1',
    },
    'method' => {
        data_type => 'string',
        description => 'Callback URL method',
        required => '1',
    },
    'url' => {
        data_type => 'string',
        description => 'Callback URL. See **Notes** for additional information.',
        required => '1',
    },
    'url_username' => {
        data_type => 'string',
        description => 'Username for HTTP **Basic** authentication scheme',
        required => '0',
    },
    'url_password' => {
        data_type => 'string',
        description => 'Password for HTTP **Basic** authentication scheme',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'configure_message_receive_notify_0' } = { 
    	summary => 'Set Receive Callback',
        params => $params,
        returns => 'InlineResponse2013',
        };
}
# @return InlineResponse2013
#
sub configure_message_receive_notify_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'fonenumber' is set
    unless (exists $args{'fonenumber'}) {
      croak("Missing the required parameter 'fonenumber' when calling configure_message_receive_notify_0");
    }

    # verify the required parameter 'method' is set
    unless (exists $args{'method'}) {
      croak("Missing the required parameter 'method' when calling configure_message_receive_notify_0");
    }

    # verify the required parameter 'url' is set
    unless (exists $args{'url'}) {
      croak("Missing the required parameter 'url' when calling configure_message_receive_notify_0");
    }

    # parse inputs
    my $_resource_path = '/messages/receive_notify';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # form params
    if ( exists $args{'fonenumber'} ) {
                $form_params->{'fonenumber'} = $self->{api_client}->to_form_value($args{'fonenumber'});
    }
    
    # form params
    if ( exists $args{'method'} ) {
                $form_params->{'method'} = $self->{api_client}->to_form_value($args{'method'});
    }
    
    # form params
    if ( exists $args{'url'} ) {
                $form_params->{'url'} = $self->{api_client}->to_form_value($args{'url'});
    }
    
    # form params
    if ( exists $args{'url_username'} ) {
                $form_params->{'url_username'} = $self->{api_client}->to_form_value($args{'url_username'});
    }
    
    # form params
    if ( exists $args{'url_password'} ) {
                $form_params->{'url_password'} = $self->{api_client}->to_form_value($args{'url_password'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2013', $response);
    return $_response_object;
}

#
# configure_message_send_notify
#
# Set Send Callback
# 
# @param string $fonenumber Your FracTEL FoneNumber (required)
# @param string $method Callback URL method (required)
# @param string $url Callback URL. See **Notes** for additional information. (required)
# @param string $url_username Username for HTTP **Basic** authentication scheme (optional)
# @param string $url_password Password for HTTP **Basic** authentication scheme (optional)
{
    my $params = {
    'fonenumber' => {
        data_type => 'string',
        description => 'Your FracTEL FoneNumber',
        required => '1',
    },
    'method' => {
        data_type => 'string',
        description => 'Callback URL method',
        required => '1',
    },
    'url' => {
        data_type => 'string',
        description => 'Callback URL. See **Notes** for additional information.',
        required => '1',
    },
    'url_username' => {
        data_type => 'string',
        description => 'Username for HTTP **Basic** authentication scheme',
        required => '0',
    },
    'url_password' => {
        data_type => 'string',
        description => 'Password for HTTP **Basic** authentication scheme',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'configure_message_send_notify' } = { 
    	summary => 'Set Send Callback',
        params => $params,
        returns => 'InlineResponse2013',
        };
}
# @return InlineResponse2013
#
sub configure_message_send_notify {
    my ($self, %args) = @_;

    # verify the required parameter 'fonenumber' is set
    unless (exists $args{'fonenumber'}) {
      croak("Missing the required parameter 'fonenumber' when calling configure_message_send_notify");
    }

    # verify the required parameter 'method' is set
    unless (exists $args{'method'}) {
      croak("Missing the required parameter 'method' when calling configure_message_send_notify");
    }

    # verify the required parameter 'url' is set
    unless (exists $args{'url'}) {
      croak("Missing the required parameter 'url' when calling configure_message_send_notify");
    }

    # parse inputs
    my $_resource_path = '/messages/send_notify';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # form params
    if ( exists $args{'fonenumber'} ) {
                $form_params->{'fonenumber'} = $self->{api_client}->to_form_value($args{'fonenumber'});
    }
    
    # form params
    if ( exists $args{'method'} ) {
                $form_params->{'method'} = $self->{api_client}->to_form_value($args{'method'});
    }
    
    # form params
    if ( exists $args{'url'} ) {
                $form_params->{'url'} = $self->{api_client}->to_form_value($args{'url'});
    }
    
    # form params
    if ( exists $args{'url_username'} ) {
                $form_params->{'url_username'} = $self->{api_client}->to_form_value($args{'url_username'});
    }
    
    # form params
    if ( exists $args{'url_password'} ) {
                $form_params->{'url_password'} = $self->{api_client}->to_form_value($args{'url_password'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2013', $response);
    return $_response_object;
}

#
# configure_message_send_notify_0
#
# Set Send Callback
# 
# @param string $fonenumber Your FracTEL FoneNumber (required)
# @param string $method Callback URL method (required)
# @param string $url Callback URL. See **Notes** for additional information. (required)
# @param string $url_username Username for HTTP **Basic** authentication scheme (optional)
# @param string $url_password Password for HTTP **Basic** authentication scheme (optional)
{
    my $params = {
    'fonenumber' => {
        data_type => 'string',
        description => 'Your FracTEL FoneNumber',
        required => '1',
    },
    'method' => {
        data_type => 'string',
        description => 'Callback URL method',
        required => '1',
    },
    'url' => {
        data_type => 'string',
        description => 'Callback URL. See **Notes** for additional information.',
        required => '1',
    },
    'url_username' => {
        data_type => 'string',
        description => 'Username for HTTP **Basic** authentication scheme',
        required => '0',
    },
    'url_password' => {
        data_type => 'string',
        description => 'Password for HTTP **Basic** authentication scheme',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'configure_message_send_notify_0' } = { 
    	summary => 'Set Send Callback',
        params => $params,
        returns => 'InlineResponse2013',
        };
}
# @return InlineResponse2013
#
sub configure_message_send_notify_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'fonenumber' is set
    unless (exists $args{'fonenumber'}) {
      croak("Missing the required parameter 'fonenumber' when calling configure_message_send_notify_0");
    }

    # verify the required parameter 'method' is set
    unless (exists $args{'method'}) {
      croak("Missing the required parameter 'method' when calling configure_message_send_notify_0");
    }

    # verify the required parameter 'url' is set
    unless (exists $args{'url'}) {
      croak("Missing the required parameter 'url' when calling configure_message_send_notify_0");
    }

    # parse inputs
    my $_resource_path = '/messages/send_notify';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # form params
    if ( exists $args{'fonenumber'} ) {
                $form_params->{'fonenumber'} = $self->{api_client}->to_form_value($args{'fonenumber'});
    }
    
    # form params
    if ( exists $args{'method'} ) {
                $form_params->{'method'} = $self->{api_client}->to_form_value($args{'method'});
    }
    
    # form params
    if ( exists $args{'url'} ) {
                $form_params->{'url'} = $self->{api_client}->to_form_value($args{'url'});
    }
    
    # form params
    if ( exists $args{'url_username'} ) {
                $form_params->{'url_username'} = $self->{api_client}->to_form_value($args{'url_username'});
    }
    
    # form params
    if ( exists $args{'url_password'} ) {
                $form_params->{'url_password'} = $self->{api_client}->to_form_value($args{'url_password'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2013', $response);
    return $_response_object;
}

#
# create_message
#
# Create Message
# 
# @param string $to Receiving 10 digit phone number (required)
# @param string $fonenumber Your FracTEL FoneNumber (required)
# @param string $message Message body (required)
# @param ARRAY[string] $media_url URL for MMS media (up to 10) (optional)
# @param string $confirmation_url Callback URL for confirmation (optional)
# @param string $confirmation_url_username Username for HTTP **Basic** authentication scheme (optional)
# @param string $confirmation_url_password Password for HTTP **Basic** authentication scheme (optional)
# @param boolean $require_confirmation Only send this message if confirmation is available (optional)
{
    my $params = {
    'to' => {
        data_type => 'string',
        description => 'Receiving 10 digit phone number',
        required => '1',
    },
    'fonenumber' => {
        data_type => 'string',
        description => 'Your FracTEL FoneNumber',
        required => '1',
    },
    'message' => {
        data_type => 'string',
        description => 'Message body',
        required => '1',
    },
    'media_url' => {
        data_type => 'ARRAY[string]',
        description => 'URL for MMS media (up to 10)',
        required => '0',
    },
    'confirmation_url' => {
        data_type => 'string',
        description => 'Callback URL for confirmation',
        required => '0',
    },
    'confirmation_url_username' => {
        data_type => 'string',
        description => 'Username for HTTP **Basic** authentication scheme',
        required => '0',
    },
    'confirmation_url_password' => {
        data_type => 'string',
        description => 'Password for HTTP **Basic** authentication scheme',
        required => '0',
    },
    'require_confirmation' => {
        data_type => 'boolean',
        description => 'Only send this message if confirmation is available',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_message' } = { 
    	summary => 'Create Message',
        params => $params,
        returns => 'InlineResponse2014',
        };
}
# @return InlineResponse2014
#
sub create_message {
    my ($self, %args) = @_;

    # verify the required parameter 'to' is set
    unless (exists $args{'to'}) {
      croak("Missing the required parameter 'to' when calling create_message");
    }

    # verify the required parameter 'fonenumber' is set
    unless (exists $args{'fonenumber'}) {
      croak("Missing the required parameter 'fonenumber' when calling create_message");
    }

    # verify the required parameter 'message' is set
    unless (exists $args{'message'}) {
      croak("Missing the required parameter 'message' when calling create_message");
    }

    # parse inputs
    my $_resource_path = '/messages/send';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # form params
    if ( exists $args{'to'} ) {
                $form_params->{'to'} = $self->{api_client}->to_form_value($args{'to'});
    }
    
    # form params
    if ( exists $args{'fonenumber'} ) {
                $form_params->{'fonenumber'} = $self->{api_client}->to_form_value($args{'fonenumber'});
    }
    
    # form params
    if ( exists $args{'message'} ) {
                $form_params->{'message'} = $self->{api_client}->to_form_value($args{'message'});
    }
    
    # form params
    if ( exists $args{'media_url'} ) {
                $form_params->{'media_url'} = $self->{api_client}->to_form_value($args{'media_url'});
    }
    
    # form params
    if ( exists $args{'confirmation_url'} ) {
                $form_params->{'confirmation_url'} = $self->{api_client}->to_form_value($args{'confirmation_url'});
    }
    
    # form params
    if ( exists $args{'confirmation_url_username'} ) {
                $form_params->{'confirmation_url_username'} = $self->{api_client}->to_form_value($args{'confirmation_url_username'});
    }
    
    # form params
    if ( exists $args{'confirmation_url_password'} ) {
                $form_params->{'confirmation_url_password'} = $self->{api_client}->to_form_value($args{'confirmation_url_password'});
    }
    
    # form params
    if ( exists $args{'require_confirmation'} ) {
                $form_params->{'require_confirmation'} = $self->{api_client}->to_form_value($args{'require_confirmation'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2014', $response);
    return $_response_object;
}

#
# create_message_0
#
# Create Message
# 
# @param string $to Receiving 10 digit phone number (required)
# @param string $fonenumber Your FracTEL FoneNumber (required)
# @param string $message Message body (required)
# @param ARRAY[string] $media_url URL for MMS media (up to 10) (optional)
# @param string $confirmation_url Callback URL for confirmation (optional)
# @param string $confirmation_url_username Username for HTTP **Basic** authentication scheme (optional)
# @param string $confirmation_url_password Password for HTTP **Basic** authentication scheme (optional)
# @param boolean $require_confirmation Only send this message if confirmation is available (optional)
{
    my $params = {
    'to' => {
        data_type => 'string',
        description => 'Receiving 10 digit phone number',
        required => '1',
    },
    'fonenumber' => {
        data_type => 'string',
        description => 'Your FracTEL FoneNumber',
        required => '1',
    },
    'message' => {
        data_type => 'string',
        description => 'Message body',
        required => '1',
    },
    'media_url' => {
        data_type => 'ARRAY[string]',
        description => 'URL for MMS media (up to 10)',
        required => '0',
    },
    'confirmation_url' => {
        data_type => 'string',
        description => 'Callback URL for confirmation',
        required => '0',
    },
    'confirmation_url_username' => {
        data_type => 'string',
        description => 'Username for HTTP **Basic** authentication scheme',
        required => '0',
    },
    'confirmation_url_password' => {
        data_type => 'string',
        description => 'Password for HTTP **Basic** authentication scheme',
        required => '0',
    },
    'require_confirmation' => {
        data_type => 'boolean',
        description => 'Only send this message if confirmation is available',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_message_0' } = { 
    	summary => 'Create Message',
        params => $params,
        returns => 'InlineResponse2014',
        };
}
# @return InlineResponse2014
#
sub create_message_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'to' is set
    unless (exists $args{'to'}) {
      croak("Missing the required parameter 'to' when calling create_message_0");
    }

    # verify the required parameter 'fonenumber' is set
    unless (exists $args{'fonenumber'}) {
      croak("Missing the required parameter 'fonenumber' when calling create_message_0");
    }

    # verify the required parameter 'message' is set
    unless (exists $args{'message'}) {
      croak("Missing the required parameter 'message' when calling create_message_0");
    }

    # parse inputs
    my $_resource_path = '/messages/send';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # form params
    if ( exists $args{'to'} ) {
                $form_params->{'to'} = $self->{api_client}->to_form_value($args{'to'});
    }
    
    # form params
    if ( exists $args{'fonenumber'} ) {
                $form_params->{'fonenumber'} = $self->{api_client}->to_form_value($args{'fonenumber'});
    }
    
    # form params
    if ( exists $args{'message'} ) {
                $form_params->{'message'} = $self->{api_client}->to_form_value($args{'message'});
    }
    
    # form params
    if ( exists $args{'media_url'} ) {
                $form_params->{'media_url'} = $self->{api_client}->to_form_value($args{'media_url'});
    }
    
    # form params
    if ( exists $args{'confirmation_url'} ) {
                $form_params->{'confirmation_url'} = $self->{api_client}->to_form_value($args{'confirmation_url'});
    }
    
    # form params
    if ( exists $args{'confirmation_url_username'} ) {
                $form_params->{'confirmation_url_username'} = $self->{api_client}->to_form_value($args{'confirmation_url_username'});
    }
    
    # form params
    if ( exists $args{'confirmation_url_password'} ) {
                $form_params->{'confirmation_url_password'} = $self->{api_client}->to_form_value($args{'confirmation_url_password'});
    }
    
    # form params
    if ( exists $args{'require_confirmation'} ) {
                $form_params->{'require_confirmation'} = $self->{api_client}->to_form_value($args{'require_confirmation'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2014', $response);
    return $_response_object;
}

1;
