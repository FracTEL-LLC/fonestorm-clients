=begin comment

FoneStorm API 2.4.0 (Thunder)

FracTEL's Middleware API

OpenAPI spec version: 2.4.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::CalltoactionsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# create_call_to_action
#
# Create Call to Action
# 
# @param string $name Call-to-action name (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Call-to-action name',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_call_to_action' } = { 
    	summary => 'Create Call to Action',
        params => $params,
        returns => 'InlineResponse20114',
        };
}
# @return InlineResponse20114
#
sub create_call_to_action {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling create_call_to_action");
    }

    # parse inputs
    my $_resource_path = '/call-to-actions';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # form params
    if ( exists $args{'name'} ) {
                $form_params->{'name'} = $self->{api_client}->to_form_value($args{'name'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20114', $response);
    return $_response_object;
}

#
# delete_call_to_action
#
# Delete Call to Action
# 
# @param string $id Call-to-action id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Call-to-action id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_call_to_action' } = { 
    	summary => 'Delete Call to Action',
        params => $params,
        returns => 'InlineResponse20114',
        };
}
# @return InlineResponse20114
#
sub delete_call_to_action {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_call_to_action");
    }

    # parse inputs
    my $_resource_path = '/call-to-actions/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20114', $response);
    return $_response_object;
}

#
# get_call_to_action
#
# Get Call to Action
# 
# @param string $id Call-to-action id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Call-to-action id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_call_to_action' } = { 
    	summary => 'Get Call to Action',
        params => $params,
        returns => 'InlineResponse20114',
        };
}
# @return InlineResponse20114
#
sub get_call_to_action {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_call_to_action");
    }

    # parse inputs
    my $_resource_path = '/call-to-actions/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded', 'application/offset+octet-stream', 'multipart/form-data');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20114', $response);
    return $_response_object;
}

#
# get_call_to_actions
#
# Get Call to Actions
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_call_to_actions' } = { 
    	summary => 'Get Call to Actions',
        params => $params,
        returns => 'InlineResponse20012',
        };
}
# @return InlineResponse20012
#
sub get_call_to_actions {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/call-to-actions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20012', $response);
    return $_response_object;
}

#
# update_call_to_action
#
# Update Call to Action
# 
# @param string $id Call-to-action id (required)
# @param string $name Call-to-action name (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Call-to-action id',
        required => '1',
    },
    'name' => {
        data_type => 'string',
        description => 'Call-to-action name',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_call_to_action' } = { 
    	summary => 'Update Call to Action',
        params => $params,
        returns => 'InlineResponse20114',
        };
}
# @return InlineResponse20114
#
sub update_call_to_action {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_call_to_action");
    }

    # parse inputs
    my $_resource_path = '/call-to-actions/{id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'name'} ) {
                $form_params->{'name'} = $self->{api_client}->to_form_value($args{'name'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jwt )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20114', $response);
    return $_response_object;
}

1;
