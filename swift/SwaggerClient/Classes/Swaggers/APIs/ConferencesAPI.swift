//
// ConferencesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ConferencesAPI: APIBase {
    /**
     Create Conference
     
     - parameter label: (form) Label of conference 
     - parameter startTime: (form) Start time and date of conference (optional)
     - parameter endTime: (form) End time and date of conference (optional)
     - parameter fonenumber: (form) Fonenumber to use for conference (optional)
     - parameter beforeMessage: (form) Message to play before conference start time (optional)
     - parameter afterMessage: (form) Message to play after conference end time (optional)
     - parameter maxMembers: (form) Maximum number of allowed conference attendees (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createConference(label label: String, startTime: NSDate? = nil, endTime: NSDate? = nil, fonenumber: BigDecimal? = nil, beforeMessage: String? = nil, afterMessage: String? = nil, maxMembers: Double? = nil, completion: ((data: InlineResponse2013?, error: ErrorType?) -> Void)) {
        createConferenceWithRequestBuilder(label: label, startTime: startTime, endTime: endTime, fonenumber: fonenumber, beforeMessage: beforeMessage, afterMessage: afterMessage, maxMembers: maxMembers).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create Conference
     - POST /conferences
     - Create a conference.
     - API Key:
       - type: apiKey token 
       - name: jwt
     - examples: [{contentType=application/json, example={
  "conference" : {
    "start_time" : "aeiou",
    "end_time" : "aeiou",
    "after_message" : "aeiou",
    "max_members" : 0.80082819046101150206595775671303272247314453125,
    "id" : "aeiou",
    "label" : "aeiou",
    "before_message" : "aeiou"
  }
}}]
     
     - parameter label: (form) Label of conference 
     - parameter startTime: (form) Start time and date of conference (optional)
     - parameter endTime: (form) End time and date of conference (optional)
     - parameter fonenumber: (form) Fonenumber to use for conference (optional)
     - parameter beforeMessage: (form) Message to play before conference start time (optional)
     - parameter afterMessage: (form) Message to play after conference end time (optional)
     - parameter maxMembers: (form) Maximum number of allowed conference attendees (optional)

     - returns: RequestBuilder<InlineResponse2013> 
     */
    public class func createConferenceWithRequestBuilder(label label: String, startTime: NSDate? = nil, endTime: NSDate? = nil, fonenumber: BigDecimal? = nil, beforeMessage: String? = nil, afterMessage: String? = nil, maxMembers: Double? = nil) -> RequestBuilder<InlineResponse2013> {
        let path = "/conferences"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "label": label,
            "start_time": startTime?.encodeToJSON(),
            "end_time": endTime?.encodeToJSON(),
            "fonenumber": fonenumber,
            "before_message": beforeMessage,
            "after_message": afterMessage,
            "max_members": maxMembers
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2013>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Create Conference
     
     - parameter label: (form) Label of conference 
     - parameter startTime: (form) Start time and date of conference (optional)
     - parameter endTime: (form) End time and date of conference (optional)
     - parameter fonenumber: (form) Fonenumber to use for conference (optional)
     - parameter beforeMessage: (form) Message to play before conference start time (optional)
     - parameter afterMessage: (form) Message to play after conference end time (optional)
     - parameter maxMembers: (form) Maximum number of allowed conference attendees (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createConference_0(label label: String, startTime: NSDate? = nil, endTime: NSDate? = nil, fonenumber: BigDecimal? = nil, beforeMessage: String? = nil, afterMessage: String? = nil, maxMembers: Double? = nil, completion: ((data: InlineResponse2013?, error: ErrorType?) -> Void)) {
        createConference_0WithRequestBuilder(label: label, startTime: startTime, endTime: endTime, fonenumber: fonenumber, beforeMessage: beforeMessage, afterMessage: afterMessage, maxMembers: maxMembers).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create Conference
     - POST /conferences
     - Create a conference.
     - API Key:
       - type: apiKey token 
       - name: jwt
     - examples: [{contentType=application/json, example={
  "conference" : {
    "start_time" : "aeiou",
    "end_time" : "aeiou",
    "after_message" : "aeiou",
    "max_members" : 0.80082819046101150206595775671303272247314453125,
    "id" : "aeiou",
    "label" : "aeiou",
    "before_message" : "aeiou"
  }
}}]
     
     - parameter label: (form) Label of conference 
     - parameter startTime: (form) Start time and date of conference (optional)
     - parameter endTime: (form) End time and date of conference (optional)
     - parameter fonenumber: (form) Fonenumber to use for conference (optional)
     - parameter beforeMessage: (form) Message to play before conference start time (optional)
     - parameter afterMessage: (form) Message to play after conference end time (optional)
     - parameter maxMembers: (form) Maximum number of allowed conference attendees (optional)

     - returns: RequestBuilder<InlineResponse2013> 
     */
    public class func createConference_0WithRequestBuilder(label label: String, startTime: NSDate? = nil, endTime: NSDate? = nil, fonenumber: BigDecimal? = nil, beforeMessage: String? = nil, afterMessage: String? = nil, maxMembers: Double? = nil) -> RequestBuilder<InlineResponse2013> {
        let path = "/conferences"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "label": label,
            "start_time": startTime?.encodeToJSON(),
            "end_time": endTime?.encodeToJSON(),
            "fonenumber": fonenumber,
            "before_message": beforeMessage,
            "after_message": afterMessage,
            "max_members": maxMembers
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2013>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Delete Conference
     
     - parameter id: (path) Conference id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteConference(id id: String, completion: ((data: InlineResponse2013?, error: ErrorType?) -> Void)) {
        deleteConferenceWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete Conference
     - DELETE /conferences/{id}
     - Delete a conference.
     - API Key:
       - type: apiKey token 
       - name: jwt
     - examples: [{contentType=application/json, example={
  "conference" : {
    "start_time" : "aeiou",
    "end_time" : "aeiou",
    "after_message" : "aeiou",
    "max_members" : 0.80082819046101150206595775671303272247314453125,
    "id" : "aeiou",
    "label" : "aeiou",
    "before_message" : "aeiou"
  }
}}]
     
     - parameter id: (path) Conference id 

     - returns: RequestBuilder<InlineResponse2013> 
     */
    public class func deleteConferenceWithRequestBuilder(id id: String) -> RequestBuilder<InlineResponse2013> {
        var path = "/conferences/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2013>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete Conference
     
     - parameter id: (path) Conference id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteConference_0(id id: String, completion: ((data: InlineResponse2013?, error: ErrorType?) -> Void)) {
        deleteConference_0WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete Conference
     - DELETE /conferences/{id}
     - Delete a conference.
     - API Key:
       - type: apiKey token 
       - name: jwt
     - examples: [{contentType=application/json, example={
  "conference" : {
    "start_time" : "aeiou",
    "end_time" : "aeiou",
    "after_message" : "aeiou",
    "max_members" : 0.80082819046101150206595775671303272247314453125,
    "id" : "aeiou",
    "label" : "aeiou",
    "before_message" : "aeiou"
  }
}}]
     
     - parameter id: (path) Conference id 

     - returns: RequestBuilder<InlineResponse2013> 
     */
    public class func deleteConference_0WithRequestBuilder(id id: String) -> RequestBuilder<InlineResponse2013> {
        var path = "/conferences/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2013>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get Conference
     
     - parameter id: (path) Conference id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConference(id id: String, completion: ((data: InlineResponse2013?, error: ErrorType?) -> Void)) {
        getConferenceWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get Conference
     - GET /conferences/{id}
     - Get information about a conference.
     - API Key:
       - type: apiKey token 
       - name: jwt
     - examples: [{contentType=application/json, example={
  "conference" : {
    "start_time" : "aeiou",
    "end_time" : "aeiou",
    "after_message" : "aeiou",
    "max_members" : 0.80082819046101150206595775671303272247314453125,
    "id" : "aeiou",
    "label" : "aeiou",
    "before_message" : "aeiou"
  }
}}]
     
     - parameter id: (path) Conference id 

     - returns: RequestBuilder<InlineResponse2013> 
     */
    public class func getConferenceWithRequestBuilder(id id: String) -> RequestBuilder<InlineResponse2013> {
        var path = "/conferences/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2013>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Conference Fonenumbers
     
     - parameter id: (path) Conference id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConferenceFonenumbers(id id: String, completion: ((data: InlineResponse2002?, error: ErrorType?) -> Void)) {
        getConferenceFonenumbersWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Conference Fonenumbers
     - GET /conferences/{id}/fonenumbers
     - Get fonenumbers assigned to a conference.
     - API Key:
       - type: apiKey token 
       - name: jwt
     - examples: [{contentType=application/json, example={
  "fonenumbers" : [ "aeiou" ]
}}]
     
     - parameter id: (path) Conference id 

     - returns: RequestBuilder<InlineResponse2002> 
     */
    public class func getConferenceFonenumbersWithRequestBuilder(id id: String) -> RequestBuilder<InlineResponse2002> {
        var path = "/conferences/{id}/fonenumbers"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Conference Fonenumbers
     
     - parameter id: (path) Conference id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConferenceFonenumbers_0(id id: String, completion: ((data: InlineResponse2002?, error: ErrorType?) -> Void)) {
        getConferenceFonenumbers_0WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Conference Fonenumbers
     - GET /conferences/{id}/fonenumbers
     - Get fonenumbers assigned to a conference.
     - API Key:
       - type: apiKey token 
       - name: jwt
     - examples: [{contentType=application/json, example={
  "fonenumbers" : [ "aeiou" ]
}}]
     
     - parameter id: (path) Conference id 

     - returns: RequestBuilder<InlineResponse2002> 
     */
    public class func getConferenceFonenumbers_0WithRequestBuilder(id id: String) -> RequestBuilder<InlineResponse2002> {
        var path = "/conferences/{id}/fonenumbers"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get Conference
     
     - parameter id: (path) Conference id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConference_0(id id: String, completion: ((data: InlineResponse2013?, error: ErrorType?) -> Void)) {
        getConference_0WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get Conference
     - GET /conferences/{id}
     - Get information about a conference.
     - API Key:
       - type: apiKey token 
       - name: jwt
     - examples: [{contentType=application/json, example={
  "conference" : {
    "start_time" : "aeiou",
    "end_time" : "aeiou",
    "after_message" : "aeiou",
    "max_members" : 0.80082819046101150206595775671303272247314453125,
    "id" : "aeiou",
    "label" : "aeiou",
    "before_message" : "aeiou"
  }
}}]
     
     - parameter id: (path) Conference id 

     - returns: RequestBuilder<InlineResponse2013> 
     */
    public class func getConference_0WithRequestBuilder(id id: String) -> RequestBuilder<InlineResponse2013> {
        var path = "/conferences/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2013>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get Conferences
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConferences(completion: ((data: InlineResponse200?, error: ErrorType?) -> Void)) {
        getConferencesWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get Conferences
     - GET /conferences
     - Get a list of all conferences.
     - API Key:
       - type: apiKey token 
       - name: jwt
     - examples: [{contentType=application/json, example={
  "conferences" : [ {
    "start_time" : "aeiou",
    "end_time" : "aeiou",
    "after_message" : "aeiou",
    "max_members" : 0.80082819046101150206595775671303272247314453125,
    "id" : "aeiou",
    "label" : "aeiou",
    "before_message" : "aeiou"
  } ]
}}]

     - returns: RequestBuilder<InlineResponse200> 
     */
    public class func getConferencesWithRequestBuilder() -> RequestBuilder<InlineResponse200> {
        let path = "/conferences"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get Conferences
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConferences_0(completion: ((data: InlineResponse200?, error: ErrorType?) -> Void)) {
        getConferences_0WithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get Conferences
     - GET /conferences
     - Get a list of all conferences.
     - API Key:
       - type: apiKey token 
       - name: jwt
     - examples: [{contentType=application/json, example={
  "conferences" : [ {
    "start_time" : "aeiou",
    "end_time" : "aeiou",
    "after_message" : "aeiou",
    "max_members" : 0.80082819046101150206595775671303272247314453125,
    "id" : "aeiou",
    "label" : "aeiou",
    "before_message" : "aeiou"
  } ]
}}]

     - returns: RequestBuilder<InlineResponse200> 
     */
    public class func getConferences_0WithRequestBuilder() -> RequestBuilder<InlineResponse200> {
        let path = "/conferences"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update Conference
     
     - parameter id: (path) Conference id 
     - parameter label: (form) Label of conference (optional)
     - parameter startTime: (form) Start time and date of conference (optional)
     - parameter endTime: (form) End time and date of conference (optional)
     - parameter fonenumber: (form) Fonenumber to use for conference (optional)
     - parameter beforeMessage: (form) Message to play before conference start time (optional)
     - parameter afterMessage: (form) Message to play after conference end time (optional)
     - parameter maxMembers: (form) Maximum number of allowed conference attendees (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateConference(id id: String, label: String? = nil, startTime: NSDate? = nil, endTime: NSDate? = nil, fonenumber: BigDecimal? = nil, beforeMessage: String? = nil, afterMessage: String? = nil, maxMembers: Double? = nil, completion: ((data: InlineResponse2013?, error: ErrorType?) -> Void)) {
        updateConferenceWithRequestBuilder(id: id, label: label, startTime: startTime, endTime: endTime, fonenumber: fonenumber, beforeMessage: beforeMessage, afterMessage: afterMessage, maxMembers: maxMembers).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update Conference
     - PUT /conferences/{id}
     - Update a conference.
     - API Key:
       - type: apiKey token 
       - name: jwt
     - examples: [{contentType=application/json, example={
  "conference" : {
    "start_time" : "aeiou",
    "end_time" : "aeiou",
    "after_message" : "aeiou",
    "max_members" : 0.80082819046101150206595775671303272247314453125,
    "id" : "aeiou",
    "label" : "aeiou",
    "before_message" : "aeiou"
  }
}}]
     
     - parameter id: (path) Conference id 
     - parameter label: (form) Label of conference (optional)
     - parameter startTime: (form) Start time and date of conference (optional)
     - parameter endTime: (form) End time and date of conference (optional)
     - parameter fonenumber: (form) Fonenumber to use for conference (optional)
     - parameter beforeMessage: (form) Message to play before conference start time (optional)
     - parameter afterMessage: (form) Message to play after conference end time (optional)
     - parameter maxMembers: (form) Maximum number of allowed conference attendees (optional)

     - returns: RequestBuilder<InlineResponse2013> 
     */
    public class func updateConferenceWithRequestBuilder(id id: String, label: String? = nil, startTime: NSDate? = nil, endTime: NSDate? = nil, fonenumber: BigDecimal? = nil, beforeMessage: String? = nil, afterMessage: String? = nil, maxMembers: Double? = nil) -> RequestBuilder<InlineResponse2013> {
        var path = "/conferences/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "label": label,
            "start_time": startTime?.encodeToJSON(),
            "end_time": endTime?.encodeToJSON(),
            "fonenumber": fonenumber,
            "before_message": beforeMessage,
            "after_message": afterMessage,
            "max_members": maxMembers
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2013>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Update Conference
     
     - parameter id: (path) Conference id 
     - parameter label: (form) Label of conference (optional)
     - parameter startTime: (form) Start time and date of conference (optional)
     - parameter endTime: (form) End time and date of conference (optional)
     - parameter fonenumber: (form) Fonenumber to use for conference (optional)
     - parameter beforeMessage: (form) Message to play before conference start time (optional)
     - parameter afterMessage: (form) Message to play after conference end time (optional)
     - parameter maxMembers: (form) Maximum number of allowed conference attendees (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateConference_0(id id: String, label: String? = nil, startTime: NSDate? = nil, endTime: NSDate? = nil, fonenumber: BigDecimal? = nil, beforeMessage: String? = nil, afterMessage: String? = nil, maxMembers: Double? = nil, completion: ((data: InlineResponse2013?, error: ErrorType?) -> Void)) {
        updateConference_0WithRequestBuilder(id: id, label: label, startTime: startTime, endTime: endTime, fonenumber: fonenumber, beforeMessage: beforeMessage, afterMessage: afterMessage, maxMembers: maxMembers).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update Conference
     - PUT /conferences/{id}
     - Update a conference.
     - API Key:
       - type: apiKey token 
       - name: jwt
     - examples: [{contentType=application/json, example={
  "conference" : {
    "start_time" : "aeiou",
    "end_time" : "aeiou",
    "after_message" : "aeiou",
    "max_members" : 0.80082819046101150206595775671303272247314453125,
    "id" : "aeiou",
    "label" : "aeiou",
    "before_message" : "aeiou"
  }
}}]
     
     - parameter id: (path) Conference id 
     - parameter label: (form) Label of conference (optional)
     - parameter startTime: (form) Start time and date of conference (optional)
     - parameter endTime: (form) End time and date of conference (optional)
     - parameter fonenumber: (form) Fonenumber to use for conference (optional)
     - parameter beforeMessage: (form) Message to play before conference start time (optional)
     - parameter afterMessage: (form) Message to play after conference end time (optional)
     - parameter maxMembers: (form) Maximum number of allowed conference attendees (optional)

     - returns: RequestBuilder<InlineResponse2013> 
     */
    public class func updateConference_0WithRequestBuilder(id id: String, label: String? = nil, startTime: NSDate? = nil, endTime: NSDate? = nil, fonenumber: BigDecimal? = nil, beforeMessage: String? = nil, afterMessage: String? = nil, maxMembers: Double? = nil) -> RequestBuilder<InlineResponse2013> {
        var path = "/conferences/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "label": label,
            "start_time": startTime?.encodeToJSON(),
            "end_time": endTime?.encodeToJSON(),
            "fonenumber": fonenumber,
            "before_message": beforeMessage,
            "after_message": afterMessage,
            "max_members": maxMembers
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2013>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
