<?php
/**
 * EventsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FoneStorm API 2.4.0 (Thunder)
 *
 * FracTEL's Middleware API
 *
 * OpenAPI spec version: 2.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * EventsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EventsApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return EventsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createEvent
     *
     * Create Event
     *
     * @param string $id Event id (required)
     * @param string $organizer_contact_id Event organizer contact id (required)
     * @param \DateTime $start_time Event start time (required)
     * @param \DateTime $end_time Event end time (required)
     * @param string $title Event title (required)
     * @param string[] $attendees Event attendee contact ids (required)
     * @param string $description Event description (optional)
     * @param string $location Event location (optional)
     * @param string $status Event status (optional)
     * @param float $reschedule_count Event reschedule count (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2012
     */
    public function createEvent($id, $organizer_contact_id, $start_time, $end_time, $title, $attendees, $description = null, $location = null, $status = null, $reschedule_count = null)
    {
        list($response) = $this->createEventWithHttpInfo($id, $organizer_contact_id, $start_time, $end_time, $title, $attendees, $description, $location, $status, $reschedule_count);
        return $response;
    }

    /**
     * Operation createEventWithHttpInfo
     *
     * Create Event
     *
     * @param string $id Event id (required)
     * @param string $organizer_contact_id Event organizer contact id (required)
     * @param \DateTime $start_time Event start time (required)
     * @param \DateTime $end_time Event end time (required)
     * @param string $title Event title (required)
     * @param string[] $attendees Event attendee contact ids (required)
     * @param string $description Event description (optional)
     * @param string $location Event location (optional)
     * @param string $status Event status (optional)
     * @param float $reschedule_count Event reschedule count (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2012, HTTP status code, HTTP response headers (array of strings)
     */
    public function createEventWithHttpInfo($id, $organizer_contact_id, $start_time, $end_time, $title, $attendees, $description = null, $location = null, $status = null, $reschedule_count = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling createEvent');
        }
        // verify the required parameter 'organizer_contact_id' is set
        if ($organizer_contact_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organizer_contact_id when calling createEvent');
        }
        // verify the required parameter 'start_time' is set
        if ($start_time === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start_time when calling createEvent');
        }
        // verify the required parameter 'end_time' is set
        if ($end_time === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end_time when calling createEvent');
        }
        // verify the required parameter 'title' is set
        if ($title === null) {
            throw new \InvalidArgumentException('Missing the required parameter $title when calling createEvent');
        }
        if ((strlen($title) > 64)) {
            throw new \InvalidArgumentException('invalid length for "$title" when calling EventsApi.createEvent, must be smaller than or equal to 64.');
        }

        // verify the required parameter 'attendees' is set
        if ($attendees === null) {
            throw new \InvalidArgumentException('Missing the required parameter $attendees when calling createEvent');
        }
        if (!is_null($location) && (strlen($location) > 64)) {
            throw new \InvalidArgumentException('invalid length for "$location" when calling EventsApi.createEvent, must be smaller than or equal to 64.');
        }

        // parse inputs
        $resourcePath = "/events";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // form params
        if ($id !== null) {
            $formParams['id'] = $this->apiClient->getSerializer()->toFormValue($id);
        }
        // form params
        if ($organizer_contact_id !== null) {
            $formParams['organizer_contact_id'] = $this->apiClient->getSerializer()->toFormValue($organizer_contact_id);
        }
        // form params
        if ($start_time !== null) {
            $formParams['start_time'] = $this->apiClient->getSerializer()->toFormValue($start_time);
        }
        // form params
        if ($end_time !== null) {
            $formParams['end_time'] = $this->apiClient->getSerializer()->toFormValue($end_time);
        }
        // form params
        if ($title !== null) {
            $formParams['title'] = $this->apiClient->getSerializer()->toFormValue($title);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = $this->apiClient->getSerializer()->toFormValue($description);
        }
        // form params
        if ($location !== null) {
            $formParams['location'] = $this->apiClient->getSerializer()->toFormValue($location);
        }
        // form params
        if ($attendees !== null) {
            $formParams['attendees'] = $this->apiClient->getSerializer()->toFormValue($attendees);
        }
        // form params
        if ($status !== null) {
            $formParams['status'] = $this->apiClient->getSerializer()->toFormValue($status);
        }
        // form params
        if ($reschedule_count !== null) {
            $formParams['reschedule_count'] = $this->apiClient->getSerializer()->toFormValue($reschedule_count);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2012',
                '/events'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2012', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2012', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createEvent_0
     *
     * Create Event
     *
     * @param string $id Event id (required)
     * @param string $organizer_contact_id Event organizer contact id (required)
     * @param \DateTime $start_time Event start time (required)
     * @param \DateTime $end_time Event end time (required)
     * @param string $title Event title (required)
     * @param string[] $attendees Event attendee contact ids (required)
     * @param string $description Event description (optional)
     * @param string $location Event location (optional)
     * @param string $status Event status (optional)
     * @param float $reschedule_count Event reschedule count (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2012
     */
    public function createEvent_0($id, $organizer_contact_id, $start_time, $end_time, $title, $attendees, $description = null, $location = null, $status = null, $reschedule_count = null)
    {
        list($response) = $this->createEvent_0WithHttpInfo($id, $organizer_contact_id, $start_time, $end_time, $title, $attendees, $description, $location, $status, $reschedule_count);
        return $response;
    }

    /**
     * Operation createEvent_0WithHttpInfo
     *
     * Create Event
     *
     * @param string $id Event id (required)
     * @param string $organizer_contact_id Event organizer contact id (required)
     * @param \DateTime $start_time Event start time (required)
     * @param \DateTime $end_time Event end time (required)
     * @param string $title Event title (required)
     * @param string[] $attendees Event attendee contact ids (required)
     * @param string $description Event description (optional)
     * @param string $location Event location (optional)
     * @param string $status Event status (optional)
     * @param float $reschedule_count Event reschedule count (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2012, HTTP status code, HTTP response headers (array of strings)
     */
    public function createEvent_0WithHttpInfo($id, $organizer_contact_id, $start_time, $end_time, $title, $attendees, $description = null, $location = null, $status = null, $reschedule_count = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling createEvent_0');
        }
        // verify the required parameter 'organizer_contact_id' is set
        if ($organizer_contact_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organizer_contact_id when calling createEvent_0');
        }
        // verify the required parameter 'start_time' is set
        if ($start_time === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start_time when calling createEvent_0');
        }
        // verify the required parameter 'end_time' is set
        if ($end_time === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end_time when calling createEvent_0');
        }
        // verify the required parameter 'title' is set
        if ($title === null) {
            throw new \InvalidArgumentException('Missing the required parameter $title when calling createEvent_0');
        }
        if ((strlen($title) > 64)) {
            throw new \InvalidArgumentException('invalid length for "$title" when calling EventsApi.createEvent_0, must be smaller than or equal to 64.');
        }

        // verify the required parameter 'attendees' is set
        if ($attendees === null) {
            throw new \InvalidArgumentException('Missing the required parameter $attendees when calling createEvent_0');
        }
        if (!is_null($location) && (strlen($location) > 64)) {
            throw new \InvalidArgumentException('invalid length for "$location" when calling EventsApi.createEvent_0, must be smaller than or equal to 64.');
        }

        // parse inputs
        $resourcePath = "/events";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // form params
        if ($id !== null) {
            $formParams['id'] = $this->apiClient->getSerializer()->toFormValue($id);
        }
        // form params
        if ($organizer_contact_id !== null) {
            $formParams['organizer_contact_id'] = $this->apiClient->getSerializer()->toFormValue($organizer_contact_id);
        }
        // form params
        if ($start_time !== null) {
            $formParams['start_time'] = $this->apiClient->getSerializer()->toFormValue($start_time);
        }
        // form params
        if ($end_time !== null) {
            $formParams['end_time'] = $this->apiClient->getSerializer()->toFormValue($end_time);
        }
        // form params
        if ($title !== null) {
            $formParams['title'] = $this->apiClient->getSerializer()->toFormValue($title);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = $this->apiClient->getSerializer()->toFormValue($description);
        }
        // form params
        if ($location !== null) {
            $formParams['location'] = $this->apiClient->getSerializer()->toFormValue($location);
        }
        // form params
        if ($attendees !== null) {
            $formParams['attendees'] = $this->apiClient->getSerializer()->toFormValue($attendees);
        }
        // form params
        if ($status !== null) {
            $formParams['status'] = $this->apiClient->getSerializer()->toFormValue($status);
        }
        // form params
        if ($reschedule_count !== null) {
            $formParams['reschedule_count'] = $this->apiClient->getSerializer()->toFormValue($reschedule_count);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2012',
                '/events'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2012', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2012', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteEvent
     *
     * Delete Event
     *
     * @param string $id Event id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2012
     */
    public function deleteEvent($id)
    {
        list($response) = $this->deleteEventWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteEventWithHttpInfo
     *
     * Delete Event
     *
     * @param string $id Event id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2012, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEventWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteEvent');
        }
        // parse inputs
        $resourcePath = "/events/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2012',
                '/events/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2012', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2012', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteEvent_0
     *
     * Delete Event
     *
     * @param string $id Event id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2012
     */
    public function deleteEvent_0($id)
    {
        list($response) = $this->deleteEvent_0WithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteEvent_0WithHttpInfo
     *
     * Delete Event
     *
     * @param string $id Event id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2012, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEvent_0WithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteEvent_0');
        }
        // parse inputs
        $resourcePath = "/events/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2012',
                '/events/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2012', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2012', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getEvent
     *
     * Get Event
     *
     * @param string $id Event id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2012
     */
    public function getEvent($id)
    {
        list($response) = $this->getEventWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getEventWithHttpInfo
     *
     * Get Event
     *
     * @param string $id Event id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2012, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getEvent');
        }
        // parse inputs
        $resourcePath = "/events/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2012',
                '/events/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2012', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2012', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getEvent_0
     *
     * Get Event
     *
     * @param string $id Event id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2012
     */
    public function getEvent_0($id)
    {
        list($response) = $this->getEvent_0WithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getEvent_0WithHttpInfo
     *
     * Get Event
     *
     * @param string $id Event id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2012, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEvent_0WithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getEvent_0');
        }
        // parse inputs
        $resourcePath = "/events/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2012',
                '/events/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2012', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2012', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getEvents
     *
     * Get Events
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2001
     */
    public function getEvents()
    {
        list($response) = $this->getEventsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getEventsWithHttpInfo
     *
     * Get Events
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/events";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2001',
                '/events'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getEvents_0
     *
     * Get Events
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2001
     */
    public function getEvents_0()
    {
        list($response) = $this->getEvents_0WithHttpInfo();
        return $response;
    }

    /**
     * Operation getEvents_0WithHttpInfo
     *
     * Get Events
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEvents_0WithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/events";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2001',
                '/events'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateEvent
     *
     * Update Event
     *
     * @param string $id Event id (required)
     * @param string $organizer_contact_id Event organizer contact id (optional)
     * @param \DateTime $start_time Event start time (optional)
     * @param \DateTime $end_time Event end time (optional)
     * @param string $title Event title (optional)
     * @param string $description Event description (optional)
     * @param string $location Event location (optional)
     * @param string[] $attendees Event attendee contact ids (optional)
     * @param string $status Event status (optional)
     * @param float $reschedule_count Event reschedule count (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2012
     */
    public function updateEvent($id, $organizer_contact_id = null, $start_time = null, $end_time = null, $title = null, $description = null, $location = null, $attendees = null, $status = null, $reschedule_count = null)
    {
        list($response) = $this->updateEventWithHttpInfo($id, $organizer_contact_id, $start_time, $end_time, $title, $description, $location, $attendees, $status, $reschedule_count);
        return $response;
    }

    /**
     * Operation updateEventWithHttpInfo
     *
     * Update Event
     *
     * @param string $id Event id (required)
     * @param string $organizer_contact_id Event organizer contact id (optional)
     * @param \DateTime $start_time Event start time (optional)
     * @param \DateTime $end_time Event end time (optional)
     * @param string $title Event title (optional)
     * @param string $description Event description (optional)
     * @param string $location Event location (optional)
     * @param string[] $attendees Event attendee contact ids (optional)
     * @param string $status Event status (optional)
     * @param float $reschedule_count Event reschedule count (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2012, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEventWithHttpInfo($id, $organizer_contact_id = null, $start_time = null, $end_time = null, $title = null, $description = null, $location = null, $attendees = null, $status = null, $reschedule_count = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateEvent');
        }
        if (!is_null($title) && (strlen($title) > 64)) {
            throw new \InvalidArgumentException('invalid length for "$title" when calling EventsApi.updateEvent, must be smaller than or equal to 64.');
        }

        if (!is_null($location) && (strlen($location) > 64)) {
            throw new \InvalidArgumentException('invalid length for "$location" when calling EventsApi.updateEvent, must be smaller than or equal to 64.');
        }

        // parse inputs
        $resourcePath = "/events/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // form params
        if ($organizer_contact_id !== null) {
            $formParams['organizer_contact_id'] = $this->apiClient->getSerializer()->toFormValue($organizer_contact_id);
        }
        // form params
        if ($start_time !== null) {
            $formParams['start_time'] = $this->apiClient->getSerializer()->toFormValue($start_time);
        }
        // form params
        if ($end_time !== null) {
            $formParams['end_time'] = $this->apiClient->getSerializer()->toFormValue($end_time);
        }
        // form params
        if ($title !== null) {
            $formParams['title'] = $this->apiClient->getSerializer()->toFormValue($title);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = $this->apiClient->getSerializer()->toFormValue($description);
        }
        // form params
        if ($location !== null) {
            $formParams['location'] = $this->apiClient->getSerializer()->toFormValue($location);
        }
        // form params
        if ($attendees !== null) {
            $formParams['attendees'] = $this->apiClient->getSerializer()->toFormValue($attendees);
        }
        // form params
        if ($status !== null) {
            $formParams['status'] = $this->apiClient->getSerializer()->toFormValue($status);
        }
        // form params
        if ($reschedule_count !== null) {
            $formParams['reschedule_count'] = $this->apiClient->getSerializer()->toFormValue($reschedule_count);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2012',
                '/events/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2012', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2012', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateEvent_0
     *
     * Update Event
     *
     * @param string $id Event id (required)
     * @param string $organizer_contact_id Event organizer contact id (optional)
     * @param \DateTime $start_time Event start time (optional)
     * @param \DateTime $end_time Event end time (optional)
     * @param string $title Event title (optional)
     * @param string $description Event description (optional)
     * @param string $location Event location (optional)
     * @param string[] $attendees Event attendee contact ids (optional)
     * @param string $status Event status (optional)
     * @param float $reschedule_count Event reschedule count (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2012
     */
    public function updateEvent_0($id, $organizer_contact_id = null, $start_time = null, $end_time = null, $title = null, $description = null, $location = null, $attendees = null, $status = null, $reschedule_count = null)
    {
        list($response) = $this->updateEvent_0WithHttpInfo($id, $organizer_contact_id, $start_time, $end_time, $title, $description, $location, $attendees, $status, $reschedule_count);
        return $response;
    }

    /**
     * Operation updateEvent_0WithHttpInfo
     *
     * Update Event
     *
     * @param string $id Event id (required)
     * @param string $organizer_contact_id Event organizer contact id (optional)
     * @param \DateTime $start_time Event start time (optional)
     * @param \DateTime $end_time Event end time (optional)
     * @param string $title Event title (optional)
     * @param string $description Event description (optional)
     * @param string $location Event location (optional)
     * @param string[] $attendees Event attendee contact ids (optional)
     * @param string $status Event status (optional)
     * @param float $reschedule_count Event reschedule count (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2012, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEvent_0WithHttpInfo($id, $organizer_contact_id = null, $start_time = null, $end_time = null, $title = null, $description = null, $location = null, $attendees = null, $status = null, $reschedule_count = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateEvent_0');
        }
        if (!is_null($title) && (strlen($title) > 64)) {
            throw new \InvalidArgumentException('invalid length for "$title" when calling EventsApi.updateEvent_0, must be smaller than or equal to 64.');
        }

        if (!is_null($location) && (strlen($location) > 64)) {
            throw new \InvalidArgumentException('invalid length for "$location" when calling EventsApi.updateEvent_0, must be smaller than or equal to 64.');
        }

        // parse inputs
        $resourcePath = "/events/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // form params
        if ($organizer_contact_id !== null) {
            $formParams['organizer_contact_id'] = $this->apiClient->getSerializer()->toFormValue($organizer_contact_id);
        }
        // form params
        if ($start_time !== null) {
            $formParams['start_time'] = $this->apiClient->getSerializer()->toFormValue($start_time);
        }
        // form params
        if ($end_time !== null) {
            $formParams['end_time'] = $this->apiClient->getSerializer()->toFormValue($end_time);
        }
        // form params
        if ($title !== null) {
            $formParams['title'] = $this->apiClient->getSerializer()->toFormValue($title);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = $this->apiClient->getSerializer()->toFormValue($description);
        }
        // form params
        if ($location !== null) {
            $formParams['location'] = $this->apiClient->getSerializer()->toFormValue($location);
        }
        // form params
        if ($attendees !== null) {
            $formParams['attendees'] = $this->apiClient->getSerializer()->toFormValue($attendees);
        }
        // form params
        if ($status !== null) {
            $formParams['status'] = $this->apiClient->getSerializer()->toFormValue($status);
        }
        // form params
        if ($reschedule_count !== null) {
            $formParams['reschedule_count'] = $this->apiClient->getSerializer()->toFormValue($reschedule_count);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2012',
                '/events/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2012', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2012', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
