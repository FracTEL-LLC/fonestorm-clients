<?php
/**
 * ConferencesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FoneStorm API 2.4.0 (Thunder)
 *
 * FracTEL's Middleware API
 *
 * OpenAPI spec version: 2.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * ConferencesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConferencesApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return ConferencesApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createConference
     *
     * Create Conference
     *
     * @param string $label Label of conference (required)
     * @param \DateTime $start_time Start time and date of conference (optional)
     * @param \DateTime $end_time End time and date of conference (optional)
     * @param BigDecimal $fonenumber Fonenumber to use for conference (optional)
     * @param string $before_message Message to play before conference start time (optional)
     * @param string $after_message Message to play after conference end time (optional)
     * @param float $max_members Maximum number of allowed conference attendees (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2013
     */
    public function createConference($label, $start_time = null, $end_time = null, $fonenumber = null, $before_message = null, $after_message = null, $max_members = null)
    {
        list($response) = $this->createConferenceWithHttpInfo($label, $start_time, $end_time, $fonenumber, $before_message, $after_message, $max_members);
        return $response;
    }

    /**
     * Operation createConferenceWithHttpInfo
     *
     * Create Conference
     *
     * @param string $label Label of conference (required)
     * @param \DateTime $start_time Start time and date of conference (optional)
     * @param \DateTime $end_time End time and date of conference (optional)
     * @param BigDecimal $fonenumber Fonenumber to use for conference (optional)
     * @param string $before_message Message to play before conference start time (optional)
     * @param string $after_message Message to play after conference end time (optional)
     * @param float $max_members Maximum number of allowed conference attendees (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2013, HTTP status code, HTTP response headers (array of strings)
     */
    public function createConferenceWithHttpInfo($label, $start_time = null, $end_time = null, $fonenumber = null, $before_message = null, $after_message = null, $max_members = null)
    {
        // verify the required parameter 'label' is set
        if ($label === null) {
            throw new \InvalidArgumentException('Missing the required parameter $label when calling createConference');
        }
        // parse inputs
        $resourcePath = "/conferences";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // form params
        if ($label !== null) {
            $formParams['label'] = $this->apiClient->getSerializer()->toFormValue($label);
        }
        // form params
        if ($start_time !== null) {
            $formParams['start_time'] = $this->apiClient->getSerializer()->toFormValue($start_time);
        }
        // form params
        if ($end_time !== null) {
            $formParams['end_time'] = $this->apiClient->getSerializer()->toFormValue($end_time);
        }
        // form params
        if ($fonenumber !== null) {
            $formParams['fonenumber'] = $this->apiClient->getSerializer()->toFormValue($fonenumber);
        }
        // form params
        if ($before_message !== null) {
            $formParams['before_message'] = $this->apiClient->getSerializer()->toFormValue($before_message);
        }
        // form params
        if ($after_message !== null) {
            $formParams['after_message'] = $this->apiClient->getSerializer()->toFormValue($after_message);
        }
        // form params
        if ($max_members !== null) {
            $formParams['max_members'] = $this->apiClient->getSerializer()->toFormValue($max_members);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2013',
                '/conferences'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2013', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2013', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createConference_0
     *
     * Create Conference
     *
     * @param string $label Label of conference (required)
     * @param \DateTime $start_time Start time and date of conference (optional)
     * @param \DateTime $end_time End time and date of conference (optional)
     * @param BigDecimal $fonenumber Fonenumber to use for conference (optional)
     * @param string $before_message Message to play before conference start time (optional)
     * @param string $after_message Message to play after conference end time (optional)
     * @param float $max_members Maximum number of allowed conference attendees (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2013
     */
    public function createConference_0($label, $start_time = null, $end_time = null, $fonenumber = null, $before_message = null, $after_message = null, $max_members = null)
    {
        list($response) = $this->createConference_0WithHttpInfo($label, $start_time, $end_time, $fonenumber, $before_message, $after_message, $max_members);
        return $response;
    }

    /**
     * Operation createConference_0WithHttpInfo
     *
     * Create Conference
     *
     * @param string $label Label of conference (required)
     * @param \DateTime $start_time Start time and date of conference (optional)
     * @param \DateTime $end_time End time and date of conference (optional)
     * @param BigDecimal $fonenumber Fonenumber to use for conference (optional)
     * @param string $before_message Message to play before conference start time (optional)
     * @param string $after_message Message to play after conference end time (optional)
     * @param float $max_members Maximum number of allowed conference attendees (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2013, HTTP status code, HTTP response headers (array of strings)
     */
    public function createConference_0WithHttpInfo($label, $start_time = null, $end_time = null, $fonenumber = null, $before_message = null, $after_message = null, $max_members = null)
    {
        // verify the required parameter 'label' is set
        if ($label === null) {
            throw new \InvalidArgumentException('Missing the required parameter $label when calling createConference_0');
        }
        // parse inputs
        $resourcePath = "/conferences";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // form params
        if ($label !== null) {
            $formParams['label'] = $this->apiClient->getSerializer()->toFormValue($label);
        }
        // form params
        if ($start_time !== null) {
            $formParams['start_time'] = $this->apiClient->getSerializer()->toFormValue($start_time);
        }
        // form params
        if ($end_time !== null) {
            $formParams['end_time'] = $this->apiClient->getSerializer()->toFormValue($end_time);
        }
        // form params
        if ($fonenumber !== null) {
            $formParams['fonenumber'] = $this->apiClient->getSerializer()->toFormValue($fonenumber);
        }
        // form params
        if ($before_message !== null) {
            $formParams['before_message'] = $this->apiClient->getSerializer()->toFormValue($before_message);
        }
        // form params
        if ($after_message !== null) {
            $formParams['after_message'] = $this->apiClient->getSerializer()->toFormValue($after_message);
        }
        // form params
        if ($max_members !== null) {
            $formParams['max_members'] = $this->apiClient->getSerializer()->toFormValue($max_members);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2013',
                '/conferences'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2013', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2013', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteConference
     *
     * Delete Conference
     *
     * @param string $id Conference id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2013
     */
    public function deleteConference($id)
    {
        list($response) = $this->deleteConferenceWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteConferenceWithHttpInfo
     *
     * Delete Conference
     *
     * @param string $id Conference id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2013, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteConferenceWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteConference');
        }
        // parse inputs
        $resourcePath = "/conferences/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2013',
                '/conferences/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2013', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2013', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteConference_0
     *
     * Delete Conference
     *
     * @param string $id Conference id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2013
     */
    public function deleteConference_0($id)
    {
        list($response) = $this->deleteConference_0WithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteConference_0WithHttpInfo
     *
     * Delete Conference
     *
     * @param string $id Conference id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2013, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteConference_0WithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteConference_0');
        }
        // parse inputs
        $resourcePath = "/conferences/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2013',
                '/conferences/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2013', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2013', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getConference
     *
     * Get Conference
     *
     * @param string $id Conference id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2013
     */
    public function getConference($id)
    {
        list($response) = $this->getConferenceWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getConferenceWithHttpInfo
     *
     * Get Conference
     *
     * @param string $id Conference id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2013, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConferenceWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getConference');
        }
        // parse inputs
        $resourcePath = "/conferences/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2013',
                '/conferences/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2013', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2013', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getConferenceFonenumbers
     *
     * Conference Fonenumbers
     *
     * @param string $id Conference id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2002
     */
    public function getConferenceFonenumbers($id)
    {
        list($response) = $this->getConferenceFonenumbersWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getConferenceFonenumbersWithHttpInfo
     *
     * Conference Fonenumbers
     *
     * @param string $id Conference id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConferenceFonenumbersWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getConferenceFonenumbers');
        }
        // parse inputs
        $resourcePath = "/conferences/{id}/fonenumbers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2002',
                '/conferences/{id}/fonenumbers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2002', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2002', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getConferenceFonenumbers_0
     *
     * Conference Fonenumbers
     *
     * @param string $id Conference id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2002
     */
    public function getConferenceFonenumbers_0($id)
    {
        list($response) = $this->getConferenceFonenumbers_0WithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getConferenceFonenumbers_0WithHttpInfo
     *
     * Conference Fonenumbers
     *
     * @param string $id Conference id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConferenceFonenumbers_0WithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getConferenceFonenumbers_0');
        }
        // parse inputs
        $resourcePath = "/conferences/{id}/fonenumbers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2002',
                '/conferences/{id}/fonenumbers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2002', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2002', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getConference_0
     *
     * Get Conference
     *
     * @param string $id Conference id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2013
     */
    public function getConference_0($id)
    {
        list($response) = $this->getConference_0WithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getConference_0WithHttpInfo
     *
     * Get Conference
     *
     * @param string $id Conference id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2013, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConference_0WithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getConference_0');
        }
        // parse inputs
        $resourcePath = "/conferences/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2013',
                '/conferences/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2013', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2013', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getConferences
     *
     * Get Conferences
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse200
     */
    public function getConferences()
    {
        list($response) = $this->getConferencesWithHttpInfo();
        return $response;
    }

    /**
     * Operation getConferencesWithHttpInfo
     *
     * Get Conferences
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConferencesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/conferences";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/conferences'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getConferences_0
     *
     * Get Conferences
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse200
     */
    public function getConferences_0()
    {
        list($response) = $this->getConferences_0WithHttpInfo();
        return $response;
    }

    /**
     * Operation getConferences_0WithHttpInfo
     *
     * Get Conferences
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConferences_0WithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/conferences";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/conferences'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateConference
     *
     * Update Conference
     *
     * @param string $id Conference id (required)
     * @param string $label Label of conference (optional)
     * @param \DateTime $start_time Start time and date of conference (optional)
     * @param \DateTime $end_time End time and date of conference (optional)
     * @param BigDecimal $fonenumber Fonenumber to use for conference (optional)
     * @param string $before_message Message to play before conference start time (optional)
     * @param string $after_message Message to play after conference end time (optional)
     * @param float $max_members Maximum number of allowed conference attendees (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2013
     */
    public function updateConference($id, $label = null, $start_time = null, $end_time = null, $fonenumber = null, $before_message = null, $after_message = null, $max_members = null)
    {
        list($response) = $this->updateConferenceWithHttpInfo($id, $label, $start_time, $end_time, $fonenumber, $before_message, $after_message, $max_members);
        return $response;
    }

    /**
     * Operation updateConferenceWithHttpInfo
     *
     * Update Conference
     *
     * @param string $id Conference id (required)
     * @param string $label Label of conference (optional)
     * @param \DateTime $start_time Start time and date of conference (optional)
     * @param \DateTime $end_time End time and date of conference (optional)
     * @param BigDecimal $fonenumber Fonenumber to use for conference (optional)
     * @param string $before_message Message to play before conference start time (optional)
     * @param string $after_message Message to play after conference end time (optional)
     * @param float $max_members Maximum number of allowed conference attendees (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2013, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateConferenceWithHttpInfo($id, $label = null, $start_time = null, $end_time = null, $fonenumber = null, $before_message = null, $after_message = null, $max_members = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateConference');
        }
        // parse inputs
        $resourcePath = "/conferences/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // form params
        if ($label !== null) {
            $formParams['label'] = $this->apiClient->getSerializer()->toFormValue($label);
        }
        // form params
        if ($start_time !== null) {
            $formParams['start_time'] = $this->apiClient->getSerializer()->toFormValue($start_time);
        }
        // form params
        if ($end_time !== null) {
            $formParams['end_time'] = $this->apiClient->getSerializer()->toFormValue($end_time);
        }
        // form params
        if ($fonenumber !== null) {
            $formParams['fonenumber'] = $this->apiClient->getSerializer()->toFormValue($fonenumber);
        }
        // form params
        if ($before_message !== null) {
            $formParams['before_message'] = $this->apiClient->getSerializer()->toFormValue($before_message);
        }
        // form params
        if ($after_message !== null) {
            $formParams['after_message'] = $this->apiClient->getSerializer()->toFormValue($after_message);
        }
        // form params
        if ($max_members !== null) {
            $formParams['max_members'] = $this->apiClient->getSerializer()->toFormValue($max_members);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2013',
                '/conferences/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2013', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2013', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateConference_0
     *
     * Update Conference
     *
     * @param string $id Conference id (required)
     * @param string $label Label of conference (optional)
     * @param \DateTime $start_time Start time and date of conference (optional)
     * @param \DateTime $end_time End time and date of conference (optional)
     * @param BigDecimal $fonenumber Fonenumber to use for conference (optional)
     * @param string $before_message Message to play before conference start time (optional)
     * @param string $after_message Message to play after conference end time (optional)
     * @param float $max_members Maximum number of allowed conference attendees (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2013
     */
    public function updateConference_0($id, $label = null, $start_time = null, $end_time = null, $fonenumber = null, $before_message = null, $after_message = null, $max_members = null)
    {
        list($response) = $this->updateConference_0WithHttpInfo($id, $label, $start_time, $end_time, $fonenumber, $before_message, $after_message, $max_members);
        return $response;
    }

    /**
     * Operation updateConference_0WithHttpInfo
     *
     * Update Conference
     *
     * @param string $id Conference id (required)
     * @param string $label Label of conference (optional)
     * @param \DateTime $start_time Start time and date of conference (optional)
     * @param \DateTime $end_time End time and date of conference (optional)
     * @param BigDecimal $fonenumber Fonenumber to use for conference (optional)
     * @param string $before_message Message to play before conference start time (optional)
     * @param string $after_message Message to play after conference end time (optional)
     * @param float $max_members Maximum number of allowed conference attendees (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2013, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateConference_0WithHttpInfo($id, $label = null, $start_time = null, $end_time = null, $fonenumber = null, $before_message = null, $after_message = null, $max_members = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateConference_0');
        }
        // parse inputs
        $resourcePath = "/conferences/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // form params
        if ($label !== null) {
            $formParams['label'] = $this->apiClient->getSerializer()->toFormValue($label);
        }
        // form params
        if ($start_time !== null) {
            $formParams['start_time'] = $this->apiClient->getSerializer()->toFormValue($start_time);
        }
        // form params
        if ($end_time !== null) {
            $formParams['end_time'] = $this->apiClient->getSerializer()->toFormValue($end_time);
        }
        // form params
        if ($fonenumber !== null) {
            $formParams['fonenumber'] = $this->apiClient->getSerializer()->toFormValue($fonenumber);
        }
        // form params
        if ($before_message !== null) {
            $formParams['before_message'] = $this->apiClient->getSerializer()->toFormValue($before_message);
        }
        // form params
        if ($after_message !== null) {
            $formParams['after_message'] = $this->apiClient->getSerializer()->toFormValue($after_message);
        }
        // form params
        if ($max_members !== null) {
            $formParams['max_members'] = $this->apiClient->getSerializer()->toFormValue($max_members);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2013',
                '/conferences/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2013', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2013', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
