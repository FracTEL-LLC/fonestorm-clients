<?php
/**
 * ContactsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FoneStorm API 2.4.0 (Thunder)
 *
 * FracTEL's Middleware API
 *
 * OpenAPI spec version: 2.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * ContactsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContactsApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return ContactsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createContact
     *
     * Create Contact
     *
     * @param string $email Contact email address (optional)
     * @param string $first_name Contact first name (optional)
     * @param string $last_name Contact last name (optional)
     * @param bool $opt_in_call Contact opt-in for calls (optional)
     * @param bool $opt_in_email Contact opt-in for emails (optional)
     * @param bool $opt_in_fax Contact opt-in for faxes (optional)
     * @param bool $opt_in_message Contact opt-in for messages (optional)
     * @param string $phone Contact phone number (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2017
     */
    public function createContact($email = null, $first_name = null, $last_name = null, $opt_in_call = null, $opt_in_email = null, $opt_in_fax = null, $opt_in_message = null, $phone = null)
    {
        list($response) = $this->createContactWithHttpInfo($email, $first_name, $last_name, $opt_in_call, $opt_in_email, $opt_in_fax, $opt_in_message, $phone);
        return $response;
    }

    /**
     * Operation createContactWithHttpInfo
     *
     * Create Contact
     *
     * @param string $email Contact email address (optional)
     * @param string $first_name Contact first name (optional)
     * @param string $last_name Contact last name (optional)
     * @param bool $opt_in_call Contact opt-in for calls (optional)
     * @param bool $opt_in_email Contact opt-in for emails (optional)
     * @param bool $opt_in_fax Contact opt-in for faxes (optional)
     * @param bool $opt_in_message Contact opt-in for messages (optional)
     * @param string $phone Contact phone number (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2017, HTTP status code, HTTP response headers (array of strings)
     */
    public function createContactWithHttpInfo($email = null, $first_name = null, $last_name = null, $opt_in_call = null, $opt_in_email = null, $opt_in_fax = null, $opt_in_message = null, $phone = null)
    {
        if (!is_null($phone) && (strlen($phone) > 11)) {
            throw new \InvalidArgumentException('invalid length for "$phone" when calling ContactsApi.createContact, must be smaller than or equal to 11.');
        }
        if (!is_null($phone) && (strlen($phone) < 10)) {
            throw new \InvalidArgumentException('invalid length for "$phone" when calling ContactsApi.createContact, must be bigger than or equal to 10.');
        }

        // parse inputs
        $resourcePath = "/contacts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // form params
        if ($email !== null) {
            $formParams['email'] = $this->apiClient->getSerializer()->toFormValue($email);
        }
        // form params
        if ($first_name !== null) {
            $formParams['first_name'] = $this->apiClient->getSerializer()->toFormValue($first_name);
        }
        // form params
        if ($last_name !== null) {
            $formParams['last_name'] = $this->apiClient->getSerializer()->toFormValue($last_name);
        }
        // form params
        if ($opt_in_call !== null) {
            $formParams['opt_in_call'] = $this->apiClient->getSerializer()->toFormValue($opt_in_call);
        }
        // form params
        if ($opt_in_email !== null) {
            $formParams['opt_in_email'] = $this->apiClient->getSerializer()->toFormValue($opt_in_email);
        }
        // form params
        if ($opt_in_fax !== null) {
            $formParams['opt_in_fax'] = $this->apiClient->getSerializer()->toFormValue($opt_in_fax);
        }
        // form params
        if ($opt_in_message !== null) {
            $formParams['opt_in_message'] = $this->apiClient->getSerializer()->toFormValue($opt_in_message);
        }
        // form params
        if ($phone !== null) {
            $formParams['phone'] = $this->apiClient->getSerializer()->toFormValue($phone);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2017',
                '/contacts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2017', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2017', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createContact_0
     *
     * Create Contact
     *
     * @param string $email Contact email address (optional)
     * @param string $first_name Contact first name (optional)
     * @param string $last_name Contact last name (optional)
     * @param bool $opt_in_call Contact opt-in for calls (optional)
     * @param bool $opt_in_email Contact opt-in for emails (optional)
     * @param bool $opt_in_fax Contact opt-in for faxes (optional)
     * @param bool $opt_in_message Contact opt-in for messages (optional)
     * @param string $phone Contact phone number (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2017
     */
    public function createContact_0($email = null, $first_name = null, $last_name = null, $opt_in_call = null, $opt_in_email = null, $opt_in_fax = null, $opt_in_message = null, $phone = null)
    {
        list($response) = $this->createContact_0WithHttpInfo($email, $first_name, $last_name, $opt_in_call, $opt_in_email, $opt_in_fax, $opt_in_message, $phone);
        return $response;
    }

    /**
     * Operation createContact_0WithHttpInfo
     *
     * Create Contact
     *
     * @param string $email Contact email address (optional)
     * @param string $first_name Contact first name (optional)
     * @param string $last_name Contact last name (optional)
     * @param bool $opt_in_call Contact opt-in for calls (optional)
     * @param bool $opt_in_email Contact opt-in for emails (optional)
     * @param bool $opt_in_fax Contact opt-in for faxes (optional)
     * @param bool $opt_in_message Contact opt-in for messages (optional)
     * @param string $phone Contact phone number (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2017, HTTP status code, HTTP response headers (array of strings)
     */
    public function createContact_0WithHttpInfo($email = null, $first_name = null, $last_name = null, $opt_in_call = null, $opt_in_email = null, $opt_in_fax = null, $opt_in_message = null, $phone = null)
    {
        if (!is_null($phone) && (strlen($phone) > 11)) {
            throw new \InvalidArgumentException('invalid length for "$phone" when calling ContactsApi.createContact_0, must be smaller than or equal to 11.');
        }
        if (!is_null($phone) && (strlen($phone) < 10)) {
            throw new \InvalidArgumentException('invalid length for "$phone" when calling ContactsApi.createContact_0, must be bigger than or equal to 10.');
        }

        // parse inputs
        $resourcePath = "/contacts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // form params
        if ($email !== null) {
            $formParams['email'] = $this->apiClient->getSerializer()->toFormValue($email);
        }
        // form params
        if ($first_name !== null) {
            $formParams['first_name'] = $this->apiClient->getSerializer()->toFormValue($first_name);
        }
        // form params
        if ($last_name !== null) {
            $formParams['last_name'] = $this->apiClient->getSerializer()->toFormValue($last_name);
        }
        // form params
        if ($opt_in_call !== null) {
            $formParams['opt_in_call'] = $this->apiClient->getSerializer()->toFormValue($opt_in_call);
        }
        // form params
        if ($opt_in_email !== null) {
            $formParams['opt_in_email'] = $this->apiClient->getSerializer()->toFormValue($opt_in_email);
        }
        // form params
        if ($opt_in_fax !== null) {
            $formParams['opt_in_fax'] = $this->apiClient->getSerializer()->toFormValue($opt_in_fax);
        }
        // form params
        if ($opt_in_message !== null) {
            $formParams['opt_in_message'] = $this->apiClient->getSerializer()->toFormValue($opt_in_message);
        }
        // form params
        if ($phone !== null) {
            $formParams['phone'] = $this->apiClient->getSerializer()->toFormValue($phone);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2017',
                '/contacts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2017', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2017', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteContact
     *
     * Delete Contact
     *
     * @param string $id Contact id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2017
     */
    public function deleteContact($id)
    {
        list($response) = $this->deleteContactWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteContactWithHttpInfo
     *
     * Delete Contact
     *
     * @param string $id Contact id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2017, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteContactWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteContact');
        }
        // parse inputs
        $resourcePath = "/contacts/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2017',
                '/contacts/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2017', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2017', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteContact_0
     *
     * Delete Contact
     *
     * @param string $id Contact id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2017
     */
    public function deleteContact_0($id)
    {
        list($response) = $this->deleteContact_0WithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteContact_0WithHttpInfo
     *
     * Delete Contact
     *
     * @param string $id Contact id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2017, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteContact_0WithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteContact_0');
        }
        // parse inputs
        $resourcePath = "/contacts/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2017',
                '/contacts/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2017', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2017', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getContact
     *
     * Get Contact
     *
     * @param string $id Contact id (required)
     * @param bool $attributes Include all attributes (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2004
     */
    public function getContact($id, $attributes = null)
    {
        list($response) = $this->getContactWithHttpInfo($id, $attributes);
        return $response;
    }

    /**
     * Operation getContactWithHttpInfo
     *
     * Get Contact
     *
     * @param string $id Contact id (required)
     * @param bool $attributes Include all attributes (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContactWithHttpInfo($id, $attributes = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getContact');
        }
        // parse inputs
        $resourcePath = "/contacts/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded', 'application/offset+octet-stream', 'multipart/form-data']);

        // query params
        if ($attributes !== null) {
            $queryParams['attributes'] = $this->apiClient->getSerializer()->toQueryValue($attributes);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2004',
                '/contacts/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2004', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2004', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getContactEvents
     *
     * Get Contact Events
     *
     * @param string $id Contact id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2001
     */
    public function getContactEvents($id)
    {
        list($response) = $this->getContactEventsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getContactEventsWithHttpInfo
     *
     * Get Contact Events
     *
     * @param string $id Contact id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContactEventsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getContactEvents');
        }
        // parse inputs
        $resourcePath = "/contacts/{id}/events";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2001',
                '/contacts/{id}/events'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getContactEvents_0
     *
     * Get Contact Events
     *
     * @param string $id Contact id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2001
     */
    public function getContactEvents_0($id)
    {
        list($response) = $this->getContactEvents_0WithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getContactEvents_0WithHttpInfo
     *
     * Get Contact Events
     *
     * @param string $id Contact id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContactEvents_0WithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getContactEvents_0');
        }
        // parse inputs
        $resourcePath = "/contacts/{id}/events";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2001',
                '/contacts/{id}/events'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getContactSurveys
     *
     * Get Contact Surveys
     *
     * @param string $id Contact id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2003
     */
    public function getContactSurveys($id)
    {
        list($response) = $this->getContactSurveysWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getContactSurveysWithHttpInfo
     *
     * Get Contact Surveys
     *
     * @param string $id Contact id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContactSurveysWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getContactSurveys');
        }
        // parse inputs
        $resourcePath = "/contacts/{id}/surveys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2003',
                '/contacts/{id}/surveys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2003', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2003', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getContactSurveys_0
     *
     * Get Contact Surveys
     *
     * @param string $id Contact id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2003
     */
    public function getContactSurveys_0($id)
    {
        list($response) = $this->getContactSurveys_0WithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getContactSurveys_0WithHttpInfo
     *
     * Get Contact Surveys
     *
     * @param string $id Contact id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContactSurveys_0WithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getContactSurveys_0');
        }
        // parse inputs
        $resourcePath = "/contacts/{id}/surveys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2003',
                '/contacts/{id}/surveys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2003', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2003', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getContact_0
     *
     * Get Contact
     *
     * @param string $id Contact id (required)
     * @param bool $attributes Include all attributes (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2004
     */
    public function getContact_0($id, $attributes = null)
    {
        list($response) = $this->getContact_0WithHttpInfo($id, $attributes);
        return $response;
    }

    /**
     * Operation getContact_0WithHttpInfo
     *
     * Get Contact
     *
     * @param string $id Contact id (required)
     * @param bool $attributes Include all attributes (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContact_0WithHttpInfo($id, $attributes = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getContact_0');
        }
        // parse inputs
        $resourcePath = "/contacts/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded', 'application/offset+octet-stream', 'multipart/form-data']);

        // query params
        if ($attributes !== null) {
            $queryParams['attributes'] = $this->apiClient->getSerializer()->toQueryValue($attributes);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2004',
                '/contacts/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2004', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2004', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getContacts
     *
     * Get Contacts
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2004
     */
    public function getContacts()
    {
        list($response) = $this->getContactsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getContactsWithHttpInfo
     *
     * Get Contacts
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContactsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/contacts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2004',
                '/contacts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2004', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2004', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getContacts_0
     *
     * Get Contacts
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2004
     */
    public function getContacts_0()
    {
        list($response) = $this->getContacts_0WithHttpInfo();
        return $response;
    }

    /**
     * Operation getContacts_0WithHttpInfo
     *
     * Get Contacts
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContacts_0WithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/contacts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2004',
                '/contacts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2004', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2004', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateContact
     *
     * Update Contact
     *
     * @param string $id Contact id (required)
     * @param string $email Contact email address (optional)
     * @param string $first_name Contact first name (optional)
     * @param string $last_name Contact last name (optional)
     * @param bool $opt_in_call Contact opt-in for calls (optional)
     * @param bool $opt_in_email Contact opt-in for emails (optional)
     * @param bool $opt_in_fax Contact opt-in for faxes (optional)
     * @param bool $opt_in_message Contact opt-in for messages (optional)
     * @param string $phone Contact phone number (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2017
     */
    public function updateContact($id, $email = null, $first_name = null, $last_name = null, $opt_in_call = null, $opt_in_email = null, $opt_in_fax = null, $opt_in_message = null, $phone = null)
    {
        list($response) = $this->updateContactWithHttpInfo($id, $email, $first_name, $last_name, $opt_in_call, $opt_in_email, $opt_in_fax, $opt_in_message, $phone);
        return $response;
    }

    /**
     * Operation updateContactWithHttpInfo
     *
     * Update Contact
     *
     * @param string $id Contact id (required)
     * @param string $email Contact email address (optional)
     * @param string $first_name Contact first name (optional)
     * @param string $last_name Contact last name (optional)
     * @param bool $opt_in_call Contact opt-in for calls (optional)
     * @param bool $opt_in_email Contact opt-in for emails (optional)
     * @param bool $opt_in_fax Contact opt-in for faxes (optional)
     * @param bool $opt_in_message Contact opt-in for messages (optional)
     * @param string $phone Contact phone number (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2017, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateContactWithHttpInfo($id, $email = null, $first_name = null, $last_name = null, $opt_in_call = null, $opt_in_email = null, $opt_in_fax = null, $opt_in_message = null, $phone = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateContact');
        }
        if (!is_null($phone) && (strlen($phone) > 11)) {
            throw new \InvalidArgumentException('invalid length for "$phone" when calling ContactsApi.updateContact, must be smaller than or equal to 11.');
        }
        if (!is_null($phone) && (strlen($phone) < 10)) {
            throw new \InvalidArgumentException('invalid length for "$phone" when calling ContactsApi.updateContact, must be bigger than or equal to 10.');
        }

        // parse inputs
        $resourcePath = "/contacts/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // form params
        if ($email !== null) {
            $formParams['email'] = $this->apiClient->getSerializer()->toFormValue($email);
        }
        // form params
        if ($first_name !== null) {
            $formParams['first_name'] = $this->apiClient->getSerializer()->toFormValue($first_name);
        }
        // form params
        if ($last_name !== null) {
            $formParams['last_name'] = $this->apiClient->getSerializer()->toFormValue($last_name);
        }
        // form params
        if ($opt_in_call !== null) {
            $formParams['opt_in_call'] = $this->apiClient->getSerializer()->toFormValue($opt_in_call);
        }
        // form params
        if ($opt_in_email !== null) {
            $formParams['opt_in_email'] = $this->apiClient->getSerializer()->toFormValue($opt_in_email);
        }
        // form params
        if ($opt_in_fax !== null) {
            $formParams['opt_in_fax'] = $this->apiClient->getSerializer()->toFormValue($opt_in_fax);
        }
        // form params
        if ($opt_in_message !== null) {
            $formParams['opt_in_message'] = $this->apiClient->getSerializer()->toFormValue($opt_in_message);
        }
        // form params
        if ($phone !== null) {
            $formParams['phone'] = $this->apiClient->getSerializer()->toFormValue($phone);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2017',
                '/contacts/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2017', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2017', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateContact_0
     *
     * Update Contact
     *
     * @param string $id Contact id (required)
     * @param string $email Contact email address (optional)
     * @param string $first_name Contact first name (optional)
     * @param string $last_name Contact last name (optional)
     * @param bool $opt_in_call Contact opt-in for calls (optional)
     * @param bool $opt_in_email Contact opt-in for emails (optional)
     * @param bool $opt_in_fax Contact opt-in for faxes (optional)
     * @param bool $opt_in_message Contact opt-in for messages (optional)
     * @param string $phone Contact phone number (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2017
     */
    public function updateContact_0($id, $email = null, $first_name = null, $last_name = null, $opt_in_call = null, $opt_in_email = null, $opt_in_fax = null, $opt_in_message = null, $phone = null)
    {
        list($response) = $this->updateContact_0WithHttpInfo($id, $email, $first_name, $last_name, $opt_in_call, $opt_in_email, $opt_in_fax, $opt_in_message, $phone);
        return $response;
    }

    /**
     * Operation updateContact_0WithHttpInfo
     *
     * Update Contact
     *
     * @param string $id Contact id (required)
     * @param string $email Contact email address (optional)
     * @param string $first_name Contact first name (optional)
     * @param string $last_name Contact last name (optional)
     * @param bool $opt_in_call Contact opt-in for calls (optional)
     * @param bool $opt_in_email Contact opt-in for emails (optional)
     * @param bool $opt_in_fax Contact opt-in for faxes (optional)
     * @param bool $opt_in_message Contact opt-in for messages (optional)
     * @param string $phone Contact phone number (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2017, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateContact_0WithHttpInfo($id, $email = null, $first_name = null, $last_name = null, $opt_in_call = null, $opt_in_email = null, $opt_in_fax = null, $opt_in_message = null, $phone = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateContact_0');
        }
        if (!is_null($phone) && (strlen($phone) > 11)) {
            throw new \InvalidArgumentException('invalid length for "$phone" when calling ContactsApi.updateContact_0, must be smaller than or equal to 11.');
        }
        if (!is_null($phone) && (strlen($phone) < 10)) {
            throw new \InvalidArgumentException('invalid length for "$phone" when calling ContactsApi.updateContact_0, must be bigger than or equal to 10.');
        }

        // parse inputs
        $resourcePath = "/contacts/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // form params
        if ($email !== null) {
            $formParams['email'] = $this->apiClient->getSerializer()->toFormValue($email);
        }
        // form params
        if ($first_name !== null) {
            $formParams['first_name'] = $this->apiClient->getSerializer()->toFormValue($first_name);
        }
        // form params
        if ($last_name !== null) {
            $formParams['last_name'] = $this->apiClient->getSerializer()->toFormValue($last_name);
        }
        // form params
        if ($opt_in_call !== null) {
            $formParams['opt_in_call'] = $this->apiClient->getSerializer()->toFormValue($opt_in_call);
        }
        // form params
        if ($opt_in_email !== null) {
            $formParams['opt_in_email'] = $this->apiClient->getSerializer()->toFormValue($opt_in_email);
        }
        // form params
        if ($opt_in_fax !== null) {
            $formParams['opt_in_fax'] = $this->apiClient->getSerializer()->toFormValue($opt_in_fax);
        }
        // form params
        if ($opt_in_message !== null) {
            $formParams['opt_in_message'] = $this->apiClient->getSerializer()->toFormValue($opt_in_message);
        }
        // form params
        if ($phone !== null) {
            $formParams['phone'] = $this->apiClient->getSerializer()->toFormValue($phone);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $headerParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2017',
                '/contacts/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2017', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2017', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
