<?php
/**
 * Account
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FoneStorm API 2.2.0 (Breeze)
 *
 * FracTEL's Middleware API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Account Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Account implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Account';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'background_color' => 'string',
        'id' => 'string',
        'cdr_notify_url' => 'string',
        'cdr_notify_method' => 'string',
        'cdr_notify_password' => 'string',
        'cdr_notify_username' => 'string',
        'font_family' => 'string',
        'primary_color' => 'string',
        'secondary_color' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'background_color' => null,
        'id' => null,
        'cdr_notify_url' => null,
        'cdr_notify_method' => null,
        'cdr_notify_password' => null,
        'cdr_notify_username' => null,
        'font_family' => null,
        'primary_color' => null,
        'secondary_color' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'background_color' => 'background_color',
        'id' => 'id',
        'cdr_notify_url' => 'cdr_notify_url',
        'cdr_notify_method' => 'cdr_notify_method',
        'cdr_notify_password' => 'cdr_notify_password',
        'cdr_notify_username' => 'cdr_notify_username',
        'font_family' => 'font_family',
        'primary_color' => 'primary_color',
        'secondary_color' => 'secondary_color'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'background_color' => 'setBackgroundColor',
        'id' => 'setId',
        'cdr_notify_url' => 'setCdrNotifyUrl',
        'cdr_notify_method' => 'setCdrNotifyMethod',
        'cdr_notify_password' => 'setCdrNotifyPassword',
        'cdr_notify_username' => 'setCdrNotifyUsername',
        'font_family' => 'setFontFamily',
        'primary_color' => 'setPrimaryColor',
        'secondary_color' => 'setSecondaryColor'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'background_color' => 'getBackgroundColor',
        'id' => 'getId',
        'cdr_notify_url' => 'getCdrNotifyUrl',
        'cdr_notify_method' => 'getCdrNotifyMethod',
        'cdr_notify_password' => 'getCdrNotifyPassword',
        'cdr_notify_username' => 'getCdrNotifyUsername',
        'font_family' => 'getFontFamily',
        'primary_color' => 'getPrimaryColor',
        'secondary_color' => 'getSecondaryColor'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['background_color'] = isset($data['background_color']) ? $data['background_color'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['cdr_notify_url'] = isset($data['cdr_notify_url']) ? $data['cdr_notify_url'] : null;
        $this->container['cdr_notify_method'] = isset($data['cdr_notify_method']) ? $data['cdr_notify_method'] : null;
        $this->container['cdr_notify_password'] = isset($data['cdr_notify_password']) ? $data['cdr_notify_password'] : null;
        $this->container['cdr_notify_username'] = isset($data['cdr_notify_username']) ? $data['cdr_notify_username'] : null;
        $this->container['font_family'] = isset($data['font_family']) ? $data['font_family'] : null;
        $this->container['primary_color'] = isset($data['primary_color']) ? $data['primary_color'] : null;
        $this->container['secondary_color'] = isset($data['secondary_color']) ? $data['secondary_color'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets background_color
     * @return string
     */
    public function getBackgroundColor()
    {
        return $this->container['background_color'];
    }

    /**
     * Sets background_color
     * @param string $background_color Account background color.
     * @return $this
     */
    public function setBackgroundColor($background_color)
    {
        $this->container['background_color'] = $background_color;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Unique identifier of account.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets cdr_notify_url
     * @return string
     */
    public function getCdrNotifyUrl()
    {
        return $this->container['cdr_notify_url'];
    }

    /**
     * Sets cdr_notify_url
     * @param string $cdr_notify_url Call dialing record callback URL.
     * @return $this
     */
    public function setCdrNotifyUrl($cdr_notify_url)
    {
        $this->container['cdr_notify_url'] = $cdr_notify_url;

        return $this;
    }

    /**
     * Gets cdr_notify_method
     * @return string
     */
    public function getCdrNotifyMethod()
    {
        return $this->container['cdr_notify_method'];
    }

    /**
     * Sets cdr_notify_method
     * @param string $cdr_notify_method Call dialing record callback URL method.
     * @return $this
     */
    public function setCdrNotifyMethod($cdr_notify_method)
    {
        $this->container['cdr_notify_method'] = $cdr_notify_method;

        return $this;
    }

    /**
     * Gets cdr_notify_password
     * @return string
     */
    public function getCdrNotifyPassword()
    {
        return $this->container['cdr_notify_password'];
    }

    /**
     * Sets cdr_notify_password
     * @param string $cdr_notify_password Call dialing record callback URL password.
     * @return $this
     */
    public function setCdrNotifyPassword($cdr_notify_password)
    {
        $this->container['cdr_notify_password'] = $cdr_notify_password;

        return $this;
    }

    /**
     * Gets cdr_notify_username
     * @return string
     */
    public function getCdrNotifyUsername()
    {
        return $this->container['cdr_notify_username'];
    }

    /**
     * Sets cdr_notify_username
     * @param string $cdr_notify_username Call dialing record callback URL username.
     * @return $this
     */
    public function setCdrNotifyUsername($cdr_notify_username)
    {
        $this->container['cdr_notify_username'] = $cdr_notify_username;

        return $this;
    }

    /**
     * Gets font_family
     * @return string
     */
    public function getFontFamily()
    {
        return $this->container['font_family'];
    }

    /**
     * Sets font_family
     * @param string $font_family Account font family.
     * @return $this
     */
    public function setFontFamily($font_family)
    {
        $this->container['font_family'] = $font_family;

        return $this;
    }

    /**
     * Gets primary_color
     * @return string
     */
    public function getPrimaryColor()
    {
        return $this->container['primary_color'];
    }

    /**
     * Sets primary_color
     * @param string $primary_color Account primary brand color.
     * @return $this
     */
    public function setPrimaryColor($primary_color)
    {
        $this->container['primary_color'] = $primary_color;

        return $this;
    }

    /**
     * Gets secondary_color
     * @return string
     */
    public function getSecondaryColor()
    {
        return $this->container['secondary_color'];
    }

    /**
     * Sets secondary_color
     * @param string $secondary_color Account secondary brand color.
     * @return $this
     */
    public function setSecondaryColor($secondary_color)
    {
        $this->container['secondary_color'] = $secondary_color;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


