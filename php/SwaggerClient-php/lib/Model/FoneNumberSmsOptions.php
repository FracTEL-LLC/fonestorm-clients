<?php
/**
 * FoneNumberSmsOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FoneStorm API 2.4.0 (Thunder)
 *
 * FracTEL's Middleware API
 *
 * OpenAPI spec version: 2.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * FoneNumberSmsOptions Class Doc Comment
 *
 * @category    Class
 * @description SMS related properties.
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class FoneNumberSmsOptions implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'FoneNumber_sms_options';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'receive' => '\Swagger\Client\Model\FoneNumberSmsOptionsReceive',
        'receive_notify' => '\Swagger\Client\Model\FoneNumberSmsOptionsReceiveNotify',
        'send_notify' => '\Swagger\Client\Model\FoneNumberSmsOptionsSendNotify',
        'sms_enabled' => 'string',
        'mms_enabled' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'receive' => null,
        'receive_notify' => null,
        'send_notify' => null,
        'sms_enabled' => null,
        'mms_enabled' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'receive' => 'receive',
        'receive_notify' => 'receive_notify',
        'send_notify' => 'send_notify',
        'sms_enabled' => 'sms_enabled',
        'mms_enabled' => 'mms_enabled'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'receive' => 'setReceive',
        'receive_notify' => 'setReceiveNotify',
        'send_notify' => 'setSendNotify',
        'sms_enabled' => 'setSmsEnabled',
        'mms_enabled' => 'setMmsEnabled'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'receive' => 'getReceive',
        'receive_notify' => 'getReceiveNotify',
        'send_notify' => 'getSendNotify',
        'sms_enabled' => 'getSmsEnabled',
        'mms_enabled' => 'getMmsEnabled'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['receive'] = isset($data['receive']) ? $data['receive'] : null;
        $this->container['receive_notify'] = isset($data['receive_notify']) ? $data['receive_notify'] : null;
        $this->container['send_notify'] = isset($data['send_notify']) ? $data['send_notify'] : null;
        $this->container['sms_enabled'] = isset($data['sms_enabled']) ? $data['sms_enabled'] : null;
        $this->container['mms_enabled'] = isset($data['mms_enabled']) ? $data['mms_enabled'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets receive
     * @return \Swagger\Client\Model\FoneNumberSmsOptionsReceive
     */
    public function getReceive()
    {
        return $this->container['receive'];
    }

    /**
     * Sets receive
     * @param \Swagger\Client\Model\FoneNumberSmsOptionsReceive $receive
     * @return $this
     */
    public function setReceive($receive)
    {
        $this->container['receive'] = $receive;

        return $this;
    }

    /**
     * Gets receive_notify
     * @return \Swagger\Client\Model\FoneNumberSmsOptionsReceiveNotify
     */
    public function getReceiveNotify()
    {
        return $this->container['receive_notify'];
    }

    /**
     * Sets receive_notify
     * @param \Swagger\Client\Model\FoneNumberSmsOptionsReceiveNotify $receive_notify
     * @return $this
     */
    public function setReceiveNotify($receive_notify)
    {
        $this->container['receive_notify'] = $receive_notify;

        return $this;
    }

    /**
     * Gets send_notify
     * @return \Swagger\Client\Model\FoneNumberSmsOptionsSendNotify
     */
    public function getSendNotify()
    {
        return $this->container['send_notify'];
    }

    /**
     * Sets send_notify
     * @param \Swagger\Client\Model\FoneNumberSmsOptionsSendNotify $send_notify
     * @return $this
     */
    public function setSendNotify($send_notify)
    {
        $this->container['send_notify'] = $send_notify;

        return $this;
    }

    /**
     * Gets sms_enabled
     * @return string
     */
    public function getSmsEnabled()
    {
        return $this->container['sms_enabled'];
    }

    /**
     * Sets sms_enabled
     * @param string $sms_enabled SMS service is enabled for FoneNumber.
     * @return $this
     */
    public function setSmsEnabled($sms_enabled)
    {
        $this->container['sms_enabled'] = $sms_enabled;

        return $this;
    }

    /**
     * Gets mms_enabled
     * @return string
     */
    public function getMmsEnabled()
    {
        return $this->container['mms_enabled'];
    }

    /**
     * Sets mms_enabled
     * @param string $mms_enabled MMS service is enabled for FoneNumber.
     * @return $this
     */
    public function setMmsEnabled($mms_enabled)
    {
        $this->container['mms_enabled'] = $mms_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


