<?php
/**
 * FoneNumber
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FoneStorm API 2.2.0 (Breeze)
 *
 * FracTEL's Middleware API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * FoneNumber Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class FoneNumber implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'FoneNumber';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'fonenumber' => 'string',
        'state' => 'string',
        'rate_center' => 'string',
        'is_active' => 'string',
        'sms_options' => '\Swagger\Client\Model\FoneNumberSmsOptions',
        'voice_options' => '\Swagger\Client\Model\FoneNumberVoiceOptions',
        'fax_options' => '\Swagger\Client\Model\FoneNumberFaxOptions'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'fonenumber' => null,
        'state' => null,
        'rate_center' => null,
        'is_active' => null,
        'sms_options' => null,
        'voice_options' => null,
        'fax_options' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'fonenumber' => 'fonenumber',
        'state' => 'state',
        'rate_center' => 'rate_center',
        'is_active' => 'is_active',
        'sms_options' => 'sms_options',
        'voice_options' => 'voice_options',
        'fax_options' => 'fax_options'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'fonenumber' => 'setFonenumber',
        'state' => 'setState',
        'rate_center' => 'setRateCenter',
        'is_active' => 'setIsActive',
        'sms_options' => 'setSmsOptions',
        'voice_options' => 'setVoiceOptions',
        'fax_options' => 'setFaxOptions'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'fonenumber' => 'getFonenumber',
        'state' => 'getState',
        'rate_center' => 'getRateCenter',
        'is_active' => 'getIsActive',
        'sms_options' => 'getSmsOptions',
        'voice_options' => 'getVoiceOptions',
        'fax_options' => 'getFaxOptions'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fonenumber'] = isset($data['fonenumber']) ? $data['fonenumber'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['rate_center'] = isset($data['rate_center']) ? $data['rate_center'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['sms_options'] = isset($data['sms_options']) ? $data['sms_options'] : null;
        $this->container['voice_options'] = isset($data['voice_options']) ? $data['voice_options'] : null;
        $this->container['fax_options'] = isset($data['fax_options']) ? $data['fax_options'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['fonenumber'] === null) {
            $invalid_properties[] = "'fonenumber' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['fonenumber'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets fonenumber
     * @return string
     */
    public function getFonenumber()
    {
        return $this->container['fonenumber'];
    }

    /**
     * Sets fonenumber
     * @param string $fonenumber FoneNumber.
     * @return $this
     */
    public function setFonenumber($fonenumber)
    {
        $this->container['fonenumber'] = $fonenumber;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state US State for fonenumber.
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets rate_center
     * @return string
     */
    public function getRateCenter()
    {
        return $this->container['rate_center'];
    }

    /**
     * Sets rate_center
     * @param string $rate_center Rate center for fonenumber.
     * @return $this
     */
    public function setRateCenter($rate_center)
    {
        $this->container['rate_center'] = $rate_center;

        return $this;
    }

    /**
     * Gets is_active
     * @return string
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     * @param string $is_active Status of FoneNumber.
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets sms_options
     * @return \Swagger\Client\Model\FoneNumberSmsOptions
     */
    public function getSmsOptions()
    {
        return $this->container['sms_options'];
    }

    /**
     * Sets sms_options
     * @param \Swagger\Client\Model\FoneNumberSmsOptions $sms_options
     * @return $this
     */
    public function setSmsOptions($sms_options)
    {
        $this->container['sms_options'] = $sms_options;

        return $this;
    }

    /**
     * Gets voice_options
     * @return \Swagger\Client\Model\FoneNumberVoiceOptions
     */
    public function getVoiceOptions()
    {
        return $this->container['voice_options'];
    }

    /**
     * Sets voice_options
     * @param \Swagger\Client\Model\FoneNumberVoiceOptions $voice_options
     * @return $this
     */
    public function setVoiceOptions($voice_options)
    {
        $this->container['voice_options'] = $voice_options;

        return $this;
    }

    /**
     * Gets fax_options
     * @return \Swagger\Client\Model\FoneNumberFaxOptions
     */
    public function getFaxOptions()
    {
        return $this->container['fax_options'];
    }

    /**
     * Sets fax_options
     * @param \Swagger\Client\Model\FoneNumberFaxOptions $fax_options
     * @return $this
     */
    public function setFaxOptions($fax_options)
    {
        $this->container['fax_options'] = $fax_options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


