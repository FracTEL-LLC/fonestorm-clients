<?php
/**
 * Contact
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FoneStorm API 2.2.0 (Breeze)
 *
 * FracTEL's Middleware API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Contact Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Contact implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Contact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'attributes' => 'object',
        'created_at' => 'string',
        'email' => 'string',
        'full_name' => 'string',
        'first_name' => 'string',
        'id' => 'string',
        'last_name' => 'string',
        'opt_in_call' => 'string',
        'opt_in_email' => 'string',
        'opt_in_fax' => 'string',
        'opt_in_message' => 'string',
        'phone' => 'string',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'attributes' => null,
        'created_at' => null,
        'email' => null,
        'full_name' => null,
        'first_name' => null,
        'id' => null,
        'last_name' => null,
        'opt_in_call' => null,
        'opt_in_email' => null,
        'opt_in_fax' => null,
        'opt_in_message' => null,
        'phone' => null,
        'updated_at' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'account_id',
        'attributes' => 'attributes',
        'created_at' => 'created_at',
        'email' => 'email',
        'full_name' => 'full_name',
        'first_name' => 'first_name',
        'id' => 'id',
        'last_name' => 'last_name',
        'opt_in_call' => 'opt_in_call',
        'opt_in_email' => 'opt_in_email',
        'opt_in_fax' => 'opt_in_fax',
        'opt_in_message' => 'opt_in_message',
        'phone' => 'phone',
        'updated_at' => 'updated_at'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'attributes' => 'setAttributes',
        'created_at' => 'setCreatedAt',
        'email' => 'setEmail',
        'full_name' => 'setFullName',
        'first_name' => 'setFirstName',
        'id' => 'setId',
        'last_name' => 'setLastName',
        'opt_in_call' => 'setOptInCall',
        'opt_in_email' => 'setOptInEmail',
        'opt_in_fax' => 'setOptInFax',
        'opt_in_message' => 'setOptInMessage',
        'phone' => 'setPhone',
        'updated_at' => 'setUpdatedAt'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'attributes' => 'getAttributes',
        'created_at' => 'getCreatedAt',
        'email' => 'getEmail',
        'full_name' => 'getFullName',
        'first_name' => 'getFirstName',
        'id' => 'getId',
        'last_name' => 'getLastName',
        'opt_in_call' => 'getOptInCall',
        'opt_in_email' => 'getOptInEmail',
        'opt_in_fax' => 'getOptInFax',
        'opt_in_message' => 'getOptInMessage',
        'phone' => 'getPhone',
        'updated_at' => 'getUpdatedAt'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['full_name'] = isset($data['full_name']) ? $data['full_name'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['opt_in_call'] = isset($data['opt_in_call']) ? $data['opt_in_call'] : null;
        $this->container['opt_in_email'] = isset($data['opt_in_email']) ? $data['opt_in_email'] : null;
        $this->container['opt_in_fax'] = isset($data['opt_in_fax']) ? $data['opt_in_fax'] : null;
        $this->container['opt_in_message'] = isset($data['opt_in_message']) ? $data['opt_in_message'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets account_id
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     * @param string $account_id Associated account identifier.
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets attributes
     * @return object
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     * @param object $attributes An array of contact attributes.
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets created_at
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param string $created_at Time of record creation.
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email Email address.
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets full_name
     * @return string
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     * @param string $full_name Full name.
     * @return $this
     */
    public function setFullName($full_name)
    {
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     * @param string $first_name First name.
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Unique identifier of contact.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     * @param string $last_name Last name.
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets opt_in_call
     * @return string
     */
    public function getOptInCall()
    {
        return $this->container['opt_in_call'];
    }

    /**
     * Sets opt_in_call
     * @param string $opt_in_call Opt-in perference for receiving calls.
     * @return $this
     */
    public function setOptInCall($opt_in_call)
    {
        $this->container['opt_in_call'] = $opt_in_call;

        return $this;
    }

    /**
     * Gets opt_in_email
     * @return string
     */
    public function getOptInEmail()
    {
        return $this->container['opt_in_email'];
    }

    /**
     * Sets opt_in_email
     * @param string $opt_in_email Opt-in perference for receiving emails.
     * @return $this
     */
    public function setOptInEmail($opt_in_email)
    {
        $this->container['opt_in_email'] = $opt_in_email;

        return $this;
    }

    /**
     * Gets opt_in_fax
     * @return string
     */
    public function getOptInFax()
    {
        return $this->container['opt_in_fax'];
    }

    /**
     * Sets opt_in_fax
     * @param string $opt_in_fax Opt-in perference for receiving faxes.
     * @return $this
     */
    public function setOptInFax($opt_in_fax)
    {
        $this->container['opt_in_fax'] = $opt_in_fax;

        return $this;
    }

    /**
     * Gets opt_in_message
     * @return string
     */
    public function getOptInMessage()
    {
        return $this->container['opt_in_message'];
    }

    /**
     * Sets opt_in_message
     * @param string $opt_in_message Opt-in perference for receiving messages.
     * @return $this
     */
    public function setOptInMessage($opt_in_message)
    {
        $this->container['opt_in_message'] = $opt_in_message;

        return $this;
    }

    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     * @param string $phone Phone number.
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets updated_at
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param string $updated_at Time of last record update.
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


