# coding: utf-8

"""
    FoneStorm API 2.2.0 (Breeze)

    FracTEL's Middleware API

    OpenAPI spec version: 2.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Document(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'account_id': 'str',
        'file_extension': 'str',
        'mime_type': 'str',
        'url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'account_id': 'account_id',
        'file_extension': 'file_extension',
        'mime_type': 'mime_type',
        'url': 'url'
    }

    def __init__(self, id=None, account_id=None, file_extension=None, mime_type=None, url=None):
        """
        Document - a model defined in Swagger
        """

        self._id = None
        self._account_id = None
        self._file_extension = None
        self._mime_type = None
        self._url = None

        self.id = id
        if account_id is not None:
          self.account_id = account_id
        if file_extension is not None:
          self.file_extension = file_extension
        if mime_type is not None:
          self.mime_type = mime_type
        if url is not None:
          self.url = url

    @property
    def id(self):
        """
        Gets the id of this Document.
        Unique identifier of list.

        :return: The id of this Document.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Document.
        Unique identifier of list.

        :param id: The id of this Document.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def account_id(self):
        """
        Gets the account_id of this Document.
        Unique identifier of associated account.

        :return: The account_id of this Document.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this Document.
        Unique identifier of associated account.

        :param account_id: The account_id of this Document.
        :type: str
        """

        self._account_id = account_id

    @property
    def file_extension(self):
        """
        Gets the file_extension of this Document.
        File extension.

        :return: The file_extension of this Document.
        :rtype: str
        """
        return self._file_extension

    @file_extension.setter
    def file_extension(self, file_extension):
        """
        Sets the file_extension of this Document.
        File extension.

        :param file_extension: The file_extension of this Document.
        :type: str
        """

        self._file_extension = file_extension

    @property
    def mime_type(self):
        """
        Gets the mime_type of this Document.
        Mime type of file.

        :return: The mime_type of this Document.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """
        Sets the mime_type of this Document.
        Mime type of file.

        :param mime_type: The mime_type of this Document.
        :type: str
        """

        self._mime_type = mime_type

    @property
    def url(self):
        """
        Gets the url of this Document.
        HTTP url to download file.

        :return: The url of this Document.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this Document.
        HTTP url to download file.

        :param url: The url of this Document.
        :type: str
        """

        self._url = url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Document):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
