# coding: utf-8

"""
    FoneStorm API 2.4.0 (Thunder)

    FracTEL's Middleware API

    OpenAPI spec version: 2.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FoneNumberSmsOptions(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'receive': 'FoneNumberSmsOptionsReceive',
        'receive_notify': 'FoneNumberSmsOptionsReceiveNotify',
        'send_notify': 'FoneNumberSmsOptionsSendNotify',
        'sms_enabled': 'str',
        'mms_enabled': 'str'
    }

    attribute_map = {
        'receive': 'receive',
        'receive_notify': 'receive_notify',
        'send_notify': 'send_notify',
        'sms_enabled': 'sms_enabled',
        'mms_enabled': 'mms_enabled'
    }

    def __init__(self, receive=None, receive_notify=None, send_notify=None, sms_enabled=None, mms_enabled=None):
        """
        FoneNumberSmsOptions - a model defined in Swagger
        """

        self._receive = None
        self._receive_notify = None
        self._send_notify = None
        self._sms_enabled = None
        self._mms_enabled = None

        if receive is not None:
          self.receive = receive
        if receive_notify is not None:
          self.receive_notify = receive_notify
        if send_notify is not None:
          self.send_notify = send_notify
        if sms_enabled is not None:
          self.sms_enabled = sms_enabled
        if mms_enabled is not None:
          self.mms_enabled = mms_enabled

    @property
    def receive(self):
        """
        Gets the receive of this FoneNumberSmsOptions.

        :return: The receive of this FoneNumberSmsOptions.
        :rtype: FoneNumberSmsOptionsReceive
        """
        return self._receive

    @receive.setter
    def receive(self, receive):
        """
        Sets the receive of this FoneNumberSmsOptions.

        :param receive: The receive of this FoneNumberSmsOptions.
        :type: FoneNumberSmsOptionsReceive
        """

        self._receive = receive

    @property
    def receive_notify(self):
        """
        Gets the receive_notify of this FoneNumberSmsOptions.

        :return: The receive_notify of this FoneNumberSmsOptions.
        :rtype: FoneNumberSmsOptionsReceiveNotify
        """
        return self._receive_notify

    @receive_notify.setter
    def receive_notify(self, receive_notify):
        """
        Sets the receive_notify of this FoneNumberSmsOptions.

        :param receive_notify: The receive_notify of this FoneNumberSmsOptions.
        :type: FoneNumberSmsOptionsReceiveNotify
        """

        self._receive_notify = receive_notify

    @property
    def send_notify(self):
        """
        Gets the send_notify of this FoneNumberSmsOptions.

        :return: The send_notify of this FoneNumberSmsOptions.
        :rtype: FoneNumberSmsOptionsSendNotify
        """
        return self._send_notify

    @send_notify.setter
    def send_notify(self, send_notify):
        """
        Sets the send_notify of this FoneNumberSmsOptions.

        :param send_notify: The send_notify of this FoneNumberSmsOptions.
        :type: FoneNumberSmsOptionsSendNotify
        """

        self._send_notify = send_notify

    @property
    def sms_enabled(self):
        """
        Gets the sms_enabled of this FoneNumberSmsOptions.
        SMS service is enabled for FoneNumber.

        :return: The sms_enabled of this FoneNumberSmsOptions.
        :rtype: str
        """
        return self._sms_enabled

    @sms_enabled.setter
    def sms_enabled(self, sms_enabled):
        """
        Sets the sms_enabled of this FoneNumberSmsOptions.
        SMS service is enabled for FoneNumber.

        :param sms_enabled: The sms_enabled of this FoneNumberSmsOptions.
        :type: str
        """

        self._sms_enabled = sms_enabled

    @property
    def mms_enabled(self):
        """
        Gets the mms_enabled of this FoneNumberSmsOptions.
        MMS service is enabled for FoneNumber.

        :return: The mms_enabled of this FoneNumberSmsOptions.
        :rtype: str
        """
        return self._mms_enabled

    @mms_enabled.setter
    def mms_enabled(self, mms_enabled):
        """
        Sets the mms_enabled of this FoneNumberSmsOptions.
        MMS service is enabled for FoneNumber.

        :param mms_enabled: The mms_enabled of this FoneNumberSmsOptions.
        :type: str
        """

        self._mms_enabled = mms_enabled

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FoneNumberSmsOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
