# coding: utf-8

"""
    FoneStorm API 2.4.0 (Thunder)

    FracTEL's Middleware API

    OpenAPI spec version: 2.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Account(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'background_color': 'str',
        'id': 'str',
        'cdr_notify_url': 'str',
        'cdr_notify_method': 'str',
        'cdr_notify_password': 'str',
        'cdr_notify_username': 'str',
        'font_family': 'str',
        'primary_color': 'str',
        'secondary_color': 'str'
    }

    attribute_map = {
        'background_color': 'background_color',
        'id': 'id',
        'cdr_notify_url': 'cdr_notify_url',
        'cdr_notify_method': 'cdr_notify_method',
        'cdr_notify_password': 'cdr_notify_password',
        'cdr_notify_username': 'cdr_notify_username',
        'font_family': 'font_family',
        'primary_color': 'primary_color',
        'secondary_color': 'secondary_color'
    }

    def __init__(self, background_color=None, id=None, cdr_notify_url=None, cdr_notify_method=None, cdr_notify_password=None, cdr_notify_username=None, font_family=None, primary_color=None, secondary_color=None):
        """
        Account - a model defined in Swagger
        """

        self._background_color = None
        self._id = None
        self._cdr_notify_url = None
        self._cdr_notify_method = None
        self._cdr_notify_password = None
        self._cdr_notify_username = None
        self._font_family = None
        self._primary_color = None
        self._secondary_color = None

        if background_color is not None:
          self.background_color = background_color
        self.id = id
        if cdr_notify_url is not None:
          self.cdr_notify_url = cdr_notify_url
        if cdr_notify_method is not None:
          self.cdr_notify_method = cdr_notify_method
        if cdr_notify_password is not None:
          self.cdr_notify_password = cdr_notify_password
        if cdr_notify_username is not None:
          self.cdr_notify_username = cdr_notify_username
        if font_family is not None:
          self.font_family = font_family
        if primary_color is not None:
          self.primary_color = primary_color
        if secondary_color is not None:
          self.secondary_color = secondary_color

    @property
    def background_color(self):
        """
        Gets the background_color of this Account.
        Account background color.

        :return: The background_color of this Account.
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """
        Sets the background_color of this Account.
        Account background color.

        :param background_color: The background_color of this Account.
        :type: str
        """

        self._background_color = background_color

    @property
    def id(self):
        """
        Gets the id of this Account.
        Unique identifier of account.

        :return: The id of this Account.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Account.
        Unique identifier of account.

        :param id: The id of this Account.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def cdr_notify_url(self):
        """
        Gets the cdr_notify_url of this Account.
        Call dialing record callback URL.

        :return: The cdr_notify_url of this Account.
        :rtype: str
        """
        return self._cdr_notify_url

    @cdr_notify_url.setter
    def cdr_notify_url(self, cdr_notify_url):
        """
        Sets the cdr_notify_url of this Account.
        Call dialing record callback URL.

        :param cdr_notify_url: The cdr_notify_url of this Account.
        :type: str
        """

        self._cdr_notify_url = cdr_notify_url

    @property
    def cdr_notify_method(self):
        """
        Gets the cdr_notify_method of this Account.
        Call dialing record callback URL method.

        :return: The cdr_notify_method of this Account.
        :rtype: str
        """
        return self._cdr_notify_method

    @cdr_notify_method.setter
    def cdr_notify_method(self, cdr_notify_method):
        """
        Sets the cdr_notify_method of this Account.
        Call dialing record callback URL method.

        :param cdr_notify_method: The cdr_notify_method of this Account.
        :type: str
        """

        self._cdr_notify_method = cdr_notify_method

    @property
    def cdr_notify_password(self):
        """
        Gets the cdr_notify_password of this Account.
        Call dialing record callback URL password.

        :return: The cdr_notify_password of this Account.
        :rtype: str
        """
        return self._cdr_notify_password

    @cdr_notify_password.setter
    def cdr_notify_password(self, cdr_notify_password):
        """
        Sets the cdr_notify_password of this Account.
        Call dialing record callback URL password.

        :param cdr_notify_password: The cdr_notify_password of this Account.
        :type: str
        """

        self._cdr_notify_password = cdr_notify_password

    @property
    def cdr_notify_username(self):
        """
        Gets the cdr_notify_username of this Account.
        Call dialing record callback URL username.

        :return: The cdr_notify_username of this Account.
        :rtype: str
        """
        return self._cdr_notify_username

    @cdr_notify_username.setter
    def cdr_notify_username(self, cdr_notify_username):
        """
        Sets the cdr_notify_username of this Account.
        Call dialing record callback URL username.

        :param cdr_notify_username: The cdr_notify_username of this Account.
        :type: str
        """

        self._cdr_notify_username = cdr_notify_username

    @property
    def font_family(self):
        """
        Gets the font_family of this Account.
        Account font family.

        :return: The font_family of this Account.
        :rtype: str
        """
        return self._font_family

    @font_family.setter
    def font_family(self, font_family):
        """
        Sets the font_family of this Account.
        Account font family.

        :param font_family: The font_family of this Account.
        :type: str
        """

        self._font_family = font_family

    @property
    def primary_color(self):
        """
        Gets the primary_color of this Account.
        Account primary brand color.

        :return: The primary_color of this Account.
        :rtype: str
        """
        return self._primary_color

    @primary_color.setter
    def primary_color(self, primary_color):
        """
        Sets the primary_color of this Account.
        Account primary brand color.

        :param primary_color: The primary_color of this Account.
        :type: str
        """

        self._primary_color = primary_color

    @property
    def secondary_color(self):
        """
        Gets the secondary_color of this Account.
        Account secondary brand color.

        :return: The secondary_color of this Account.
        :rtype: str
        """
        return self._secondary_color

    @secondary_color.setter
    def secondary_color(self, secondary_color):
        """
        Sets the secondary_color of this Account.
        Account secondary brand color.

        :param secondary_color: The secondary_color of this Account.
        :type: str
        """

        self._secondary_color = secondary_color

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Account):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
