# coding: utf-8

"""
    FoneStorm API 2.2.0 (Breeze)

    FracTEL's Middleware API

    OpenAPI spec version: 2.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Event(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'attendees': 'list[ERRORUNKNOWN]',
        'created_at': 'str',
        'description': 'str',
        'end_time': 'str',
        'id': 'str',
        'location': 'str',
        'reschedule_count': 'int',
        'status': 'str',
        'start_time': 'str',
        'title': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'account_id': 'account_id',
        'attendees': 'attendees',
        'created_at': 'created_at',
        'description': 'description',
        'end_time': 'end_time',
        'id': 'id',
        'location': 'location',
        'reschedule_count': 'reschedule_count',
        'status': 'status',
        'start_time': 'start_time',
        'title': 'title',
        'updated_at': 'updated_at'
    }

    def __init__(self, account_id=None, attendees=None, created_at=None, description=None, end_time=None, id=None, location=None, reschedule_count=None, status=None, start_time=None, title=None, updated_at=None):
        """
        Event - a model defined in Swagger
        """

        self._account_id = None
        self._attendees = None
        self._created_at = None
        self._description = None
        self._end_time = None
        self._id = None
        self._location = None
        self._reschedule_count = None
        self._status = None
        self._start_time = None
        self._title = None
        self._updated_at = None

        if account_id is not None:
          self.account_id = account_id
        if attendees is not None:
          self.attendees = attendees
        if created_at is not None:
          self.created_at = created_at
        if description is not None:
          self.description = description
        if end_time is not None:
          self.end_time = end_time
        self.id = id
        if location is not None:
          self.location = location
        if reschedule_count is not None:
          self.reschedule_count = reschedule_count
        if status is not None:
          self.status = status
        if start_time is not None:
          self.start_time = start_time
        if title is not None:
          self.title = title
        if updated_at is not None:
          self.updated_at = updated_at

    @property
    def account_id(self):
        """
        Gets the account_id of this Event.
        Identifier of associated account.

        :return: The account_id of this Event.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this Event.
        Identifier of associated account.

        :param account_id: The account_id of this Event.
        :type: str
        """

        self._account_id = account_id

    @property
    def attendees(self):
        """
        Gets the attendees of this Event.
        Array of attendee Contact objects.

        :return: The attendees of this Event.
        :rtype: list[ERRORUNKNOWN]
        """
        return self._attendees

    @attendees.setter
    def attendees(self, attendees):
        """
        Sets the attendees of this Event.
        Array of attendee Contact objects.

        :param attendees: The attendees of this Event.
        :type: list[ERRORUNKNOWN]
        """

        self._attendees = attendees

    @property
    def created_at(self):
        """
        Gets the created_at of this Event.
        Date and time of creation.

        :return: The created_at of this Event.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Event.
        Date and time of creation.

        :param created_at: The created_at of this Event.
        :type: str
        """

        self._created_at = created_at

    @property
    def description(self):
        """
        Gets the description of this Event.
        Description of event.

        :return: The description of this Event.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Event.
        Description of event.

        :param description: The description of this Event.
        :type: str
        """

        self._description = description

    @property
    def end_time(self):
        """
        Gets the end_time of this Event.
        End date and time.

        :return: The end_time of this Event.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """
        Sets the end_time of this Event.
        End date and time.

        :param end_time: The end_time of this Event.
        :type: str
        """

        self._end_time = end_time

    @property
    def id(self):
        """
        Gets the id of this Event.
        Unique identifier of event.

        :return: The id of this Event.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Event.
        Unique identifier of event.

        :param id: The id of this Event.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def location(self):
        """
        Gets the location of this Event.
        Location of event.

        :return: The location of this Event.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this Event.
        Location of event.

        :param location: The location of this Event.
        :type: str
        """

        self._location = location

    @property
    def reschedule_count(self):
        """
        Gets the reschedule_count of this Event.
        Reschedule count of event.

        :return: The reschedule_count of this Event.
        :rtype: int
        """
        return self._reschedule_count

    @reschedule_count.setter
    def reschedule_count(self, reschedule_count):
        """
        Sets the reschedule_count of this Event.
        Reschedule count of event.

        :param reschedule_count: The reschedule_count of this Event.
        :type: int
        """

        self._reschedule_count = reschedule_count

    @property
    def status(self):
        """
        Gets the status of this Event.
        Status of event.

        :return: The status of this Event.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Event.
        Status of event.

        :param status: The status of this Event.
        :type: str
        """

        self._status = status

    @property
    def start_time(self):
        """
        Gets the start_time of this Event.
        Start date and time.

        :return: The start_time of this Event.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this Event.
        Start date and time.

        :param start_time: The start_time of this Event.
        :type: str
        """

        self._start_time = start_time

    @property
    def title(self):
        """
        Gets the title of this Event.
        Title of event.

        :return: The title of this Event.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this Event.
        Title of event.

        :param title: The title of this Event.
        :type: str
        """

        self._title = title

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Event.
        Date and time of last update.

        :return: The updated_at of this Event.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Event.
        Date and time of last update.

        :param updated_at: The updated_at of this Event.
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Event):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
