# coding: utf-8

"""
    FoneStorm API 2.4.0 (Thunder)

    FracTEL's Middleware API

    OpenAPI spec version: 2.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FoneNumberSmsOptionsReceive(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'email': 'str',
        'device': 'str',
        'forward': 'str',
        'url': 'str',
        'url_method': 'str'
    }

    attribute_map = {
        'type': 'type',
        'email': 'email',
        'device': 'device',
        'forward': 'forward',
        'url': 'url',
        'url_method': 'url_method'
    }

    def __init__(self, type=None, email=None, device=None, forward=None, url=None, url_method=None):
        """
        FoneNumberSmsOptionsReceive - a model defined in Swagger
        """

        self._type = None
        self._email = None
        self._device = None
        self._forward = None
        self._url = None
        self._url_method = None

        if type is not None:
          self.type = type
        if email is not None:
          self.email = email
        if device is not None:
          self.device = device
        if forward is not None:
          self.forward = forward
        if url is not None:
          self.url = url
        if url_method is not None:
          self.url_method = url_method

    @property
    def type(self):
        """
        Gets the type of this FoneNumberSmsOptionsReceive.
        Configured service type.

        :return: The type of this FoneNumberSmsOptionsReceive.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this FoneNumberSmsOptionsReceive.
        Configured service type.

        :param type: The type of this FoneNumberSmsOptionsReceive.
        :type: str
        """

        self._type = type

    @property
    def email(self):
        """
        Gets the email of this FoneNumberSmsOptionsReceive.
        Email address if configured for email.

        :return: The email of this FoneNumberSmsOptionsReceive.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this FoneNumberSmsOptionsReceive.
        Email address if configured for email.

        :param email: The email of this FoneNumberSmsOptionsReceive.
        :type: str
        """

        self._email = email

    @property
    def device(self):
        """
        Gets the device of this FoneNumberSmsOptionsReceive.
        FracTEL device if configured for device.

        :return: The device of this FoneNumberSmsOptionsReceive.
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """
        Sets the device of this FoneNumberSmsOptionsReceive.
        FracTEL device if configured for device.

        :param device: The device of this FoneNumberSmsOptionsReceive.
        :type: str
        """

        self._device = device

    @property
    def forward(self):
        """
        Gets the forward of this FoneNumberSmsOptionsReceive.
        Telephone number if configured for forward.

        :return: The forward of this FoneNumberSmsOptionsReceive.
        :rtype: str
        """
        return self._forward

    @forward.setter
    def forward(self, forward):
        """
        Sets the forward of this FoneNumberSmsOptionsReceive.
        Telephone number if configured for forward.

        :param forward: The forward of this FoneNumberSmsOptionsReceive.
        :type: str
        """

        self._forward = forward

    @property
    def url(self):
        """
        Gets the url of this FoneNumberSmsOptionsReceive.
        HTTP URL if configured for URL.

        :return: The url of this FoneNumberSmsOptionsReceive.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this FoneNumberSmsOptionsReceive.
        HTTP URL if configured for URL.

        :param url: The url of this FoneNumberSmsOptionsReceive.
        :type: str
        """

        self._url = url

    @property
    def url_method(self):
        """
        Gets the url_method of this FoneNumberSmsOptionsReceive.
        HTTP URL method if configured for URL.

        :return: The url_method of this FoneNumberSmsOptionsReceive.
        :rtype: str
        """
        return self._url_method

    @url_method.setter
    def url_method(self, url_method):
        """
        Sets the url_method of this FoneNumberSmsOptionsReceive.
        HTTP URL method if configured for URL.

        :param url_method: The url_method of this FoneNumberSmsOptionsReceive.
        :type: str
        """

        self._url_method = url_method

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FoneNumberSmsOptionsReceive):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
