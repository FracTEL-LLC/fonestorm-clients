# coding: utf-8

"""
    FoneStorm API 2.2.0 (Breeze)

    FracTEL's Middleware API

    OpenAPI spec version: 2.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Conference(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attendees': 'list[ERRORUNKNOWN]',
        'attendees_status': 'int',
        'caller_id': 'str',
        'conference_pin': 'str',
        'conference_url': 'str',
        'conference_status': 'str',
        'id': 'str',
        'end_time': 'str',
        'label': 'str',
        'organizer': 'str',
        'organizer_status': 'bool',
        'start_time': 'str'
    }

    attribute_map = {
        'attendees': 'attendees',
        'attendees_status': 'attendees_status',
        'caller_id': 'caller_id',
        'conference_pin': 'conference_pin',
        'conference_url': 'conference_url',
        'conference_status': 'conference_status',
        'id': 'id',
        'end_time': 'end_time',
        'label': 'label',
        'organizer': 'organizer',
        'organizer_status': 'organizer_status',
        'start_time': 'start_time'
    }

    def __init__(self, attendees=None, attendees_status=None, caller_id=None, conference_pin=None, conference_url=None, conference_status=None, id=None, end_time=None, label=None, organizer=None, organizer_status=None, start_time=None):
        """
        Conference - a model defined in Swagger
        """

        self._attendees = None
        self._attendees_status = None
        self._caller_id = None
        self._conference_pin = None
        self._conference_url = None
        self._conference_status = None
        self._id = None
        self._end_time = None
        self._label = None
        self._organizer = None
        self._organizer_status = None
        self._start_time = None

        if attendees is not None:
          self.attendees = attendees
        if attendees_status is not None:
          self.attendees_status = attendees_status
        if caller_id is not None:
          self.caller_id = caller_id
        if conference_pin is not None:
          self.conference_pin = conference_pin
        if conference_url is not None:
          self.conference_url = conference_url
        if conference_status is not None:
          self.conference_status = conference_status
        self.id = id
        if end_time is not None:
          self.end_time = end_time
        if label is not None:
          self.label = label
        if organizer is not None:
          self.organizer = organizer
        if organizer_status is not None:
          self.organizer_status = organizer_status
        if start_time is not None:
          self.start_time = start_time

    @property
    def attendees(self):
        """
        Gets the attendees of this Conference.
        Array of attendee contact ids.

        :return: The attendees of this Conference.
        :rtype: list[ERRORUNKNOWN]
        """
        return self._attendees

    @attendees.setter
    def attendees(self, attendees):
        """
        Sets the attendees of this Conference.
        Array of attendee contact ids.

        :param attendees: The attendees of this Conference.
        :type: list[ERRORUNKNOWN]
        """

        self._attendees = attendees

    @property
    def attendees_status(self):
        """
        Gets the attendees_status of this Conference.
        Status of conference attendees.

        :return: The attendees_status of this Conference.
        :rtype: int
        """
        return self._attendees_status

    @attendees_status.setter
    def attendees_status(self, attendees_status):
        """
        Sets the attendees_status of this Conference.
        Status of conference attendees.

        :param attendees_status: The attendees_status of this Conference.
        :type: int
        """

        self._attendees_status = attendees_status

    @property
    def caller_id(self):
        """
        Gets the caller_id of this Conference.
        Caller id used for conference call.

        :return: The caller_id of this Conference.
        :rtype: str
        """
        return self._caller_id

    @caller_id.setter
    def caller_id(self, caller_id):
        """
        Sets the caller_id of this Conference.
        Caller id used for conference call.

        :param caller_id: The caller_id of this Conference.
        :type: str
        """

        self._caller_id = caller_id

    @property
    def conference_pin(self):
        """
        Gets the conference_pin of this Conference.
        Pin number used for dialiing into conference.

        :return: The conference_pin of this Conference.
        :rtype: str
        """
        return self._conference_pin

    @conference_pin.setter
    def conference_pin(self, conference_pin):
        """
        Sets the conference_pin of this Conference.
        Pin number used for dialiing into conference.

        :param conference_pin: The conference_pin of this Conference.
        :type: str
        """

        self._conference_pin = conference_pin

    @property
    def conference_url(self):
        """
        Gets the conference_url of this Conference.
        Callback URL for conference.

        :return: The conference_url of this Conference.
        :rtype: str
        """
        return self._conference_url

    @conference_url.setter
    def conference_url(self, conference_url):
        """
        Sets the conference_url of this Conference.
        Callback URL for conference.

        :param conference_url: The conference_url of this Conference.
        :type: str
        """

        self._conference_url = conference_url

    @property
    def conference_status(self):
        """
        Gets the conference_status of this Conference.
        Status of the conference.

        :return: The conference_status of this Conference.
        :rtype: str
        """
        return self._conference_status

    @conference_status.setter
    def conference_status(self, conference_status):
        """
        Sets the conference_status of this Conference.
        Status of the conference.

        :param conference_status: The conference_status of this Conference.
        :type: str
        """

        self._conference_status = conference_status

    @property
    def id(self):
        """
        Gets the id of this Conference.
        Unique identifier of conference.

        :return: The id of this Conference.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Conference.
        Unique identifier of conference.

        :param id: The id of this Conference.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def end_time(self):
        """
        Gets the end_time of this Conference.
        End time and date of conference.

        :return: The end_time of this Conference.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """
        Sets the end_time of this Conference.
        End time and date of conference.

        :param end_time: The end_time of this Conference.
        :type: str
        """

        self._end_time = end_time

    @property
    def label(self):
        """
        Gets the label of this Conference.
        Label for conference.

        :return: The label of this Conference.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this Conference.
        Label for conference.

        :param label: The label of this Conference.
        :type: str
        """

        self._label = label

    @property
    def organizer(self):
        """
        Gets the organizer of this Conference.
        Contact id of conference organizer.

        :return: The organizer of this Conference.
        :rtype: str
        """
        return self._organizer

    @organizer.setter
    def organizer(self, organizer):
        """
        Sets the organizer of this Conference.
        Contact id of conference organizer.

        :param organizer: The organizer of this Conference.
        :type: str
        """

        self._organizer = organizer

    @property
    def organizer_status(self):
        """
        Gets the organizer_status of this Conference.
        Status of conference organizer.

        :return: The organizer_status of this Conference.
        :rtype: bool
        """
        return self._organizer_status

    @organizer_status.setter
    def organizer_status(self, organizer_status):
        """
        Sets the organizer_status of this Conference.
        Status of conference organizer.

        :param organizer_status: The organizer_status of this Conference.
        :type: bool
        """

        self._organizer_status = organizer_status

    @property
    def start_time(self):
        """
        Gets the start_time of this Conference.
        Start time and date of conference.

        :return: The start_time of this Conference.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this Conference.
        Start time and date of conference.

        :param start_time: The start_time of this Conference.
        :type: str
        """

        self._start_time = start_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Conference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
