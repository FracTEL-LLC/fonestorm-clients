# coding: utf-8

"""
    FoneStorm API 2.4.0 (Thunder)

    FracTEL's Middleware API

    OpenAPI spec version: 2.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class SurveysApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_survey(self, title, contacts, **kwargs):
        """
        Create Survey
        Create a survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_survey(title, contacts, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str title: Survey title (required)
        :param list[str] contacts: Survey contact ids (required)
        :return: InlineResponse2016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_survey_with_http_info(title, contacts, **kwargs)
        else:
            (data) = self.create_survey_with_http_info(title, contacts, **kwargs)
            return data

    def create_survey_with_http_info(self, title, contacts, **kwargs):
        """
        Create Survey
        Create a survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_survey_with_http_info(title, contacts, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str title: Survey title (required)
        :param list[str] contacts: Survey contact ids (required)
        :return: InlineResponse2016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['title', 'contacts']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_survey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'title' is set
        if ('title' not in params) or (params['title'] is None):
            raise ValueError("Missing the required parameter `title` when calling `create_survey`")
        # verify the required parameter 'contacts' is set
        if ('contacts' not in params) or (params['contacts'] is None):
            raise ValueError("Missing the required parameter `contacts` when calling `create_survey`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'title' in params:
            form_params.append(('title', params['title']))
        if 'contacts' in params:
            form_params.append(('contacts', params['contacts']))
            collection_formats['contacts'] = 'multi'

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2016',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_survey_0(self, title, contacts, **kwargs):
        """
        Create Survey
        Create a survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_survey_0(title, contacts, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str title: Survey title (required)
        :param list[str] contacts: Survey contact ids (required)
        :return: InlineResponse2016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_survey_0_with_http_info(title, contacts, **kwargs)
        else:
            (data) = self.create_survey_0_with_http_info(title, contacts, **kwargs)
            return data

    def create_survey_0_with_http_info(self, title, contacts, **kwargs):
        """
        Create Survey
        Create a survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_survey_0_with_http_info(title, contacts, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str title: Survey title (required)
        :param list[str] contacts: Survey contact ids (required)
        :return: InlineResponse2016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['title', 'contacts']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_survey_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'title' is set
        if ('title' not in params) or (params['title'] is None):
            raise ValueError("Missing the required parameter `title` when calling `create_survey_0`")
        # verify the required parameter 'contacts' is set
        if ('contacts' not in params) or (params['contacts'] is None):
            raise ValueError("Missing the required parameter `contacts` when calling `create_survey_0`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'title' in params:
            form_params.append(('title', params['title']))
        if 'contacts' in params:
            form_params.append(('contacts', params['contacts']))
            collection_formats['contacts'] = 'multi'

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2016',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_survey_question(self, id, question, **kwargs):
        """
        Create Survey Question
        Create a question in a given survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_survey_question(id, question, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str question: Question prompt (required)
        :param str attribute_name: Attribute name used to identify this information
        :return: InlineResponse20115
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_survey_question_with_http_info(id, question, **kwargs)
        else:
            (data) = self.create_survey_question_with_http_info(id, question, **kwargs)
            return data

    def create_survey_question_with_http_info(self, id, question, **kwargs):
        """
        Create Survey Question
        Create a question in a given survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_survey_question_with_http_info(id, question, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str question: Question prompt (required)
        :param str attribute_name: Attribute name used to identify this information
        :return: InlineResponse20115
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'question', 'attribute_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_survey_question" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_survey_question`")
        # verify the required parameter 'question' is set
        if ('question' not in params) or (params['question'] is None):
            raise ValueError("Missing the required parameter `question` when calling `create_survey_question`")

        if 'attribute_name' in params and len(params['attribute_name']) > 32:
            raise ValueError("Invalid value for parameter `attribute_name` when calling `create_survey_question`, length must be less than or equal to `32`")

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'question' in params:
            form_params.append(('question', params['question']))
        if 'attribute_name' in params:
            form_params.append(('attribute_name', params['attribute_name']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys/{id}/questions', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20115',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_survey_question_0(self, id, question, **kwargs):
        """
        Create Survey Question
        Create a question in a given survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_survey_question_0(id, question, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str question: Question prompt (required)
        :param str attribute_name: Attribute name used to identify this information
        :return: InlineResponse20115
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_survey_question_0_with_http_info(id, question, **kwargs)
        else:
            (data) = self.create_survey_question_0_with_http_info(id, question, **kwargs)
            return data

    def create_survey_question_0_with_http_info(self, id, question, **kwargs):
        """
        Create Survey Question
        Create a question in a given survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_survey_question_0_with_http_info(id, question, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str question: Question prompt (required)
        :param str attribute_name: Attribute name used to identify this information
        :return: InlineResponse20115
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'question', 'attribute_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_survey_question_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_survey_question_0`")
        # verify the required parameter 'question' is set
        if ('question' not in params) or (params['question'] is None):
            raise ValueError("Missing the required parameter `question` when calling `create_survey_question_0`")

        if 'attribute_name' in params and len(params['attribute_name']) > 32:
            raise ValueError("Invalid value for parameter `attribute_name` when calling `create_survey_question_0`, length must be less than or equal to `32`")

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'question' in params:
            form_params.append(('question', params['question']))
        if 'attribute_name' in params:
            form_params.append(('attribute_name', params['attribute_name']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys/{id}/questions', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20115',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_survey_question_choice(self, id, qid, type, **kwargs):
        """
        Create Survey Question Choice
        Create a question choice for a given survey question.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_survey_question_choice(id, qid, type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str qid: Question id (required)
        :param str type: Input field label (required)
        :param str label: Input field label
        :return: InlineResponse20117
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_survey_question_choice_with_http_info(id, qid, type, **kwargs)
        else:
            (data) = self.create_survey_question_choice_with_http_info(id, qid, type, **kwargs)
            return data

    def create_survey_question_choice_with_http_info(self, id, qid, type, **kwargs):
        """
        Create Survey Question Choice
        Create a question choice for a given survey question.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_survey_question_choice_with_http_info(id, qid, type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str qid: Question id (required)
        :param str type: Input field label (required)
        :param str label: Input field label
        :return: InlineResponse20117
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'qid', 'type', 'label']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_survey_question_choice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_survey_question_choice`")
        # verify the required parameter 'qid' is set
        if ('qid' not in params) or (params['qid'] is None):
            raise ValueError("Missing the required parameter `qid` when calling `create_survey_question_choice`")
        # verify the required parameter 'type' is set
        if ('type' not in params) or (params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `create_survey_question_choice`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'qid' in params:
            path_params['qid'] = params['qid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'type' in params:
            form_params.append(('type', params['type']))
        if 'label' in params:
            form_params.append(('label', params['label']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys/{id}/questions/{qid}/choices', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20117',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_survey_question_choice_0(self, id, qid, type, **kwargs):
        """
        Create Survey Question Choice
        Create a question choice for a given survey question.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_survey_question_choice_0(id, qid, type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str qid: Question id (required)
        :param str type: Input field label (required)
        :param str label: Input field label
        :return: InlineResponse20117
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_survey_question_choice_0_with_http_info(id, qid, type, **kwargs)
        else:
            (data) = self.create_survey_question_choice_0_with_http_info(id, qid, type, **kwargs)
            return data

    def create_survey_question_choice_0_with_http_info(self, id, qid, type, **kwargs):
        """
        Create Survey Question Choice
        Create a question choice for a given survey question.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_survey_question_choice_0_with_http_info(id, qid, type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str qid: Question id (required)
        :param str type: Input field label (required)
        :param str label: Input field label
        :return: InlineResponse20117
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'qid', 'type', 'label']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_survey_question_choice_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_survey_question_choice_0`")
        # verify the required parameter 'qid' is set
        if ('qid' not in params) or (params['qid'] is None):
            raise ValueError("Missing the required parameter `qid` when calling `create_survey_question_choice_0`")
        # verify the required parameter 'type' is set
        if ('type' not in params) or (params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `create_survey_question_choice_0`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'qid' in params:
            path_params['qid'] = params['qid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'type' in params:
            form_params.append(('type', params['type']))
        if 'label' in params:
            form_params.append(('label', params['label']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys/{id}/questions/{qid}/choices', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20117',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_survey_response(self, id, question_id, choice_id, contact_id, answer, **kwargs):
        """
        Create Survey Response
        Create a response in a given survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_survey_response(id, question_id, choice_id, contact_id, answer, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str question_id: Question id (required)
        :param str choice_id: Choice id (required)
        :param str contact_id: Contact id (required)
        :param str answer: Answer for contact survey question choice (required)
        :return: InlineResponse20116
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_survey_response_with_http_info(id, question_id, choice_id, contact_id, answer, **kwargs)
        else:
            (data) = self.create_survey_response_with_http_info(id, question_id, choice_id, contact_id, answer, **kwargs)
            return data

    def create_survey_response_with_http_info(self, id, question_id, choice_id, contact_id, answer, **kwargs):
        """
        Create Survey Response
        Create a response in a given survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_survey_response_with_http_info(id, question_id, choice_id, contact_id, answer, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str question_id: Question id (required)
        :param str choice_id: Choice id (required)
        :param str contact_id: Contact id (required)
        :param str answer: Answer for contact survey question choice (required)
        :return: InlineResponse20116
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'question_id', 'choice_id', 'contact_id', 'answer']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_survey_response" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_survey_response`")
        # verify the required parameter 'question_id' is set
        if ('question_id' not in params) or (params['question_id'] is None):
            raise ValueError("Missing the required parameter `question_id` when calling `create_survey_response`")
        # verify the required parameter 'choice_id' is set
        if ('choice_id' not in params) or (params['choice_id'] is None):
            raise ValueError("Missing the required parameter `choice_id` when calling `create_survey_response`")
        # verify the required parameter 'contact_id' is set
        if ('contact_id' not in params) or (params['contact_id'] is None):
            raise ValueError("Missing the required parameter `contact_id` when calling `create_survey_response`")
        # verify the required parameter 'answer' is set
        if ('answer' not in params) or (params['answer'] is None):
            raise ValueError("Missing the required parameter `answer` when calling `create_survey_response`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'question_id' in params:
            form_params.append(('question_id', params['question_id']))
        if 'choice_id' in params:
            form_params.append(('choice_id', params['choice_id']))
        if 'contact_id' in params:
            form_params.append(('contact_id', params['contact_id']))
        if 'answer' in params:
            form_params.append(('answer', params['answer']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys/{id}/responses', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20116',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_survey_response_0(self, id, question_id, choice_id, contact_id, answer, **kwargs):
        """
        Create Survey Response
        Create a response in a given survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_survey_response_0(id, question_id, choice_id, contact_id, answer, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str question_id: Question id (required)
        :param str choice_id: Choice id (required)
        :param str contact_id: Contact id (required)
        :param str answer: Answer for contact survey question choice (required)
        :return: InlineResponse20116
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_survey_response_0_with_http_info(id, question_id, choice_id, contact_id, answer, **kwargs)
        else:
            (data) = self.create_survey_response_0_with_http_info(id, question_id, choice_id, contact_id, answer, **kwargs)
            return data

    def create_survey_response_0_with_http_info(self, id, question_id, choice_id, contact_id, answer, **kwargs):
        """
        Create Survey Response
        Create a response in a given survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_survey_response_0_with_http_info(id, question_id, choice_id, contact_id, answer, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str question_id: Question id (required)
        :param str choice_id: Choice id (required)
        :param str contact_id: Contact id (required)
        :param str answer: Answer for contact survey question choice (required)
        :return: InlineResponse20116
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'question_id', 'choice_id', 'contact_id', 'answer']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_survey_response_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_survey_response_0`")
        # verify the required parameter 'question_id' is set
        if ('question_id' not in params) or (params['question_id'] is None):
            raise ValueError("Missing the required parameter `question_id` when calling `create_survey_response_0`")
        # verify the required parameter 'choice_id' is set
        if ('choice_id' not in params) or (params['choice_id'] is None):
            raise ValueError("Missing the required parameter `choice_id` when calling `create_survey_response_0`")
        # verify the required parameter 'contact_id' is set
        if ('contact_id' not in params) or (params['contact_id'] is None):
            raise ValueError("Missing the required parameter `contact_id` when calling `create_survey_response_0`")
        # verify the required parameter 'answer' is set
        if ('answer' not in params) or (params['answer'] is None):
            raise ValueError("Missing the required parameter `answer` when calling `create_survey_response_0`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'question_id' in params:
            form_params.append(('question_id', params['question_id']))
        if 'choice_id' in params:
            form_params.append(('choice_id', params['choice_id']))
        if 'contact_id' in params:
            form_params.append(('contact_id', params['contact_id']))
        if 'answer' in params:
            form_params.append(('answer', params['answer']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys/{id}/responses', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20116',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_survey(self, id, **kwargs):
        """
        Delete Survey
        Delete a survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_survey(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :return: InlineResponse2016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_survey_with_http_info(id, **kwargs)
        else:
            (data) = self.delete_survey_with_http_info(id, **kwargs)
            return data

    def delete_survey_with_http_info(self, id, **kwargs):
        """
        Delete Survey
        Delete a survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_survey_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :return: InlineResponse2016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_survey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_survey`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys/{id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2016',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_survey_0(self, id, **kwargs):
        """
        Delete Survey
        Delete a survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_survey_0(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :return: InlineResponse2016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_survey_0_with_http_info(id, **kwargs)
        else:
            (data) = self.delete_survey_0_with_http_info(id, **kwargs)
            return data

    def delete_survey_0_with_http_info(self, id, **kwargs):
        """
        Delete Survey
        Delete a survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_survey_0_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :return: InlineResponse2016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_survey_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_survey_0`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys/{id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2016',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_survey_question(self, id, qid, **kwargs):
        """
        Delete Survey Question
        Delete a question from a given survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_survey_question(id, qid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str qid: Question id (required)
        :return: InlineResponse20115
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_survey_question_with_http_info(id, qid, **kwargs)
        else:
            (data) = self.delete_survey_question_with_http_info(id, qid, **kwargs)
            return data

    def delete_survey_question_with_http_info(self, id, qid, **kwargs):
        """
        Delete Survey Question
        Delete a question from a given survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_survey_question_with_http_info(id, qid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str qid: Question id (required)
        :return: InlineResponse20115
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'qid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_survey_question" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_survey_question`")
        # verify the required parameter 'qid' is set
        if ('qid' not in params) or (params['qid'] is None):
            raise ValueError("Missing the required parameter `qid` when calling `delete_survey_question`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'qid' in params:
            path_params['qid'] = params['qid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys/{id}/questions/{qid}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20115',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_survey_question_0(self, id, qid, **kwargs):
        """
        Delete Survey Question
        Delete a question from a given survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_survey_question_0(id, qid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str qid: Question id (required)
        :return: InlineResponse20115
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_survey_question_0_with_http_info(id, qid, **kwargs)
        else:
            (data) = self.delete_survey_question_0_with_http_info(id, qid, **kwargs)
            return data

    def delete_survey_question_0_with_http_info(self, id, qid, **kwargs):
        """
        Delete Survey Question
        Delete a question from a given survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_survey_question_0_with_http_info(id, qid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str qid: Question id (required)
        :return: InlineResponse20115
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'qid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_survey_question_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_survey_question_0`")
        # verify the required parameter 'qid' is set
        if ('qid' not in params) or (params['qid'] is None):
            raise ValueError("Missing the required parameter `qid` when calling `delete_survey_question_0`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'qid' in params:
            path_params['qid'] = params['qid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys/{id}/questions/{qid}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20115',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_survey_question_choice(self, id, qid, cid, **kwargs):
        """
        Delete Survey Question Choice
        Delete a choice for a given survey question.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_survey_question_choice(id, qid, cid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str qid: Question id (required)
        :param str cid: Choice id (required)
        :return: InlineResponse20117
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_survey_question_choice_with_http_info(id, qid, cid, **kwargs)
        else:
            (data) = self.delete_survey_question_choice_with_http_info(id, qid, cid, **kwargs)
            return data

    def delete_survey_question_choice_with_http_info(self, id, qid, cid, **kwargs):
        """
        Delete Survey Question Choice
        Delete a choice for a given survey question.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_survey_question_choice_with_http_info(id, qid, cid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str qid: Question id (required)
        :param str cid: Choice id (required)
        :return: InlineResponse20117
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'qid', 'cid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_survey_question_choice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_survey_question_choice`")
        # verify the required parameter 'qid' is set
        if ('qid' not in params) or (params['qid'] is None):
            raise ValueError("Missing the required parameter `qid` when calling `delete_survey_question_choice`")
        # verify the required parameter 'cid' is set
        if ('cid' not in params) or (params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `delete_survey_question_choice`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'qid' in params:
            path_params['qid'] = params['qid']
        if 'cid' in params:
            path_params['cid'] = params['cid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys/{id}/questions/{qid}/choices/{cid}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20117',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_survey_question_choice_0(self, id, qid, cid, **kwargs):
        """
        Delete Survey Question Choice
        Delete a choice for a given survey question.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_survey_question_choice_0(id, qid, cid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str qid: Question id (required)
        :param str cid: Choice id (required)
        :return: InlineResponse20117
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_survey_question_choice_0_with_http_info(id, qid, cid, **kwargs)
        else:
            (data) = self.delete_survey_question_choice_0_with_http_info(id, qid, cid, **kwargs)
            return data

    def delete_survey_question_choice_0_with_http_info(self, id, qid, cid, **kwargs):
        """
        Delete Survey Question Choice
        Delete a choice for a given survey question.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_survey_question_choice_0_with_http_info(id, qid, cid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str qid: Question id (required)
        :param str cid: Choice id (required)
        :return: InlineResponse20117
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'qid', 'cid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_survey_question_choice_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_survey_question_choice_0`")
        # verify the required parameter 'qid' is set
        if ('qid' not in params) or (params['qid'] is None):
            raise ValueError("Missing the required parameter `qid` when calling `delete_survey_question_choice_0`")
        # verify the required parameter 'cid' is set
        if ('cid' not in params) or (params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `delete_survey_question_choice_0`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'qid' in params:
            path_params['qid'] = params['qid']
        if 'cid' in params:
            path_params['cid'] = params['cid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys/{id}/questions/{qid}/choices/{cid}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20117',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_survey(self, id, **kwargs):
        """
        Get Survey
        Get information about a survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_survey(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param bool associations: Include all data associations
        :return: InlineResponse2016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_survey_with_http_info(id, **kwargs)
        else:
            (data) = self.get_survey_with_http_info(id, **kwargs)
            return data

    def get_survey_with_http_info(self, id, **kwargs):
        """
        Get Survey
        Get information about a survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_survey_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param bool associations: Include all data associations
        :return: InlineResponse2016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'associations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_survey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_survey`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'associations' in params:
            query_params.append(('associations', params['associations']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded', 'application/offset+octet-stream', 'multipart/form-data'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys/{id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2016',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_survey_0(self, id, **kwargs):
        """
        Get Survey
        Get information about a survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_survey_0(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param bool associations: Include all data associations
        :return: InlineResponse2016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_survey_0_with_http_info(id, **kwargs)
        else:
            (data) = self.get_survey_0_with_http_info(id, **kwargs)
            return data

    def get_survey_0_with_http_info(self, id, **kwargs):
        """
        Get Survey
        Get information about a survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_survey_0_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param bool associations: Include all data associations
        :return: InlineResponse2016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'associations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_survey_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_survey_0`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'associations' in params:
            query_params.append(('associations', params['associations']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded', 'application/offset+octet-stream', 'multipart/form-data'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys/{id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2016',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_survey_contacts(self, id, **kwargs):
        """
        Get Survey Contacts
        Get a list of contacts for a given survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_survey_contacts(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_survey_contacts_with_http_info(id, **kwargs)
        else:
            (data) = self.get_survey_contacts_with_http_info(id, **kwargs)
            return data

    def get_survey_contacts_with_http_info(self, id, **kwargs):
        """
        Get Survey Contacts
        Get a list of contacts for a given survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_survey_contacts_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_survey_contacts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_survey_contacts`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys/{id}/contacts', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2004',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_survey_contacts_0(self, id, **kwargs):
        """
        Get Survey Contacts
        Get a list of contacts for a given survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_survey_contacts_0(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_survey_contacts_0_with_http_info(id, **kwargs)
        else:
            (data) = self.get_survey_contacts_0_with_http_info(id, **kwargs)
            return data

    def get_survey_contacts_0_with_http_info(self, id, **kwargs):
        """
        Get Survey Contacts
        Get a list of contacts for a given survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_survey_contacts_0_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_survey_contacts_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_survey_contacts_0`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys/{id}/contacts', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2004',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_survey_question_choices(self, id, qid, **kwargs):
        """
        Get Survey Question Choices
        Get a list of all choices for a given survey question.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_survey_question_choices(id, qid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str qid: Question id (required)
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_survey_question_choices_with_http_info(id, qid, **kwargs)
        else:
            (data) = self.get_survey_question_choices_with_http_info(id, qid, **kwargs)
            return data

    def get_survey_question_choices_with_http_info(self, id, qid, **kwargs):
        """
        Get Survey Question Choices
        Get a list of all choices for a given survey question.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_survey_question_choices_with_http_info(id, qid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str qid: Question id (required)
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'qid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_survey_question_choices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_survey_question_choices`")
        # verify the required parameter 'qid' is set
        if ('qid' not in params) or (params['qid'] is None):
            raise ValueError("Missing the required parameter `qid` when calling `get_survey_question_choices`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'qid' in params:
            path_params['qid'] = params['qid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys/{id}/questions/{qid}/choices', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20016',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_survey_question_choices_0(self, id, qid, **kwargs):
        """
        Get Survey Question Choices
        Get a list of all choices for a given survey question.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_survey_question_choices_0(id, qid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str qid: Question id (required)
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_survey_question_choices_0_with_http_info(id, qid, **kwargs)
        else:
            (data) = self.get_survey_question_choices_0_with_http_info(id, qid, **kwargs)
            return data

    def get_survey_question_choices_0_with_http_info(self, id, qid, **kwargs):
        """
        Get Survey Question Choices
        Get a list of all choices for a given survey question.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_survey_question_choices_0_with_http_info(id, qid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str qid: Question id (required)
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'qid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_survey_question_choices_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_survey_question_choices_0`")
        # verify the required parameter 'qid' is set
        if ('qid' not in params) or (params['qid'] is None):
            raise ValueError("Missing the required parameter `qid` when calling `get_survey_question_choices_0`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'qid' in params:
            path_params['qid'] = params['qid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys/{id}/questions/{qid}/choices', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20016',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_survey_questions(self, id, **kwargs):
        """
        Get Survey Questions
        Get a list of questions for a given survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_survey_questions(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_survey_questions_with_http_info(id, **kwargs)
        else:
            (data) = self.get_survey_questions_with_http_info(id, **kwargs)
            return data

    def get_survey_questions_with_http_info(self, id, **kwargs):
        """
        Get Survey Questions
        Get a list of questions for a given survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_survey_questions_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_survey_questions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_survey_questions`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys/{id}/questions', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20013',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_survey_questions_0(self, id, **kwargs):
        """
        Get Survey Questions
        Get a list of questions for a given survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_survey_questions_0(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_survey_questions_0_with_http_info(id, **kwargs)
        else:
            (data) = self.get_survey_questions_0_with_http_info(id, **kwargs)
            return data

    def get_survey_questions_0_with_http_info(self, id, **kwargs):
        """
        Get Survey Questions
        Get a list of questions for a given survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_survey_questions_0_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_survey_questions_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_survey_questions_0`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys/{id}/questions', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20013',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_survey_responses(self, id, **kwargs):
        """
        Get Survey Responses
        Get a list of responses for a given survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_survey_responses(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_survey_responses_with_http_info(id, **kwargs)
        else:
            (data) = self.get_survey_responses_with_http_info(id, **kwargs)
            return data

    def get_survey_responses_with_http_info(self, id, **kwargs):
        """
        Get Survey Responses
        Get a list of responses for a given survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_survey_responses_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_survey_responses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_survey_responses`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys/{id}/responses', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20014',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_survey_responses_0(self, id, **kwargs):
        """
        Get Survey Responses
        Get a list of responses for a given survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_survey_responses_0(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_survey_responses_0_with_http_info(id, **kwargs)
        else:
            (data) = self.get_survey_responses_0_with_http_info(id, **kwargs)
            return data

    def get_survey_responses_0_with_http_info(self, id, **kwargs):
        """
        Get Survey Responses
        Get a list of responses for a given survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_survey_responses_0_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_survey_responses_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_survey_responses_0`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys/{id}/responses', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20014',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_surveys(self, **kwargs):
        """
        Get Surveys
        Get a list of surveys.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_surveys(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_surveys_with_http_info(**kwargs)
        else:
            (data) = self.get_surveys_with_http_info(**kwargs)
            return data

    def get_surveys_with_http_info(self, **kwargs):
        """
        Get Surveys
        Get a list of surveys.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_surveys_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_surveys" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2003',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_surveys_0(self, **kwargs):
        """
        Get Surveys
        Get a list of surveys.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_surveys_0(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_surveys_0_with_http_info(**kwargs)
        else:
            (data) = self.get_surveys_0_with_http_info(**kwargs)
            return data

    def get_surveys_0_with_http_info(self, **kwargs):
        """
        Get Surveys
        Get a list of surveys.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_surveys_0_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_surveys_0" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2003',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_survey(self, id, **kwargs):
        """
        Update Survey
        Update a survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_survey(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str title: Survey title
        :param list[str] contacts: Survey contact ids
        :return: InlineResponse2016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_survey_with_http_info(id, **kwargs)
        else:
            (data) = self.update_survey_with_http_info(id, **kwargs)
            return data

    def update_survey_with_http_info(self, id, **kwargs):
        """
        Update Survey
        Update a survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_survey_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str title: Survey title
        :param list[str] contacts: Survey contact ids
        :return: InlineResponse2016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'title', 'contacts']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_survey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_survey`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'title' in params:
            form_params.append(('title', params['title']))
        if 'contacts' in params:
            form_params.append(('contacts', params['contacts']))
            collection_formats['contacts'] = 'multi'

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys/{id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2016',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_survey_0(self, id, **kwargs):
        """
        Update Survey
        Update a survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_survey_0(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str title: Survey title
        :param list[str] contacts: Survey contact ids
        :return: InlineResponse2016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_survey_0_with_http_info(id, **kwargs)
        else:
            (data) = self.update_survey_0_with_http_info(id, **kwargs)
            return data

    def update_survey_0_with_http_info(self, id, **kwargs):
        """
        Update Survey
        Update a survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_survey_0_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str title: Survey title
        :param list[str] contacts: Survey contact ids
        :return: InlineResponse2016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'title', 'contacts']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_survey_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_survey_0`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'title' in params:
            form_params.append(('title', params['title']))
        if 'contacts' in params:
            form_params.append(('contacts', params['contacts']))
            collection_formats['contacts'] = 'multi'

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys/{id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2016',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_survey_question(self, id, qid, **kwargs):
        """
        Update Survey Question
        Update a question for a given survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_survey_question(id, qid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str qid: Question id (required)
        :param str question: Question prompt
        :param str attribute_name: Attribute name used to identify this information
        :return: InlineResponse20115
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_survey_question_with_http_info(id, qid, **kwargs)
        else:
            (data) = self.update_survey_question_with_http_info(id, qid, **kwargs)
            return data

    def update_survey_question_with_http_info(self, id, qid, **kwargs):
        """
        Update Survey Question
        Update a question for a given survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_survey_question_with_http_info(id, qid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str qid: Question id (required)
        :param str question: Question prompt
        :param str attribute_name: Attribute name used to identify this information
        :return: InlineResponse20115
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'qid', 'question', 'attribute_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_survey_question" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_survey_question`")
        # verify the required parameter 'qid' is set
        if ('qid' not in params) or (params['qid'] is None):
            raise ValueError("Missing the required parameter `qid` when calling `update_survey_question`")

        if 'attribute_name' in params and len(params['attribute_name']) > 32:
            raise ValueError("Invalid value for parameter `attribute_name` when calling `update_survey_question`, length must be less than or equal to `32`")

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'qid' in params:
            path_params['qid'] = params['qid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'question' in params:
            form_params.append(('question', params['question']))
        if 'attribute_name' in params:
            form_params.append(('attribute_name', params['attribute_name']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys/{id}/questions/{qid}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20115',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_survey_question_0(self, id, qid, **kwargs):
        """
        Update Survey Question
        Update a question for a given survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_survey_question_0(id, qid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str qid: Question id (required)
        :param str question: Question prompt
        :param str attribute_name: Attribute name used to identify this information
        :return: InlineResponse20115
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_survey_question_0_with_http_info(id, qid, **kwargs)
        else:
            (data) = self.update_survey_question_0_with_http_info(id, qid, **kwargs)
            return data

    def update_survey_question_0_with_http_info(self, id, qid, **kwargs):
        """
        Update Survey Question
        Update a question for a given survey.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_survey_question_0_with_http_info(id, qid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str qid: Question id (required)
        :param str question: Question prompt
        :param str attribute_name: Attribute name used to identify this information
        :return: InlineResponse20115
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'qid', 'question', 'attribute_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_survey_question_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_survey_question_0`")
        # verify the required parameter 'qid' is set
        if ('qid' not in params) or (params['qid'] is None):
            raise ValueError("Missing the required parameter `qid` when calling `update_survey_question_0`")

        if 'attribute_name' in params and len(params['attribute_name']) > 32:
            raise ValueError("Invalid value for parameter `attribute_name` when calling `update_survey_question_0`, length must be less than or equal to `32`")

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'qid' in params:
            path_params['qid'] = params['qid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'question' in params:
            form_params.append(('question', params['question']))
        if 'attribute_name' in params:
            form_params.append(('attribute_name', params['attribute_name']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys/{id}/questions/{qid}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20115',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_survey_question_choice(self, id, qid, cid, **kwargs):
        """
        Update Survey Question Choice
        Update a choice for a given survey question.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_survey_question_choice(id, qid, cid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str qid: Question id (required)
        :param str cid: Choice id (required)
        :param str type: Input field label
        :param str label: Input field label
        :return: InlineResponse20117
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_survey_question_choice_with_http_info(id, qid, cid, **kwargs)
        else:
            (data) = self.update_survey_question_choice_with_http_info(id, qid, cid, **kwargs)
            return data

    def update_survey_question_choice_with_http_info(self, id, qid, cid, **kwargs):
        """
        Update Survey Question Choice
        Update a choice for a given survey question.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_survey_question_choice_with_http_info(id, qid, cid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str qid: Question id (required)
        :param str cid: Choice id (required)
        :param str type: Input field label
        :param str label: Input field label
        :return: InlineResponse20117
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'qid', 'cid', 'type', 'label']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_survey_question_choice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_survey_question_choice`")
        # verify the required parameter 'qid' is set
        if ('qid' not in params) or (params['qid'] is None):
            raise ValueError("Missing the required parameter `qid` when calling `update_survey_question_choice`")
        # verify the required parameter 'cid' is set
        if ('cid' not in params) or (params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `update_survey_question_choice`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'qid' in params:
            path_params['qid'] = params['qid']
        if 'cid' in params:
            path_params['cid'] = params['cid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'type' in params:
            form_params.append(('type', params['type']))
        if 'label' in params:
            form_params.append(('label', params['label']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys/{id}/questions/{qid}/choices/{cid}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20117',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_survey_question_choice_0(self, id, qid, cid, **kwargs):
        """
        Update Survey Question Choice
        Update a choice for a given survey question.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_survey_question_choice_0(id, qid, cid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str qid: Question id (required)
        :param str cid: Choice id (required)
        :param str type: Input field label
        :param str label: Input field label
        :return: InlineResponse20117
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_survey_question_choice_0_with_http_info(id, qid, cid, **kwargs)
        else:
            (data) = self.update_survey_question_choice_0_with_http_info(id, qid, cid, **kwargs)
            return data

    def update_survey_question_choice_0_with_http_info(self, id, qid, cid, **kwargs):
        """
        Update Survey Question Choice
        Update a choice for a given survey question.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_survey_question_choice_0_with_http_info(id, qid, cid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Survey id (required)
        :param str qid: Question id (required)
        :param str cid: Choice id (required)
        :param str type: Input field label
        :param str label: Input field label
        :return: InlineResponse20117
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'qid', 'cid', 'type', 'label']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_survey_question_choice_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_survey_question_choice_0`")
        # verify the required parameter 'qid' is set
        if ('qid' not in params) or (params['qid'] is None):
            raise ValueError("Missing the required parameter `qid` when calling `update_survey_question_choice_0`")
        # verify the required parameter 'cid' is set
        if ('cid' not in params) or (params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `update_survey_question_choice_0`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'qid' in params:
            path_params['qid'] = params['qid']
        if 'cid' in params:
            path_params['cid'] = params['cid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'type' in params:
            form_params.append(('type', params['type']))
        if 'label' in params:
            form_params.append(('label', params['label']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/surveys/{id}/questions/{qid}/choices/{cid}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20117',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
