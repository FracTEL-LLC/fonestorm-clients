# coding: utf-8

"""
    FoneStorm API 2.4.0 (Thunder)

    FracTEL's Middleware API

    OpenAPI spec version: 2.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class EventsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_event(self, id, organizer_contact_id, start_time, end_time, title, attendees, **kwargs):
        """
        Create Event
        Create an event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_event(id, organizer_contact_id, start_time, end_time, title, attendees, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Event id (required)
        :param str organizer_contact_id: Event organizer contact id (required)
        :param date start_time: Event start time (required)
        :param date end_time: Event end time (required)
        :param str title: Event title (required)
        :param list[str] attendees: Event attendee contact ids (required)
        :param str description: Event description
        :param str location: Event location
        :param str status: Event status
        :param float reschedule_count: Event reschedule count
        :return: InlineResponse2012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_event_with_http_info(id, organizer_contact_id, start_time, end_time, title, attendees, **kwargs)
        else:
            (data) = self.create_event_with_http_info(id, organizer_contact_id, start_time, end_time, title, attendees, **kwargs)
            return data

    def create_event_with_http_info(self, id, organizer_contact_id, start_time, end_time, title, attendees, **kwargs):
        """
        Create Event
        Create an event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_event_with_http_info(id, organizer_contact_id, start_time, end_time, title, attendees, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Event id (required)
        :param str organizer_contact_id: Event organizer contact id (required)
        :param date start_time: Event start time (required)
        :param date end_time: Event end time (required)
        :param str title: Event title (required)
        :param list[str] attendees: Event attendee contact ids (required)
        :param str description: Event description
        :param str location: Event location
        :param str status: Event status
        :param float reschedule_count: Event reschedule count
        :return: InlineResponse2012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'organizer_contact_id', 'start_time', 'end_time', 'title', 'attendees', 'description', 'location', 'status', 'reschedule_count']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_event`")
        # verify the required parameter 'organizer_contact_id' is set
        if ('organizer_contact_id' not in params) or (params['organizer_contact_id'] is None):
            raise ValueError("Missing the required parameter `organizer_contact_id` when calling `create_event`")
        # verify the required parameter 'start_time' is set
        if ('start_time' not in params) or (params['start_time'] is None):
            raise ValueError("Missing the required parameter `start_time` when calling `create_event`")
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params) or (params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `create_event`")
        # verify the required parameter 'title' is set
        if ('title' not in params) or (params['title'] is None):
            raise ValueError("Missing the required parameter `title` when calling `create_event`")
        # verify the required parameter 'attendees' is set
        if ('attendees' not in params) or (params['attendees'] is None):
            raise ValueError("Missing the required parameter `attendees` when calling `create_event`")

        if 'title' in params and len(params['title']) > 64:
            raise ValueError("Invalid value for parameter `title` when calling `create_event`, length must be less than or equal to `64`")
        if 'location' in params and len(params['location']) > 64:
            raise ValueError("Invalid value for parameter `location` when calling `create_event`, length must be less than or equal to `64`")

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id' in params:
            form_params.append(('id', params['id']))
        if 'organizer_contact_id' in params:
            form_params.append(('organizer_contact_id', params['organizer_contact_id']))
        if 'start_time' in params:
            form_params.append(('start_time', params['start_time']))
        if 'end_time' in params:
            form_params.append(('end_time', params['end_time']))
        if 'title' in params:
            form_params.append(('title', params['title']))
        if 'description' in params:
            form_params.append(('description', params['description']))
        if 'location' in params:
            form_params.append(('location', params['location']))
        if 'attendees' in params:
            form_params.append(('attendees', params['attendees']))
            collection_formats['attendees'] = 'multi'
        if 'status' in params:
            form_params.append(('status', params['status']))
        if 'reschedule_count' in params:
            form_params.append(('reschedule_count', params['reschedule_count']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/events', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2012',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_event_0(self, id, organizer_contact_id, start_time, end_time, title, attendees, **kwargs):
        """
        Create Event
        Create an event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_event_0(id, organizer_contact_id, start_time, end_time, title, attendees, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Event id (required)
        :param str organizer_contact_id: Event organizer contact id (required)
        :param date start_time: Event start time (required)
        :param date end_time: Event end time (required)
        :param str title: Event title (required)
        :param list[str] attendees: Event attendee contact ids (required)
        :param str description: Event description
        :param str location: Event location
        :param str status: Event status
        :param float reschedule_count: Event reschedule count
        :return: InlineResponse2012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_event_0_with_http_info(id, organizer_contact_id, start_time, end_time, title, attendees, **kwargs)
        else:
            (data) = self.create_event_0_with_http_info(id, organizer_contact_id, start_time, end_time, title, attendees, **kwargs)
            return data

    def create_event_0_with_http_info(self, id, organizer_contact_id, start_time, end_time, title, attendees, **kwargs):
        """
        Create Event
        Create an event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_event_0_with_http_info(id, organizer_contact_id, start_time, end_time, title, attendees, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Event id (required)
        :param str organizer_contact_id: Event organizer contact id (required)
        :param date start_time: Event start time (required)
        :param date end_time: Event end time (required)
        :param str title: Event title (required)
        :param list[str] attendees: Event attendee contact ids (required)
        :param str description: Event description
        :param str location: Event location
        :param str status: Event status
        :param float reschedule_count: Event reschedule count
        :return: InlineResponse2012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'organizer_contact_id', 'start_time', 'end_time', 'title', 'attendees', 'description', 'location', 'status', 'reschedule_count']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_event_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_event_0`")
        # verify the required parameter 'organizer_contact_id' is set
        if ('organizer_contact_id' not in params) or (params['organizer_contact_id'] is None):
            raise ValueError("Missing the required parameter `organizer_contact_id` when calling `create_event_0`")
        # verify the required parameter 'start_time' is set
        if ('start_time' not in params) or (params['start_time'] is None):
            raise ValueError("Missing the required parameter `start_time` when calling `create_event_0`")
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params) or (params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `create_event_0`")
        # verify the required parameter 'title' is set
        if ('title' not in params) or (params['title'] is None):
            raise ValueError("Missing the required parameter `title` when calling `create_event_0`")
        # verify the required parameter 'attendees' is set
        if ('attendees' not in params) or (params['attendees'] is None):
            raise ValueError("Missing the required parameter `attendees` when calling `create_event_0`")

        if 'title' in params and len(params['title']) > 64:
            raise ValueError("Invalid value for parameter `title` when calling `create_event_0`, length must be less than or equal to `64`")
        if 'location' in params and len(params['location']) > 64:
            raise ValueError("Invalid value for parameter `location` when calling `create_event_0`, length must be less than or equal to `64`")

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id' in params:
            form_params.append(('id', params['id']))
        if 'organizer_contact_id' in params:
            form_params.append(('organizer_contact_id', params['organizer_contact_id']))
        if 'start_time' in params:
            form_params.append(('start_time', params['start_time']))
        if 'end_time' in params:
            form_params.append(('end_time', params['end_time']))
        if 'title' in params:
            form_params.append(('title', params['title']))
        if 'description' in params:
            form_params.append(('description', params['description']))
        if 'location' in params:
            form_params.append(('location', params['location']))
        if 'attendees' in params:
            form_params.append(('attendees', params['attendees']))
            collection_formats['attendees'] = 'multi'
        if 'status' in params:
            form_params.append(('status', params['status']))
        if 'reschedule_count' in params:
            form_params.append(('reschedule_count', params['reschedule_count']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/events', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2012',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_event(self, id, **kwargs):
        """
        Delete Event
        Delete a single event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_event(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Event id (required)
        :return: InlineResponse2012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_event_with_http_info(id, **kwargs)
        else:
            (data) = self.delete_event_with_http_info(id, **kwargs)
            return data

    def delete_event_with_http_info(self, id, **kwargs):
        """
        Delete Event
        Delete a single event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_event_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Event id (required)
        :return: InlineResponse2012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_event`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/events/{id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2012',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_event_0(self, id, **kwargs):
        """
        Delete Event
        Delete a single event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_event_0(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Event id (required)
        :return: InlineResponse2012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_event_0_with_http_info(id, **kwargs)
        else:
            (data) = self.delete_event_0_with_http_info(id, **kwargs)
            return data

    def delete_event_0_with_http_info(self, id, **kwargs):
        """
        Delete Event
        Delete a single event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_event_0_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Event id (required)
        :return: InlineResponse2012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_event_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_event_0`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/events/{id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2012',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_event(self, id, **kwargs):
        """
        Get Event
        Get information about an event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Event id (required)
        :return: InlineResponse2012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_event_with_http_info(id, **kwargs)
        else:
            (data) = self.get_event_with_http_info(id, **kwargs)
            return data

    def get_event_with_http_info(self, id, **kwargs):
        """
        Get Event
        Get information about an event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Event id (required)
        :return: InlineResponse2012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_event`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/events/{id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2012',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_event_0(self, id, **kwargs):
        """
        Get Event
        Get information about an event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_0(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Event id (required)
        :return: InlineResponse2012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_event_0_with_http_info(id, **kwargs)
        else:
            (data) = self.get_event_0_with_http_info(id, **kwargs)
            return data

    def get_event_0_with_http_info(self, id, **kwargs):
        """
        Get Event
        Get information about an event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_0_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Event id (required)
        :return: InlineResponse2012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_event_0`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/events/{id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2012',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_events(self, **kwargs):
        """
        Get Events
        Get a list of all events.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_events(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_events_with_http_info(**kwargs)
        else:
            (data) = self.get_events_with_http_info(**kwargs)
            return data

    def get_events_with_http_info(self, **kwargs):
        """
        Get Events
        Get a list of all events.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_events_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_events" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/events', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2001',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_events_0(self, **kwargs):
        """
        Get Events
        Get a list of all events.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_events_0(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_events_0_with_http_info(**kwargs)
        else:
            (data) = self.get_events_0_with_http_info(**kwargs)
            return data

    def get_events_0_with_http_info(self, **kwargs):
        """
        Get Events
        Get a list of all events.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_events_0_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_events_0" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/events', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2001',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_event(self, id, **kwargs):
        """
        Update Event
        Update an event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_event(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Event id (required)
        :param str organizer_contact_id: Event organizer contact id
        :param date start_time: Event start time
        :param date end_time: Event end time
        :param str title: Event title
        :param str description: Event description
        :param str location: Event location
        :param list[str] attendees: Event attendee contact ids
        :param str status: Event status
        :param float reschedule_count: Event reschedule count
        :return: InlineResponse2012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_event_with_http_info(id, **kwargs)
        else:
            (data) = self.update_event_with_http_info(id, **kwargs)
            return data

    def update_event_with_http_info(self, id, **kwargs):
        """
        Update Event
        Update an event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_event_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Event id (required)
        :param str organizer_contact_id: Event organizer contact id
        :param date start_time: Event start time
        :param date end_time: Event end time
        :param str title: Event title
        :param str description: Event description
        :param str location: Event location
        :param list[str] attendees: Event attendee contact ids
        :param str status: Event status
        :param float reschedule_count: Event reschedule count
        :return: InlineResponse2012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'organizer_contact_id', 'start_time', 'end_time', 'title', 'description', 'location', 'attendees', 'status', 'reschedule_count']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_event`")

        if 'title' in params and len(params['title']) > 64:
            raise ValueError("Invalid value for parameter `title` when calling `update_event`, length must be less than or equal to `64`")
        if 'location' in params and len(params['location']) > 64:
            raise ValueError("Invalid value for parameter `location` when calling `update_event`, length must be less than or equal to `64`")

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'organizer_contact_id' in params:
            form_params.append(('organizer_contact_id', params['organizer_contact_id']))
        if 'start_time' in params:
            form_params.append(('start_time', params['start_time']))
        if 'end_time' in params:
            form_params.append(('end_time', params['end_time']))
        if 'title' in params:
            form_params.append(('title', params['title']))
        if 'description' in params:
            form_params.append(('description', params['description']))
        if 'location' in params:
            form_params.append(('location', params['location']))
        if 'attendees' in params:
            form_params.append(('attendees', params['attendees']))
            collection_formats['attendees'] = 'multi'
        if 'status' in params:
            form_params.append(('status', params['status']))
        if 'reschedule_count' in params:
            form_params.append(('reschedule_count', params['reschedule_count']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/events/{id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2012',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_event_0(self, id, **kwargs):
        """
        Update Event
        Update an event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_event_0(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Event id (required)
        :param str organizer_contact_id: Event organizer contact id
        :param date start_time: Event start time
        :param date end_time: Event end time
        :param str title: Event title
        :param str description: Event description
        :param str location: Event location
        :param list[str] attendees: Event attendee contact ids
        :param str status: Event status
        :param float reschedule_count: Event reschedule count
        :return: InlineResponse2012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_event_0_with_http_info(id, **kwargs)
        else:
            (data) = self.update_event_0_with_http_info(id, **kwargs)
            return data

    def update_event_0_with_http_info(self, id, **kwargs):
        """
        Update Event
        Update an event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_event_0_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Event id (required)
        :param str organizer_contact_id: Event organizer contact id
        :param date start_time: Event start time
        :param date end_time: Event end time
        :param str title: Event title
        :param str description: Event description
        :param str location: Event location
        :param list[str] attendees: Event attendee contact ids
        :param str status: Event status
        :param float reschedule_count: Event reschedule count
        :return: InlineResponse2012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'organizer_contact_id', 'start_time', 'end_time', 'title', 'description', 'location', 'attendees', 'status', 'reschedule_count']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_event_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_event_0`")

        if 'title' in params and len(params['title']) > 64:
            raise ValueError("Invalid value for parameter `title` when calling `update_event_0`, length must be less than or equal to `64`")
        if 'location' in params and len(params['location']) > 64:
            raise ValueError("Invalid value for parameter `location` when calling `update_event_0`, length must be less than or equal to `64`")

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'organizer_contact_id' in params:
            form_params.append(('organizer_contact_id', params['organizer_contact_id']))
        if 'start_time' in params:
            form_params.append(('start_time', params['start_time']))
        if 'end_time' in params:
            form_params.append(('end_time', params['end_time']))
        if 'title' in params:
            form_params.append(('title', params['title']))
        if 'description' in params:
            form_params.append(('description', params['description']))
        if 'location' in params:
            form_params.append(('location', params['location']))
        if 'attendees' in params:
            form_params.append(('attendees', params['attendees']))
            collection_formats['attendees'] = 'multi'
        if 'status' in params:
            form_params.append(('status', params['status']))
        if 'reschedule_count' in params:
            form_params.append(('reschedule_count', params['reschedule_count']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/events/{id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2012',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
