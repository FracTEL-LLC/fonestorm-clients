# coding: utf-8

"""
    FoneStorm API 2.4.0 (Thunder)

    FracTEL's Middleware API

    OpenAPI spec version: 2.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class FonenumbersApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_fonenumber(self, area_code, **kwargs):
        """
        Create FoneNumber
        Order a new FoneNumber for a given area code.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_fonenumber(area_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str area_code: Valid 3-digit area code (required)
        :return: InlineResponse2014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_fonenumber_with_http_info(area_code, **kwargs)
        else:
            (data) = self.create_fonenumber_with_http_info(area_code, **kwargs)
            return data

    def create_fonenumber_with_http_info(self, area_code, **kwargs):
        """
        Create FoneNumber
        Order a new FoneNumber for a given area code.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_fonenumber_with_http_info(area_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str area_code: Valid 3-digit area code (required)
        :return: InlineResponse2014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['area_code']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_fonenumber" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'area_code' is set
        if ('area_code' not in params) or (params['area_code'] is None):
            raise ValueError("Missing the required parameter `area_code` when calling `create_fonenumber`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'area_code' in params:
            form_params.append(('area_code', params['area_code']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/fonenumbers', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2014',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_fonenumber_0(self, area_code, **kwargs):
        """
        Create FoneNumber
        Order a new FoneNumber for a given area code.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_fonenumber_0(area_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str area_code: Valid 3-digit area code (required)
        :return: InlineResponse2014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_fonenumber_0_with_http_info(area_code, **kwargs)
        else:
            (data) = self.create_fonenumber_0_with_http_info(area_code, **kwargs)
            return data

    def create_fonenumber_0_with_http_info(self, area_code, **kwargs):
        """
        Create FoneNumber
        Order a new FoneNumber for a given area code.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_fonenumber_0_with_http_info(area_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str area_code: Valid 3-digit area code (required)
        :return: InlineResponse2014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['area_code']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_fonenumber_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'area_code' is set
        if ('area_code' not in params) or (params['area_code'] is None):
            raise ValueError("Missing the required parameter `area_code` when calling `create_fonenumber_0`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'area_code' in params:
            form_params.append(('area_code', params['area_code']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/fonenumbers', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2014',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_fonenumber(self, fonenumber, **kwargs):
        """
        Delete FoneNumber
        Remove a FoneNumber from an account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_fonenumber(fonenumber, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str fonenumber: FoneNumber associated with the account (required)
        :return: InlineResponse2014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_fonenumber_with_http_info(fonenumber, **kwargs)
        else:
            (data) = self.delete_fonenumber_with_http_info(fonenumber, **kwargs)
            return data

    def delete_fonenumber_with_http_info(self, fonenumber, **kwargs):
        """
        Delete FoneNumber
        Remove a FoneNumber from an account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_fonenumber_with_http_info(fonenumber, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str fonenumber: FoneNumber associated with the account (required)
        :return: InlineResponse2014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fonenumber']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_fonenumber" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fonenumber' is set
        if ('fonenumber' not in params) or (params['fonenumber'] is None):
            raise ValueError("Missing the required parameter `fonenumber` when calling `delete_fonenumber`")


        collection_formats = {}

        path_params = {}
        if 'fonenumber' in params:
            path_params['fonenumber'] = params['fonenumber']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/fonenumbers/{fonenumber}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2014',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_fonenumber_0(self, fonenumber, **kwargs):
        """
        Delete FoneNumber
        Remove a FoneNumber from an account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_fonenumber_0(fonenumber, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str fonenumber: FoneNumber associated with the account (required)
        :return: InlineResponse2014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_fonenumber_0_with_http_info(fonenumber, **kwargs)
        else:
            (data) = self.delete_fonenumber_0_with_http_info(fonenumber, **kwargs)
            return data

    def delete_fonenumber_0_with_http_info(self, fonenumber, **kwargs):
        """
        Delete FoneNumber
        Remove a FoneNumber from an account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_fonenumber_0_with_http_info(fonenumber, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str fonenumber: FoneNumber associated with the account (required)
        :return: InlineResponse2014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fonenumber']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_fonenumber_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fonenumber' is set
        if ('fonenumber' not in params) or (params['fonenumber'] is None):
            raise ValueError("Missing the required parameter `fonenumber` when calling `delete_fonenumber_0`")


        collection_formats = {}

        path_params = {}
        if 'fonenumber' in params:
            path_params['fonenumber'] = params['fonenumber']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/fonenumbers/{fonenumber}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2014',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_fonenumber(self, fonenumber, **kwargs):
        """
        Get FoneNumber
        Get information for a single FoneNumber.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fonenumber(fonenumber, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str fonenumber: FoneNumber associated with the account (required)
        :return: InlineResponse2014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_fonenumber_with_http_info(fonenumber, **kwargs)
        else:
            (data) = self.get_fonenumber_with_http_info(fonenumber, **kwargs)
            return data

    def get_fonenumber_with_http_info(self, fonenumber, **kwargs):
        """
        Get FoneNumber
        Get information for a single FoneNumber.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fonenumber_with_http_info(fonenumber, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str fonenumber: FoneNumber associated with the account (required)
        :return: InlineResponse2014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fonenumber']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fonenumber" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fonenumber' is set
        if ('fonenumber' not in params) or (params['fonenumber'] is None):
            raise ValueError("Missing the required parameter `fonenumber` when calling `get_fonenumber`")


        collection_formats = {}

        path_params = {}
        if 'fonenumber' in params:
            path_params['fonenumber'] = params['fonenumber']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/fonenumbers/{fonenumber}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2014',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_fonenumber_0(self, fonenumber, **kwargs):
        """
        Get FoneNumber
        Get information for a single FoneNumber.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fonenumber_0(fonenumber, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str fonenumber: FoneNumber associated with the account (required)
        :return: InlineResponse2014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_fonenumber_0_with_http_info(fonenumber, **kwargs)
        else:
            (data) = self.get_fonenumber_0_with_http_info(fonenumber, **kwargs)
            return data

    def get_fonenumber_0_with_http_info(self, fonenumber, **kwargs):
        """
        Get FoneNumber
        Get information for a single FoneNumber.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fonenumber_0_with_http_info(fonenumber, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str fonenumber: FoneNumber associated with the account (required)
        :return: InlineResponse2014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fonenumber']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fonenumber_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fonenumber' is set
        if ('fonenumber' not in params) or (params['fonenumber'] is None):
            raise ValueError("Missing the required parameter `fonenumber` when calling `get_fonenumber_0`")


        collection_formats = {}

        path_params = {}
        if 'fonenumber' in params:
            path_params['fonenumber'] = params['fonenumber']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/fonenumbers/{fonenumber}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2014',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_fonenumbers(self, **kwargs):
        """
        Get FoneNumbers
        Get a list of all FoneNumbers, or a selection based on a filter.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fonenumbers(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str filter: Filter the response attributes. Allowed values are `fonenumbers` or `all`. See **Notes** for additional information.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_fonenumbers_with_http_info(**kwargs)
        else:
            (data) = self.get_fonenumbers_with_http_info(**kwargs)
            return data

    def get_fonenumbers_with_http_info(self, **kwargs):
        """
        Get FoneNumbers
        Get a list of all FoneNumbers, or a selection based on a filter.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fonenumbers_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str filter: Filter the response attributes. Allowed values are `fonenumbers` or `all`. See **Notes** for additional information.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fonenumbers" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/fonenumbers', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2001',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_fonenumbers_0(self, **kwargs):
        """
        Get FoneNumbers
        Get a list of all FoneNumbers, or a selection based on a filter.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fonenumbers_0(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str filter: Filter the response attributes. Allowed values are `fonenumbers` or `all`. See **Notes** for additional information.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_fonenumbers_0_with_http_info(**kwargs)
        else:
            (data) = self.get_fonenumbers_0_with_http_info(**kwargs)
            return data

    def get_fonenumbers_0_with_http_info(self, **kwargs):
        """
        Get FoneNumbers
        Get a list of all FoneNumbers, or a selection based on a filter.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fonenumbers_0_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str filter: Filter the response attributes. Allowed values are `fonenumbers` or `all`. See **Notes** for additional information.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fonenumbers_0" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/fonenumbers', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2001',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def set_fonenumber_service_type(self, fonenumber, service_type, **kwargs):
        """
        Set Service Type
        Set service type for a FoneNumber.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_fonenumber_service_type(fonenumber, service_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str fonenumber: FoneNumber associated with the account (required)
        :param str service_type: Service type. Allowed values are `Conference`, `Hangup`, `Busy`, `Reject` (required)
        :param str service_id: Service id
        :return: InlineResponse2014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.set_fonenumber_service_type_with_http_info(fonenumber, service_type, **kwargs)
        else:
            (data) = self.set_fonenumber_service_type_with_http_info(fonenumber, service_type, **kwargs)
            return data

    def set_fonenumber_service_type_with_http_info(self, fonenumber, service_type, **kwargs):
        """
        Set Service Type
        Set service type for a FoneNumber.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_fonenumber_service_type_with_http_info(fonenumber, service_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str fonenumber: FoneNumber associated with the account (required)
        :param str service_type: Service type. Allowed values are `Conference`, `Hangup`, `Busy`, `Reject` (required)
        :param str service_id: Service id
        :return: InlineResponse2014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fonenumber', 'service_type', 'service_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_fonenumber_service_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fonenumber' is set
        if ('fonenumber' not in params) or (params['fonenumber'] is None):
            raise ValueError("Missing the required parameter `fonenumber` when calling `set_fonenumber_service_type`")
        # verify the required parameter 'service_type' is set
        if ('service_type' not in params) or (params['service_type'] is None):
            raise ValueError("Missing the required parameter `service_type` when calling `set_fonenumber_service_type`")


        collection_formats = {}

        path_params = {}
        if 'fonenumber' in params:
            path_params['fonenumber'] = params['fonenumber']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'service_type' in params:
            form_params.append(('service_type', params['service_type']))
        if 'service_id' in params:
            form_params.append(('service_id', params['service_id']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/fonenumbers/{fonenumber}/service', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2014',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def set_fonenumber_service_type_0(self, fonenumber, service_type, **kwargs):
        """
        Set Service Type
        Set service type for a FoneNumber.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_fonenumber_service_type_0(fonenumber, service_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str fonenumber: FoneNumber associated with the account (required)
        :param str service_type: Service type. Allowed values are `Conference`, `Hangup`, `Busy`, `Reject` (required)
        :param str service_id: Service id
        :return: InlineResponse2014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.set_fonenumber_service_type_0_with_http_info(fonenumber, service_type, **kwargs)
        else:
            (data) = self.set_fonenumber_service_type_0_with_http_info(fonenumber, service_type, **kwargs)
            return data

    def set_fonenumber_service_type_0_with_http_info(self, fonenumber, service_type, **kwargs):
        """
        Set Service Type
        Set service type for a FoneNumber.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_fonenumber_service_type_0_with_http_info(fonenumber, service_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str fonenumber: FoneNumber associated with the account (required)
        :param str service_type: Service type. Allowed values are `Conference`, `Hangup`, `Busy`, `Reject` (required)
        :param str service_id: Service id
        :return: InlineResponse2014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fonenumber', 'service_type', 'service_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_fonenumber_service_type_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fonenumber' is set
        if ('fonenumber' not in params) or (params['fonenumber'] is None):
            raise ValueError("Missing the required parameter `fonenumber` when calling `set_fonenumber_service_type_0`")
        # verify the required parameter 'service_type' is set
        if ('service_type' not in params) or (params['service_type'] is None):
            raise ValueError("Missing the required parameter `service_type` when calling `set_fonenumber_service_type_0`")


        collection_formats = {}

        path_params = {}
        if 'fonenumber' in params:
            path_params['fonenumber'] = params['fonenumber']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'service_type' in params:
            form_params.append(('service_type', params['service_type']))
        if 'service_id' in params:
            form_params.append(('service_id', params['service_id']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/fonenumbers/{fonenumber}/service', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2014',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_fonenumber(self, fonenumber, type, value, url_method, **kwargs):
        """
        Update FoneNumber
        Update a FoneNumber.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_fonenumber(fonenumber, type, value, url_method, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str fonenumber: FoneNumber associated with the account (required)
        :param str type: Message routing type. Allowed values are `None`, `Device`, `Email`, `URL`, or `Forward`. (required)
        :param str value: Message routing type value (required)
        :param str url_method: URL method. Allowed values are `GET`, `POST`, or `JSON`. See **Notes** for additional information. (required)
        :param str url_username: Username for HTTP **Basic** authentication scheme
        :param str url_password: Password for HTTP **Basic** authentication scheme
        :return: InlineResponse2014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_fonenumber_with_http_info(fonenumber, type, value, url_method, **kwargs)
        else:
            (data) = self.update_fonenumber_with_http_info(fonenumber, type, value, url_method, **kwargs)
            return data

    def update_fonenumber_with_http_info(self, fonenumber, type, value, url_method, **kwargs):
        """
        Update FoneNumber
        Update a FoneNumber.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_fonenumber_with_http_info(fonenumber, type, value, url_method, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str fonenumber: FoneNumber associated with the account (required)
        :param str type: Message routing type. Allowed values are `None`, `Device`, `Email`, `URL`, or `Forward`. (required)
        :param str value: Message routing type value (required)
        :param str url_method: URL method. Allowed values are `GET`, `POST`, or `JSON`. See **Notes** for additional information. (required)
        :param str url_username: Username for HTTP **Basic** authentication scheme
        :param str url_password: Password for HTTP **Basic** authentication scheme
        :return: InlineResponse2014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fonenumber', 'type', 'value', 'url_method', 'url_username', 'url_password']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_fonenumber" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fonenumber' is set
        if ('fonenumber' not in params) or (params['fonenumber'] is None):
            raise ValueError("Missing the required parameter `fonenumber` when calling `update_fonenumber`")
        # verify the required parameter 'type' is set
        if ('type' not in params) or (params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `update_fonenumber`")
        # verify the required parameter 'value' is set
        if ('value' not in params) or (params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `update_fonenumber`")
        # verify the required parameter 'url_method' is set
        if ('url_method' not in params) or (params['url_method'] is None):
            raise ValueError("Missing the required parameter `url_method` when calling `update_fonenumber`")


        collection_formats = {}

        path_params = {}
        if 'fonenumber' in params:
            path_params['fonenumber'] = params['fonenumber']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'type' in params:
            form_params.append(('type', params['type']))
        if 'value' in params:
            form_params.append(('value', params['value']))
        if 'url_method' in params:
            form_params.append(('url_method', params['url_method']))
        if 'url_username' in params:
            form_params.append(('url_username', params['url_username']))
        if 'url_password' in params:
            form_params.append(('url_password', params['url_password']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/fonenumbers/{fonenumber}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2014',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_fonenumber_0(self, fonenumber, type, value, url_method, **kwargs):
        """
        Update FoneNumber
        Update a FoneNumber.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_fonenumber_0(fonenumber, type, value, url_method, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str fonenumber: FoneNumber associated with the account (required)
        :param str type: Message routing type. Allowed values are `None`, `Device`, `Email`, `URL`, or `Forward`. (required)
        :param str value: Message routing type value (required)
        :param str url_method: URL method. Allowed values are `GET`, `POST`, or `JSON`. See **Notes** for additional information. (required)
        :param str url_username: Username for HTTP **Basic** authentication scheme
        :param str url_password: Password for HTTP **Basic** authentication scheme
        :return: InlineResponse2014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_fonenumber_0_with_http_info(fonenumber, type, value, url_method, **kwargs)
        else:
            (data) = self.update_fonenumber_0_with_http_info(fonenumber, type, value, url_method, **kwargs)
            return data

    def update_fonenumber_0_with_http_info(self, fonenumber, type, value, url_method, **kwargs):
        """
        Update FoneNumber
        Update a FoneNumber.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_fonenumber_0_with_http_info(fonenumber, type, value, url_method, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str fonenumber: FoneNumber associated with the account (required)
        :param str type: Message routing type. Allowed values are `None`, `Device`, `Email`, `URL`, or `Forward`. (required)
        :param str value: Message routing type value (required)
        :param str url_method: URL method. Allowed values are `GET`, `POST`, or `JSON`. See **Notes** for additional information. (required)
        :param str url_username: Username for HTTP **Basic** authentication scheme
        :param str url_password: Password for HTTP **Basic** authentication scheme
        :return: InlineResponse2014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fonenumber', 'type', 'value', 'url_method', 'url_username', 'url_password']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_fonenumber_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fonenumber' is set
        if ('fonenumber' not in params) or (params['fonenumber'] is None):
            raise ValueError("Missing the required parameter `fonenumber` when calling `update_fonenumber_0`")
        # verify the required parameter 'type' is set
        if ('type' not in params) or (params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `update_fonenumber_0`")
        # verify the required parameter 'value' is set
        if ('value' not in params) or (params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `update_fonenumber_0`")
        # verify the required parameter 'url_method' is set
        if ('url_method' not in params) or (params['url_method'] is None):
            raise ValueError("Missing the required parameter `url_method` when calling `update_fonenumber_0`")


        collection_formats = {}

        path_params = {}
        if 'fonenumber' in params:
            path_params['fonenumber'] = params['fonenumber']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'type' in params:
            form_params.append(('type', params['type']))
        if 'value' in params:
            form_params.append(('value', params['value']))
        if 'url_method' in params:
            form_params.append(('url_method', params['url_method']))
        if 'url_username' in params:
            form_params.append(('url_username', params['url_username']))
        if 'url_password' in params:
            form_params.append(('url_password', params['url_password']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/fonenumbers/{fonenumber}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2014',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
