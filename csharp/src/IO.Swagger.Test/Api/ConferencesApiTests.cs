/* 
 * FoneStorm API 2.4.0 (Thunder)
 *
 * FracTEL's Middleware API
 *
 * OpenAPI spec version: 2.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ConferencesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ConferencesApiTests
    {
        private ConferencesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ConferencesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ConferencesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ConferencesApi
            //Assert.IsInstanceOfType(typeof(ConferencesApi), instance, "instance is a ConferencesApi");
        }

        
        /// <summary>
        /// Test CreateConference
        /// </summary>
        [Test]
        public void CreateConferenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string label = null;
            //DateTime? startTime = null;
            //DateTime? endTime = null;
            //BigDecimal fonenumber = null;
            //string beforeMessage = null;
            //string afterMessage = null;
            //decimal? maxMembers = null;
            //var response = instance.CreateConference(label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers);
            //Assert.IsInstanceOf<InlineResponse2013> (response, "response is InlineResponse2013");
        }
        
        /// <summary>
        /// Test CreateConference_0
        /// </summary>
        [Test]
        public void CreateConference_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string label = null;
            //DateTime? startTime = null;
            //DateTime? endTime = null;
            //BigDecimal fonenumber = null;
            //string beforeMessage = null;
            //string afterMessage = null;
            //decimal? maxMembers = null;
            //var response = instance.CreateConference_0(label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers);
            //Assert.IsInstanceOf<InlineResponse2013> (response, "response is InlineResponse2013");
        }
        
        /// <summary>
        /// Test DeleteConference
        /// </summary>
        [Test]
        public void DeleteConferenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DeleteConference(id);
            //Assert.IsInstanceOf<InlineResponse2013> (response, "response is InlineResponse2013");
        }
        
        /// <summary>
        /// Test DeleteConference_0
        /// </summary>
        [Test]
        public void DeleteConference_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DeleteConference_0(id);
            //Assert.IsInstanceOf<InlineResponse2013> (response, "response is InlineResponse2013");
        }
        
        /// <summary>
        /// Test GetConference
        /// </summary>
        [Test]
        public void GetConferenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetConference(id);
            //Assert.IsInstanceOf<InlineResponse2013> (response, "response is InlineResponse2013");
        }
        
        /// <summary>
        /// Test GetConferenceFonenumbers
        /// </summary>
        [Test]
        public void GetConferenceFonenumbersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetConferenceFonenumbers(id);
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        
        /// <summary>
        /// Test GetConferenceFonenumbers_0
        /// </summary>
        [Test]
        public void GetConferenceFonenumbers_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetConferenceFonenumbers_0(id);
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        
        /// <summary>
        /// Test GetConference_0
        /// </summary>
        [Test]
        public void GetConference_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetConference_0(id);
            //Assert.IsInstanceOf<InlineResponse2013> (response, "response is InlineResponse2013");
        }
        
        /// <summary>
        /// Test GetConferences
        /// </summary>
        [Test]
        public void GetConferencesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetConferences();
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test GetConferences_0
        /// </summary>
        [Test]
        public void GetConferences_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetConferences_0();
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test UpdateConference
        /// </summary>
        [Test]
        public void UpdateConferenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string label = null;
            //DateTime? startTime = null;
            //DateTime? endTime = null;
            //BigDecimal fonenumber = null;
            //string beforeMessage = null;
            //string afterMessage = null;
            //decimal? maxMembers = null;
            //var response = instance.UpdateConference(id, label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers);
            //Assert.IsInstanceOf<InlineResponse2013> (response, "response is InlineResponse2013");
        }
        
        /// <summary>
        /// Test UpdateConference_0
        /// </summary>
        [Test]
        public void UpdateConference_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string label = null;
            //DateTime? startTime = null;
            //DateTime? endTime = null;
            //BigDecimal fonenumber = null;
            //string beforeMessage = null;
            //string afterMessage = null;
            //decimal? maxMembers = null;
            //var response = instance.UpdateConference_0(id, label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers);
            //Assert.IsInstanceOf<InlineResponse2013> (response, "response is InlineResponse2013");
        }
        
    }

}
