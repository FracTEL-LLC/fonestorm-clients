/* 
 * FoneStorm API 2.2.0 (Breeze)
 *
 * FracTEL's Middleware API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing AccountsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AccountsApiTests
    {
        private AccountsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AccountsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AccountsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AccountsApi
            //Assert.IsInstanceOfType(typeof(AccountsApi), instance, "instance is a AccountsApi");
        }

        
        /// <summary>
        /// Test ConfigureAccountCdrNotify
        /// </summary>
        [Test]
        public void ConfigureAccountCdrNotifyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string method = null;
            //string url = null;
            //string username = null;
            //string password = null;
            //var response = instance.ConfigureAccountCdrNotify(accountId, method, url, username, password);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test ConfigureAccountCdrNotify_0
        /// </summary>
        [Test]
        public void ConfigureAccountCdrNotify_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string method = null;
            //string url = null;
            //string username = null;
            //string password = null;
            //var response = instance.ConfigureAccountCdrNotify_0(accountId, method, url, username, password);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test GetAccount
        /// </summary>
        [Test]
        public void GetAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetAccount(id);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test GetAccount_0
        /// </summary>
        [Test]
        public void GetAccount_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetAccount_0(id);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test UpdateAccount
        /// </summary>
        [Test]
        public void UpdateAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string primaryColor = null;
            //string secondaryColor = null;
            //string backgroundColor = null;
            //string fontFamily = null;
            //string logo = null;
            //var response = instance.UpdateAccount(id, primaryColor, secondaryColor, backgroundColor, fontFamily, logo);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test UpdateAccount_0
        /// </summary>
        [Test]
        public void UpdateAccount_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string primaryColor = null;
            //string secondaryColor = null;
            //string backgroundColor = null;
            //string fontFamily = null;
            //string logo = null;
            //var response = instance.UpdateAccount_0(id, primaryColor, secondaryColor, backgroundColor, fontFamily, logo);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
    }

}
