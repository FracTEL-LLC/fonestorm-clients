/* 
 * FoneStorm API 2.4.0 (Thunder)
 *
 * FracTEL's Middleware API
 *
 * OpenAPI spec version: 2.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FoneNumber
    /// </summary>
    [DataContract]
    public partial class FoneNumber :  IEquatable<FoneNumber>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FoneNumber" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FoneNumber() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FoneNumber" /> class.
        /// </summary>
        /// <param name="_Fonenumber">FoneNumber. (required).</param>
        /// <param name="State">US State for fonenumber..</param>
        /// <param name="RateCenter">Rate center for fonenumber..</param>
        /// <param name="IsActive">Status of FoneNumber..</param>
        /// <param name="Service">Service.</param>
        /// <param name="SmsOptions">SmsOptions.</param>
        /// <param name="VoiceOptions">VoiceOptions.</param>
        /// <param name="FaxOptions">FaxOptions.</param>
        public FoneNumber(string _Fonenumber = default(string), string State = default(string), string RateCenter = default(string), string IsActive = default(string), FoneNumberService Service = default(FoneNumberService), FoneNumberSmsOptions SmsOptions = default(FoneNumberSmsOptions), FoneNumberVoiceOptions VoiceOptions = default(FoneNumberVoiceOptions), FoneNumberFaxOptions FaxOptions = default(FoneNumberFaxOptions))
        {
            // to ensure "_Fonenumber" is required (not null)
            if (_Fonenumber == null)
            {
                throw new InvalidDataException("_Fonenumber is a required property for FoneNumber and cannot be null");
            }
            else
            {
                this._Fonenumber = _Fonenumber;
            }
            this.State = State;
            this.RateCenter = RateCenter;
            this.IsActive = IsActive;
            this.Service = Service;
            this.SmsOptions = SmsOptions;
            this.VoiceOptions = VoiceOptions;
            this.FaxOptions = FaxOptions;
        }
        
        /// <summary>
        /// FoneNumber.
        /// </summary>
        /// <value>FoneNumber.</value>
        [DataMember(Name="fonenumber", EmitDefaultValue=false)]
        public string _Fonenumber { get; set; }

        /// <summary>
        /// US State for fonenumber.
        /// </summary>
        /// <value>US State for fonenumber.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Rate center for fonenumber.
        /// </summary>
        /// <value>Rate center for fonenumber.</value>
        [DataMember(Name="rate_center", EmitDefaultValue=false)]
        public string RateCenter { get; set; }

        /// <summary>
        /// Status of FoneNumber.
        /// </summary>
        /// <value>Status of FoneNumber.</value>
        [DataMember(Name="is_active", EmitDefaultValue=false)]
        public string IsActive { get; set; }

        /// <summary>
        /// Gets or Sets Service
        /// </summary>
        [DataMember(Name="service", EmitDefaultValue=false)]
        public FoneNumberService Service { get; set; }

        /// <summary>
        /// Gets or Sets SmsOptions
        /// </summary>
        [DataMember(Name="sms_options", EmitDefaultValue=false)]
        public FoneNumberSmsOptions SmsOptions { get; set; }

        /// <summary>
        /// Gets or Sets VoiceOptions
        /// </summary>
        [DataMember(Name="voice_options", EmitDefaultValue=false)]
        public FoneNumberVoiceOptions VoiceOptions { get; set; }

        /// <summary>
        /// Gets or Sets FaxOptions
        /// </summary>
        [DataMember(Name="fax_options", EmitDefaultValue=false)]
        public FoneNumberFaxOptions FaxOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FoneNumber {\n");
            sb.Append("  _Fonenumber: ").Append(_Fonenumber).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  RateCenter: ").Append(RateCenter).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  SmsOptions: ").Append(SmsOptions).Append("\n");
            sb.Append("  VoiceOptions: ").Append(VoiceOptions).Append("\n");
            sb.Append("  FaxOptions: ").Append(FaxOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FoneNumber);
        }

        /// <summary>
        /// Returns true if FoneNumber instances are equal
        /// </summary>
        /// <param name="other">Instance of FoneNumber to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FoneNumber other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this._Fonenumber == other._Fonenumber ||
                    this._Fonenumber != null &&
                    this._Fonenumber.Equals(other._Fonenumber)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.RateCenter == other.RateCenter ||
                    this.RateCenter != null &&
                    this.RateCenter.Equals(other.RateCenter)
                ) && 
                (
                    this.IsActive == other.IsActive ||
                    this.IsActive != null &&
                    this.IsActive.Equals(other.IsActive)
                ) && 
                (
                    this.Service == other.Service ||
                    this.Service != null &&
                    this.Service.Equals(other.Service)
                ) && 
                (
                    this.SmsOptions == other.SmsOptions ||
                    this.SmsOptions != null &&
                    this.SmsOptions.Equals(other.SmsOptions)
                ) && 
                (
                    this.VoiceOptions == other.VoiceOptions ||
                    this.VoiceOptions != null &&
                    this.VoiceOptions.Equals(other.VoiceOptions)
                ) && 
                (
                    this.FaxOptions == other.FaxOptions ||
                    this.FaxOptions != null &&
                    this.FaxOptions.Equals(other.FaxOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this._Fonenumber != null)
                    hash = hash * 59 + this._Fonenumber.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.RateCenter != null)
                    hash = hash * 59 + this.RateCenter.GetHashCode();
                if (this.IsActive != null)
                    hash = hash * 59 + this.IsActive.GetHashCode();
                if (this.Service != null)
                    hash = hash * 59 + this.Service.GetHashCode();
                if (this.SmsOptions != null)
                    hash = hash * 59 + this.SmsOptions.GetHashCode();
                if (this.VoiceOptions != null)
                    hash = hash * 59 + this.VoiceOptions.GetHashCode();
                if (this.FaxOptions != null)
                    hash = hash * 59 + this.FaxOptions.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
