/* 
 * FoneStorm API 2.2.0 (Breeze)
 *
 * FracTEL's Middleware API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Account
    /// </summary>
    [DataContract]
    public partial class Account :  IEquatable<Account>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Account" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Account() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Account" /> class.
        /// </summary>
        /// <param name="BackgroundColor">Account background color..</param>
        /// <param name="Id">Unique identifier of account. (required).</param>
        /// <param name="CdrNotifyUrl">Call dialing record callback URL..</param>
        /// <param name="CdrNotifyMethod">Call dialing record callback URL method..</param>
        /// <param name="CdrNotifyPassword">Call dialing record callback URL password..</param>
        /// <param name="CdrNotifyUsername">Call dialing record callback URL username..</param>
        /// <param name="FontFamily">Account font family..</param>
        /// <param name="PrimaryColor">Account primary brand color..</param>
        /// <param name="SecondaryColor">Account secondary brand color..</param>
        public Account(string BackgroundColor = default(string), string Id = default(string), string CdrNotifyUrl = default(string), string CdrNotifyMethod = default(string), string CdrNotifyPassword = default(string), string CdrNotifyUsername = default(string), string FontFamily = default(string), string PrimaryColor = default(string), string SecondaryColor = default(string))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for Account and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            this.BackgroundColor = BackgroundColor;
            this.CdrNotifyUrl = CdrNotifyUrl;
            this.CdrNotifyMethod = CdrNotifyMethod;
            this.CdrNotifyPassword = CdrNotifyPassword;
            this.CdrNotifyUsername = CdrNotifyUsername;
            this.FontFamily = FontFamily;
            this.PrimaryColor = PrimaryColor;
            this.SecondaryColor = SecondaryColor;
        }
        
        /// <summary>
        /// Account background color.
        /// </summary>
        /// <value>Account background color.</value>
        [DataMember(Name="background_color", EmitDefaultValue=false)]
        public string BackgroundColor { get; set; }

        /// <summary>
        /// Unique identifier of account.
        /// </summary>
        /// <value>Unique identifier of account.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Call dialing record callback URL.
        /// </summary>
        /// <value>Call dialing record callback URL.</value>
        [DataMember(Name="cdr_notify_url", EmitDefaultValue=false)]
        public string CdrNotifyUrl { get; set; }

        /// <summary>
        /// Call dialing record callback URL method.
        /// </summary>
        /// <value>Call dialing record callback URL method.</value>
        [DataMember(Name="cdr_notify_method", EmitDefaultValue=false)]
        public string CdrNotifyMethod { get; set; }

        /// <summary>
        /// Call dialing record callback URL password.
        /// </summary>
        /// <value>Call dialing record callback URL password.</value>
        [DataMember(Name="cdr_notify_password", EmitDefaultValue=false)]
        public string CdrNotifyPassword { get; set; }

        /// <summary>
        /// Call dialing record callback URL username.
        /// </summary>
        /// <value>Call dialing record callback URL username.</value>
        [DataMember(Name="cdr_notify_username", EmitDefaultValue=false)]
        public string CdrNotifyUsername { get; set; }

        /// <summary>
        /// Account font family.
        /// </summary>
        /// <value>Account font family.</value>
        [DataMember(Name="font_family", EmitDefaultValue=false)]
        public string FontFamily { get; set; }

        /// <summary>
        /// Account primary brand color.
        /// </summary>
        /// <value>Account primary brand color.</value>
        [DataMember(Name="primary_color", EmitDefaultValue=false)]
        public string PrimaryColor { get; set; }

        /// <summary>
        /// Account secondary brand color.
        /// </summary>
        /// <value>Account secondary brand color.</value>
        [DataMember(Name="secondary_color", EmitDefaultValue=false)]
        public string SecondaryColor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Account {\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CdrNotifyUrl: ").Append(CdrNotifyUrl).Append("\n");
            sb.Append("  CdrNotifyMethod: ").Append(CdrNotifyMethod).Append("\n");
            sb.Append("  CdrNotifyPassword: ").Append(CdrNotifyPassword).Append("\n");
            sb.Append("  CdrNotifyUsername: ").Append(CdrNotifyUsername).Append("\n");
            sb.Append("  FontFamily: ").Append(FontFamily).Append("\n");
            sb.Append("  PrimaryColor: ").Append(PrimaryColor).Append("\n");
            sb.Append("  SecondaryColor: ").Append(SecondaryColor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Account);
        }

        /// <summary>
        /// Returns true if Account instances are equal
        /// </summary>
        /// <param name="other">Instance of Account to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Account other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BackgroundColor == other.BackgroundColor ||
                    this.BackgroundColor != null &&
                    this.BackgroundColor.Equals(other.BackgroundColor)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.CdrNotifyUrl == other.CdrNotifyUrl ||
                    this.CdrNotifyUrl != null &&
                    this.CdrNotifyUrl.Equals(other.CdrNotifyUrl)
                ) && 
                (
                    this.CdrNotifyMethod == other.CdrNotifyMethod ||
                    this.CdrNotifyMethod != null &&
                    this.CdrNotifyMethod.Equals(other.CdrNotifyMethod)
                ) && 
                (
                    this.CdrNotifyPassword == other.CdrNotifyPassword ||
                    this.CdrNotifyPassword != null &&
                    this.CdrNotifyPassword.Equals(other.CdrNotifyPassword)
                ) && 
                (
                    this.CdrNotifyUsername == other.CdrNotifyUsername ||
                    this.CdrNotifyUsername != null &&
                    this.CdrNotifyUsername.Equals(other.CdrNotifyUsername)
                ) && 
                (
                    this.FontFamily == other.FontFamily ||
                    this.FontFamily != null &&
                    this.FontFamily.Equals(other.FontFamily)
                ) && 
                (
                    this.PrimaryColor == other.PrimaryColor ||
                    this.PrimaryColor != null &&
                    this.PrimaryColor.Equals(other.PrimaryColor)
                ) && 
                (
                    this.SecondaryColor == other.SecondaryColor ||
                    this.SecondaryColor != null &&
                    this.SecondaryColor.Equals(other.SecondaryColor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BackgroundColor != null)
                    hash = hash * 59 + this.BackgroundColor.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.CdrNotifyUrl != null)
                    hash = hash * 59 + this.CdrNotifyUrl.GetHashCode();
                if (this.CdrNotifyMethod != null)
                    hash = hash * 59 + this.CdrNotifyMethod.GetHashCode();
                if (this.CdrNotifyPassword != null)
                    hash = hash * 59 + this.CdrNotifyPassword.GetHashCode();
                if (this.CdrNotifyUsername != null)
                    hash = hash * 59 + this.CdrNotifyUsername.GetHashCode();
                if (this.FontFamily != null)
                    hash = hash * 59 + this.FontFamily.GetHashCode();
                if (this.PrimaryColor != null)
                    hash = hash * 59 + this.PrimaryColor.GetHashCode();
                if (this.SecondaryColor != null)
                    hash = hash * 59 + this.SecondaryColor.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
