/* 
 * FoneStorm API 2.2.0 (Breeze)
 *
 * FracTEL's Middleware API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Voice related properties.
    /// </summary>
    [DataContract]
    public partial class FoneNumberVoiceOptions :  IEquatable<FoneNumberVoiceOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FoneNumberVoiceOptions" /> class.
        /// </summary>
        /// <param name="ReceiveNotify">ReceiveNotify.</param>
        /// <param name="SendNotify">SendNotify.</param>
        public FoneNumberVoiceOptions(FoneNumberVoiceOptionsReceiveNotify ReceiveNotify = default(FoneNumberVoiceOptionsReceiveNotify), FoneNumberVoiceOptionsSendNotify SendNotify = default(FoneNumberVoiceOptionsSendNotify))
        {
            this.ReceiveNotify = ReceiveNotify;
            this.SendNotify = SendNotify;
        }
        
        /// <summary>
        /// Gets or Sets ReceiveNotify
        /// </summary>
        [DataMember(Name="receive_notify", EmitDefaultValue=false)]
        public FoneNumberVoiceOptionsReceiveNotify ReceiveNotify { get; set; }

        /// <summary>
        /// Gets or Sets SendNotify
        /// </summary>
        [DataMember(Name="send_notify", EmitDefaultValue=false)]
        public FoneNumberVoiceOptionsSendNotify SendNotify { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FoneNumberVoiceOptions {\n");
            sb.Append("  ReceiveNotify: ").Append(ReceiveNotify).Append("\n");
            sb.Append("  SendNotify: ").Append(SendNotify).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FoneNumberVoiceOptions);
        }

        /// <summary>
        /// Returns true if FoneNumberVoiceOptions instances are equal
        /// </summary>
        /// <param name="other">Instance of FoneNumberVoiceOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FoneNumberVoiceOptions other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ReceiveNotify == other.ReceiveNotify ||
                    this.ReceiveNotify != null &&
                    this.ReceiveNotify.Equals(other.ReceiveNotify)
                ) && 
                (
                    this.SendNotify == other.SendNotify ||
                    this.SendNotify != null &&
                    this.SendNotify.Equals(other.SendNotify)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ReceiveNotify != null)
                    hash = hash * 59 + this.ReceiveNotify.GetHashCode();
                if (this.SendNotify != null)
                    hash = hash * 59 + this.SendNotify.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
