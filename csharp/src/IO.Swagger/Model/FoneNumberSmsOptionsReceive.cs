/* 
 * FoneStorm API 2.2.0 (Breeze)
 *
 * FracTEL's Middleware API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Delivery service type used as the destination to receive messages.
    /// </summary>
    [DataContract]
    public partial class FoneNumberSmsOptionsReceive :  IEquatable<FoneNumberSmsOptionsReceive>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FoneNumberSmsOptionsReceive" /> class.
        /// </summary>
        /// <param name="Type">Configured service type..</param>
        /// <param name="Email">Email address if configured for email..</param>
        /// <param name="Device">FracTEL device if configured for device..</param>
        /// <param name="Forward">Telephone number if configured for forward..</param>
        /// <param name="Url">HTTP URL if configured for URL..</param>
        /// <param name="UrlMethod">HTTP URL method if configured for URL..</param>
        public FoneNumberSmsOptionsReceive(string Type = default(string), string Email = default(string), string Device = default(string), string Forward = default(string), string Url = default(string), string UrlMethod = default(string))
        {
            this.Type = Type;
            this.Email = Email;
            this.Device = Device;
            this.Forward = Forward;
            this.Url = Url;
            this.UrlMethod = UrlMethod;
        }
        
        /// <summary>
        /// Configured service type.
        /// </summary>
        /// <value>Configured service type.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Email address if configured for email.
        /// </summary>
        /// <value>Email address if configured for email.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// FracTEL device if configured for device.
        /// </summary>
        /// <value>FracTEL device if configured for device.</value>
        [DataMember(Name="device", EmitDefaultValue=false)]
        public string Device { get; set; }

        /// <summary>
        /// Telephone number if configured for forward.
        /// </summary>
        /// <value>Telephone number if configured for forward.</value>
        [DataMember(Name="forward", EmitDefaultValue=false)]
        public string Forward { get; set; }

        /// <summary>
        /// HTTP URL if configured for URL.
        /// </summary>
        /// <value>HTTP URL if configured for URL.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// HTTP URL method if configured for URL.
        /// </summary>
        /// <value>HTTP URL method if configured for URL.</value>
        [DataMember(Name="url_method", EmitDefaultValue=false)]
        public string UrlMethod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FoneNumberSmsOptionsReceive {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Device: ").Append(Device).Append("\n");
            sb.Append("  Forward: ").Append(Forward).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  UrlMethod: ").Append(UrlMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FoneNumberSmsOptionsReceive);
        }

        /// <summary>
        /// Returns true if FoneNumberSmsOptionsReceive instances are equal
        /// </summary>
        /// <param name="other">Instance of FoneNumberSmsOptionsReceive to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FoneNumberSmsOptionsReceive other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.Device == other.Device ||
                    this.Device != null &&
                    this.Device.Equals(other.Device)
                ) && 
                (
                    this.Forward == other.Forward ||
                    this.Forward != null &&
                    this.Forward.Equals(other.Forward)
                ) && 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                ) && 
                (
                    this.UrlMethod == other.UrlMethod ||
                    this.UrlMethod != null &&
                    this.UrlMethod.Equals(other.UrlMethod)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.Device != null)
                    hash = hash * 59 + this.Device.GetHashCode();
                if (this.Forward != null)
                    hash = hash * 59 + this.Forward.GetHashCode();
                if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                if (this.UrlMethod != null)
                    hash = hash * 59 + this.UrlMethod.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
