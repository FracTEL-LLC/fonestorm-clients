/* 
 * FoneStorm API 2.2.0 (Breeze)
 *
 * FracTEL's Middleware API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Set CDR Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a call dialing record is available.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">FoneStorm account id</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="username">Callback URL username (optional)</param>
        /// <param name="password">Callback URL password (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 ConfigureAccountCdrNotify (string accountId, string method, string url, string username = null, string password = null);

        /// <summary>
        /// Set CDR Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a call dialing record is available.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">FoneStorm account id</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="username">Callback URL username (optional)</param>
        /// <param name="password">Callback URL password (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> ConfigureAccountCdrNotifyWithHttpInfo (string accountId, string method, string url, string username = null, string password = null);
        /// <summary>
        /// Set CDR Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a call dialing record is available.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">FoneStorm account id</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="username">Callback URL username (optional)</param>
        /// <param name="password">Callback URL password (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 ConfigureAccountCdrNotify_0 (string accountId, string method, string url, string username = null, string password = null);

        /// <summary>
        /// Set CDR Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a call dialing record is available.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">FoneStorm account id</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="username">Callback URL username (optional)</param>
        /// <param name="password">Callback URL password (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> ConfigureAccountCdrNotify_0WithHttpInfo (string accountId, string method, string url, string username = null, string password = null);
        /// <summary>
        /// Get Account
        /// </summary>
        /// <remarks>
        /// Get information about an account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 GetAccount (string id);

        /// <summary>
        /// Get Account
        /// </summary>
        /// <remarks>
        /// Get information about an account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> GetAccountWithHttpInfo (string id);
        /// <summary>
        /// Get Account
        /// </summary>
        /// <remarks>
        /// Get information about an account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 GetAccount_0 (string id);

        /// <summary>
        /// Get Account
        /// </summary>
        /// <remarks>
        /// Get information about an account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> GetAccount_0WithHttpInfo (string id);
        /// <summary>
        /// Update Account
        /// </summary>
        /// <remarks>
        /// Update an account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <param name="primaryColor">Branding primary color (optional)</param>
        /// <param name="secondaryColor">Branding secondary color (optional)</param>
        /// <param name="backgroundColor">Branding background color (optional)</param>
        /// <param name="fontFamily">Branding font family (optional)</param>
        /// <param name="logo">Branding logo (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 UpdateAccount (string id, string primaryColor = null, string secondaryColor = null, string backgroundColor = null, string fontFamily = null, string logo = null);

        /// <summary>
        /// Update Account
        /// </summary>
        /// <remarks>
        /// Update an account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <param name="primaryColor">Branding primary color (optional)</param>
        /// <param name="secondaryColor">Branding secondary color (optional)</param>
        /// <param name="backgroundColor">Branding background color (optional)</param>
        /// <param name="fontFamily">Branding font family (optional)</param>
        /// <param name="logo">Branding logo (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> UpdateAccountWithHttpInfo (string id, string primaryColor = null, string secondaryColor = null, string backgroundColor = null, string fontFamily = null, string logo = null);
        /// <summary>
        /// Update Account
        /// </summary>
        /// <remarks>
        /// Update an account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <param name="primaryColor">Branding primary color (optional)</param>
        /// <param name="secondaryColor">Branding secondary color (optional)</param>
        /// <param name="backgroundColor">Branding background color (optional)</param>
        /// <param name="fontFamily">Branding font family (optional)</param>
        /// <param name="logo">Branding logo (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 UpdateAccount_0 (string id, string primaryColor = null, string secondaryColor = null, string backgroundColor = null, string fontFamily = null, string logo = null);

        /// <summary>
        /// Update Account
        /// </summary>
        /// <remarks>
        /// Update an account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <param name="primaryColor">Branding primary color (optional)</param>
        /// <param name="secondaryColor">Branding secondary color (optional)</param>
        /// <param name="backgroundColor">Branding background color (optional)</param>
        /// <param name="fontFamily">Branding font family (optional)</param>
        /// <param name="logo">Branding logo (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> UpdateAccount_0WithHttpInfo (string id, string primaryColor = null, string secondaryColor = null, string backgroundColor = null, string fontFamily = null, string logo = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Set CDR Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a call dialing record is available.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">FoneStorm account id</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="username">Callback URL username (optional)</param>
        /// <param name="password">Callback URL password (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> ConfigureAccountCdrNotifyAsync (string accountId, string method, string url, string username = null, string password = null);

        /// <summary>
        /// Set CDR Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a call dialing record is available.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">FoneStorm account id</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="username">Callback URL username (optional)</param>
        /// <param name="password">Callback URL password (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> ConfigureAccountCdrNotifyAsyncWithHttpInfo (string accountId, string method, string url, string username = null, string password = null);
        /// <summary>
        /// Set CDR Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a call dialing record is available.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">FoneStorm account id</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="username">Callback URL username (optional)</param>
        /// <param name="password">Callback URL password (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> ConfigureAccountCdrNotify_0Async (string accountId, string method, string url, string username = null, string password = null);

        /// <summary>
        /// Set CDR Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a call dialing record is available.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">FoneStorm account id</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="username">Callback URL username (optional)</param>
        /// <param name="password">Callback URL password (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> ConfigureAccountCdrNotify_0AsyncWithHttpInfo (string accountId, string method, string url, string username = null, string password = null);
        /// <summary>
        /// Get Account
        /// </summary>
        /// <remarks>
        /// Get information about an account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> GetAccountAsync (string id);

        /// <summary>
        /// Get Account
        /// </summary>
        /// <remarks>
        /// Get information about an account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetAccountAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get Account
        /// </summary>
        /// <remarks>
        /// Get information about an account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> GetAccount_0Async (string id);

        /// <summary>
        /// Get Account
        /// </summary>
        /// <remarks>
        /// Get information about an account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetAccount_0AsyncWithHttpInfo (string id);
        /// <summary>
        /// Update Account
        /// </summary>
        /// <remarks>
        /// Update an account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <param name="primaryColor">Branding primary color (optional)</param>
        /// <param name="secondaryColor">Branding secondary color (optional)</param>
        /// <param name="backgroundColor">Branding background color (optional)</param>
        /// <param name="fontFamily">Branding font family (optional)</param>
        /// <param name="logo">Branding logo (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> UpdateAccountAsync (string id, string primaryColor = null, string secondaryColor = null, string backgroundColor = null, string fontFamily = null, string logo = null);

        /// <summary>
        /// Update Account
        /// </summary>
        /// <remarks>
        /// Update an account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <param name="primaryColor">Branding primary color (optional)</param>
        /// <param name="secondaryColor">Branding secondary color (optional)</param>
        /// <param name="backgroundColor">Branding background color (optional)</param>
        /// <param name="fontFamily">Branding font family (optional)</param>
        /// <param name="logo">Branding logo (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> UpdateAccountAsyncWithHttpInfo (string id, string primaryColor = null, string secondaryColor = null, string backgroundColor = null, string fontFamily = null, string logo = null);
        /// <summary>
        /// Update Account
        /// </summary>
        /// <remarks>
        /// Update an account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <param name="primaryColor">Branding primary color (optional)</param>
        /// <param name="secondaryColor">Branding secondary color (optional)</param>
        /// <param name="backgroundColor">Branding background color (optional)</param>
        /// <param name="fontFamily">Branding font family (optional)</param>
        /// <param name="logo">Branding logo (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> UpdateAccount_0Async (string id, string primaryColor = null, string secondaryColor = null, string backgroundColor = null, string fontFamily = null, string logo = null);

        /// <summary>
        /// Update Account
        /// </summary>
        /// <remarks>
        /// Update an account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <param name="primaryColor">Branding primary color (optional)</param>
        /// <param name="secondaryColor">Branding secondary color (optional)</param>
        /// <param name="backgroundColor">Branding background color (optional)</param>
        /// <param name="fontFamily">Branding font family (optional)</param>
        /// <param name="logo">Branding logo (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> UpdateAccount_0AsyncWithHttpInfo (string id, string primaryColor = null, string secondaryColor = null, string backgroundColor = null, string fontFamily = null, string logo = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountsApi : IAccountsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Set CDR Callback Configure the callback URL to notify when a call dialing record is available.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">FoneStorm account id</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="username">Callback URL username (optional)</param>
        /// <param name="password">Callback URL password (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 ConfigureAccountCdrNotify (string accountId, string method, string url, string username = null, string password = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = ConfigureAccountCdrNotifyWithHttpInfo(accountId, method, url, username, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set CDR Callback Configure the callback URL to notify when a call dialing record is available.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">FoneStorm account id</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="username">Callback URL username (optional)</param>
        /// <param name="password">Callback URL password (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > ConfigureAccountCdrNotifyWithHttpInfo (string accountId, string method, string url, string username = null, string password = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountsApi->ConfigureAccountCdrNotify");
            // verify the required parameter 'method' is set
            if (method == null)
                throw new ApiException(400, "Missing required parameter 'method' when calling AccountsApi->ConfigureAccountCdrNotify");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling AccountsApi->ConfigureAccountCdrNotify");

            var localVarPath = "/accounts/cdr_notify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarFormParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // form parameter
            if (method != null) localVarFormParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (username != null) localVarFormParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // form parameter
            if (password != null) localVarFormParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureAccountCdrNotify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Set CDR Callback Configure the callback URL to notify when a call dialing record is available.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">FoneStorm account id</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="username">Callback URL username (optional)</param>
        /// <param name="password">Callback URL password (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> ConfigureAccountCdrNotifyAsync (string accountId, string method, string url, string username = null, string password = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await ConfigureAccountCdrNotifyAsyncWithHttpInfo(accountId, method, url, username, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set CDR Callback Configure the callback URL to notify when a call dialing record is available.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">FoneStorm account id</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="username">Callback URL username (optional)</param>
        /// <param name="password">Callback URL password (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> ConfigureAccountCdrNotifyAsyncWithHttpInfo (string accountId, string method, string url, string username = null, string password = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountsApi->ConfigureAccountCdrNotify");
            // verify the required parameter 'method' is set
            if (method == null)
                throw new ApiException(400, "Missing required parameter 'method' when calling AccountsApi->ConfigureAccountCdrNotify");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling AccountsApi->ConfigureAccountCdrNotify");

            var localVarPath = "/accounts/cdr_notify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarFormParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // form parameter
            if (method != null) localVarFormParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (username != null) localVarFormParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // form parameter
            if (password != null) localVarFormParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureAccountCdrNotify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Set CDR Callback Configure the callback URL to notify when a call dialing record is available.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">FoneStorm account id</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="username">Callback URL username (optional)</param>
        /// <param name="password">Callback URL password (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 ConfigureAccountCdrNotify_0 (string accountId, string method, string url, string username = null, string password = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = ConfigureAccountCdrNotify_0WithHttpInfo(accountId, method, url, username, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set CDR Callback Configure the callback URL to notify when a call dialing record is available.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">FoneStorm account id</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="username">Callback URL username (optional)</param>
        /// <param name="password">Callback URL password (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > ConfigureAccountCdrNotify_0WithHttpInfo (string accountId, string method, string url, string username = null, string password = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountsApi->ConfigureAccountCdrNotify_0");
            // verify the required parameter 'method' is set
            if (method == null)
                throw new ApiException(400, "Missing required parameter 'method' when calling AccountsApi->ConfigureAccountCdrNotify_0");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling AccountsApi->ConfigureAccountCdrNotify_0");

            var localVarPath = "/accounts/cdr_notify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarFormParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // form parameter
            if (method != null) localVarFormParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (username != null) localVarFormParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // form parameter
            if (password != null) localVarFormParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureAccountCdrNotify_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Set CDR Callback Configure the callback URL to notify when a call dialing record is available.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">FoneStorm account id</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="username">Callback URL username (optional)</param>
        /// <param name="password">Callback URL password (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> ConfigureAccountCdrNotify_0Async (string accountId, string method, string url, string username = null, string password = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await ConfigureAccountCdrNotify_0AsyncWithHttpInfo(accountId, method, url, username, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set CDR Callback Configure the callback URL to notify when a call dialing record is available.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">FoneStorm account id</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="username">Callback URL username (optional)</param>
        /// <param name="password">Callback URL password (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> ConfigureAccountCdrNotify_0AsyncWithHttpInfo (string accountId, string method, string url, string username = null, string password = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountsApi->ConfigureAccountCdrNotify_0");
            // verify the required parameter 'method' is set
            if (method == null)
                throw new ApiException(400, "Missing required parameter 'method' when calling AccountsApi->ConfigureAccountCdrNotify_0");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling AccountsApi->ConfigureAccountCdrNotify_0");

            var localVarPath = "/accounts/cdr_notify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarFormParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // form parameter
            if (method != null) localVarFormParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (username != null) localVarFormParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // form parameter
            if (password != null) localVarFormParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureAccountCdrNotify_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Get Account Get information about an account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 GetAccount (string id)
        {
             ApiResponse<InlineResponse2001> localVarResponse = GetAccountWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Get information about an account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > GetAccountWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsApi->GetAccount");

            var localVarPath = "/accounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/offset+octet-stream", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Get Account Get information about an account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> GetAccountAsync (string id)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await GetAccountAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Account Get information about an account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetAccountAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsApi->GetAccount");

            var localVarPath = "/accounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/offset+octet-stream", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Get Account Get information about an account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 GetAccount_0 (string id)
        {
             ApiResponse<InlineResponse2001> localVarResponse = GetAccount_0WithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Get information about an account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > GetAccount_0WithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsApi->GetAccount_0");

            var localVarPath = "/accounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/offset+octet-stream", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccount_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Get Account Get information about an account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> GetAccount_0Async (string id)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await GetAccount_0AsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Account Get information about an account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetAccount_0AsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsApi->GetAccount_0");

            var localVarPath = "/accounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/offset+octet-stream", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccount_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Update Account Update an account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <param name="primaryColor">Branding primary color (optional)</param>
        /// <param name="secondaryColor">Branding secondary color (optional)</param>
        /// <param name="backgroundColor">Branding background color (optional)</param>
        /// <param name="fontFamily">Branding font family (optional)</param>
        /// <param name="logo">Branding logo (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 UpdateAccount (string id, string primaryColor = null, string secondaryColor = null, string backgroundColor = null, string fontFamily = null, string logo = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = UpdateAccountWithHttpInfo(id, primaryColor, secondaryColor, backgroundColor, fontFamily, logo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Account Update an account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <param name="primaryColor">Branding primary color (optional)</param>
        /// <param name="secondaryColor">Branding secondary color (optional)</param>
        /// <param name="backgroundColor">Branding background color (optional)</param>
        /// <param name="fontFamily">Branding font family (optional)</param>
        /// <param name="logo">Branding logo (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > UpdateAccountWithHttpInfo (string id, string primaryColor = null, string secondaryColor = null, string backgroundColor = null, string fontFamily = null, string logo = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsApi->UpdateAccount");

            var localVarPath = "/accounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (primaryColor != null) localVarFormParams.Add("primary_color", Configuration.ApiClient.ParameterToString(primaryColor)); // form parameter
            if (secondaryColor != null) localVarFormParams.Add("secondary_color", Configuration.ApiClient.ParameterToString(secondaryColor)); // form parameter
            if (backgroundColor != null) localVarFormParams.Add("background_color", Configuration.ApiClient.ParameterToString(backgroundColor)); // form parameter
            if (fontFamily != null) localVarFormParams.Add("font_family", Configuration.ApiClient.ParameterToString(fontFamily)); // form parameter
            if (logo != null) localVarFormParams.Add("logo", Configuration.ApiClient.ParameterToString(logo)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Update Account Update an account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <param name="primaryColor">Branding primary color (optional)</param>
        /// <param name="secondaryColor">Branding secondary color (optional)</param>
        /// <param name="backgroundColor">Branding background color (optional)</param>
        /// <param name="fontFamily">Branding font family (optional)</param>
        /// <param name="logo">Branding logo (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> UpdateAccountAsync (string id, string primaryColor = null, string secondaryColor = null, string backgroundColor = null, string fontFamily = null, string logo = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await UpdateAccountAsyncWithHttpInfo(id, primaryColor, secondaryColor, backgroundColor, fontFamily, logo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Account Update an account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <param name="primaryColor">Branding primary color (optional)</param>
        /// <param name="secondaryColor">Branding secondary color (optional)</param>
        /// <param name="backgroundColor">Branding background color (optional)</param>
        /// <param name="fontFamily">Branding font family (optional)</param>
        /// <param name="logo">Branding logo (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> UpdateAccountAsyncWithHttpInfo (string id, string primaryColor = null, string secondaryColor = null, string backgroundColor = null, string fontFamily = null, string logo = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsApi->UpdateAccount");

            var localVarPath = "/accounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (primaryColor != null) localVarFormParams.Add("primary_color", Configuration.ApiClient.ParameterToString(primaryColor)); // form parameter
            if (secondaryColor != null) localVarFormParams.Add("secondary_color", Configuration.ApiClient.ParameterToString(secondaryColor)); // form parameter
            if (backgroundColor != null) localVarFormParams.Add("background_color", Configuration.ApiClient.ParameterToString(backgroundColor)); // form parameter
            if (fontFamily != null) localVarFormParams.Add("font_family", Configuration.ApiClient.ParameterToString(fontFamily)); // form parameter
            if (logo != null) localVarFormParams.Add("logo", Configuration.ApiClient.ParameterToString(logo)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Update Account Update an account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <param name="primaryColor">Branding primary color (optional)</param>
        /// <param name="secondaryColor">Branding secondary color (optional)</param>
        /// <param name="backgroundColor">Branding background color (optional)</param>
        /// <param name="fontFamily">Branding font family (optional)</param>
        /// <param name="logo">Branding logo (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 UpdateAccount_0 (string id, string primaryColor = null, string secondaryColor = null, string backgroundColor = null, string fontFamily = null, string logo = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = UpdateAccount_0WithHttpInfo(id, primaryColor, secondaryColor, backgroundColor, fontFamily, logo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Account Update an account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <param name="primaryColor">Branding primary color (optional)</param>
        /// <param name="secondaryColor">Branding secondary color (optional)</param>
        /// <param name="backgroundColor">Branding background color (optional)</param>
        /// <param name="fontFamily">Branding font family (optional)</param>
        /// <param name="logo">Branding logo (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > UpdateAccount_0WithHttpInfo (string id, string primaryColor = null, string secondaryColor = null, string backgroundColor = null, string fontFamily = null, string logo = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsApi->UpdateAccount_0");

            var localVarPath = "/accounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (primaryColor != null) localVarFormParams.Add("primary_color", Configuration.ApiClient.ParameterToString(primaryColor)); // form parameter
            if (secondaryColor != null) localVarFormParams.Add("secondary_color", Configuration.ApiClient.ParameterToString(secondaryColor)); // form parameter
            if (backgroundColor != null) localVarFormParams.Add("background_color", Configuration.ApiClient.ParameterToString(backgroundColor)); // form parameter
            if (fontFamily != null) localVarFormParams.Add("font_family", Configuration.ApiClient.ParameterToString(fontFamily)); // form parameter
            if (logo != null) localVarFormParams.Add("logo", Configuration.ApiClient.ParameterToString(logo)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccount_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Update Account Update an account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <param name="primaryColor">Branding primary color (optional)</param>
        /// <param name="secondaryColor">Branding secondary color (optional)</param>
        /// <param name="backgroundColor">Branding background color (optional)</param>
        /// <param name="fontFamily">Branding font family (optional)</param>
        /// <param name="logo">Branding logo (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> UpdateAccount_0Async (string id, string primaryColor = null, string secondaryColor = null, string backgroundColor = null, string fontFamily = null, string logo = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await UpdateAccount_0AsyncWithHttpInfo(id, primaryColor, secondaryColor, backgroundColor, fontFamily, logo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Account Update an account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account id</param>
        /// <param name="primaryColor">Branding primary color (optional)</param>
        /// <param name="secondaryColor">Branding secondary color (optional)</param>
        /// <param name="backgroundColor">Branding background color (optional)</param>
        /// <param name="fontFamily">Branding font family (optional)</param>
        /// <param name="logo">Branding logo (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> UpdateAccount_0AsyncWithHttpInfo (string id, string primaryColor = null, string secondaryColor = null, string backgroundColor = null, string fontFamily = null, string logo = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountsApi->UpdateAccount_0");

            var localVarPath = "/accounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (primaryColor != null) localVarFormParams.Add("primary_color", Configuration.ApiClient.ParameterToString(primaryColor)); // form parameter
            if (secondaryColor != null) localVarFormParams.Add("secondary_color", Configuration.ApiClient.ParameterToString(secondaryColor)); // form parameter
            if (backgroundColor != null) localVarFormParams.Add("background_color", Configuration.ApiClient.ParameterToString(backgroundColor)); // form parameter
            if (fontFamily != null) localVarFormParams.Add("font_family", Configuration.ApiClient.ParameterToString(fontFamily)); // form parameter
            if (logo != null) localVarFormParams.Add("logo", Configuration.ApiClient.ParameterToString(logo)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccount_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

    }
}
