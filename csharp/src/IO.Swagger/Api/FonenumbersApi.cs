/* 
 * FoneStorm API 2.2.0
 *
 * Extended API Documentation: https://developer.fonestorm.com
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFonenumbersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a fonenumber identified by fonenumber.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL fonenumber.</param>
        /// <returns>string</returns>
        string DeleteFonenumbersFonenumber (string fonenumber);

        /// <summary>
        /// Delete a fonenumber identified by fonenumber.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL fonenumber.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteFonenumbersFonenumberWithHttpInfo (string fonenumber);
        /// <summary>
        /// Get a list of all active fonenumbers under the account.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters for the response. (optional)</param>
        /// <returns>string</returns>
        string GetFonenumbers (string filter = null);

        /// <summary>
        /// Get a list of all active fonenumbers under the account.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters for the response. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetFonenumbersWithHttpInfo (string filter = null);
        /// <summary>
        /// Get a fonenumber identified by fonenumber.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL fonenumber.</param>
        /// <returns>string</returns>
        string GetFonenumbersFonenumber (string fonenumber);

        /// <summary>
        /// Get a fonenumber identified by fonenumber.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL fonenumber.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetFonenumbersFonenumberWithHttpInfo (string fonenumber);
        /// <summary>
        /// Create a fonenumber under the account.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaCode">A valid 3-digit Area Code.</param>
        /// <returns>string</returns>
        string PostFonenumbers (string areaCode);

        /// <summary>
        /// Create a fonenumber under the account.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaCode">A valid 3-digit Area Code.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostFonenumbersWithHttpInfo (string areaCode);
        /// <summary>
        /// Update a fonenumber identified by fonenumber.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL fonenumber.</param>
        /// <param name="type">Message routing type.</param>
        /// <param name="value">Message routing type value. (optional)</param>
        /// <param name="urlMethod">URL method. (optional)</param>
        /// <param name="urlUsername">URL auth username. (optional)</param>
        /// <param name="urlPassword">URL auth password. (optional)</param>
        /// <returns>string</returns>
        string PutFonenumbersFonenumber (string fonenumber, string type, string value = null, string urlMethod = null, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Update a fonenumber identified by fonenumber.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL fonenumber.</param>
        /// <param name="type">Message routing type.</param>
        /// <param name="value">Message routing type value. (optional)</param>
        /// <param name="urlMethod">URL method. (optional)</param>
        /// <param name="urlUsername">URL auth username. (optional)</param>
        /// <param name="urlPassword">URL auth password. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PutFonenumbersFonenumberWithHttpInfo (string fonenumber, string type, string value = null, string urlMethod = null, string urlUsername = null, string urlPassword = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a fonenumber identified by fonenumber.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL fonenumber.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeleteFonenumbersFonenumberAsync (string fonenumber);

        /// <summary>
        /// Delete a fonenumber identified by fonenumber.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL fonenumber.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeleteFonenumbersFonenumberAsyncWithHttpInfo (string fonenumber);
        /// <summary>
        /// Get a list of all active fonenumbers under the account.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters for the response. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetFonenumbersAsync (string filter = null);

        /// <summary>
        /// Get a list of all active fonenumbers under the account.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters for the response. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetFonenumbersAsyncWithHttpInfo (string filter = null);
        /// <summary>
        /// Get a fonenumber identified by fonenumber.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL fonenumber.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetFonenumbersFonenumberAsync (string fonenumber);

        /// <summary>
        /// Get a fonenumber identified by fonenumber.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL fonenumber.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetFonenumbersFonenumberAsyncWithHttpInfo (string fonenumber);
        /// <summary>
        /// Create a fonenumber under the account.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaCode">A valid 3-digit Area Code.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostFonenumbersAsync (string areaCode);

        /// <summary>
        /// Create a fonenumber under the account.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaCode">A valid 3-digit Area Code.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostFonenumbersAsyncWithHttpInfo (string areaCode);
        /// <summary>
        /// Update a fonenumber identified by fonenumber.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL fonenumber.</param>
        /// <param name="type">Message routing type.</param>
        /// <param name="value">Message routing type value. (optional)</param>
        /// <param name="urlMethod">URL method. (optional)</param>
        /// <param name="urlUsername">URL auth username. (optional)</param>
        /// <param name="urlPassword">URL auth password. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PutFonenumbersFonenumberAsync (string fonenumber, string type, string value = null, string urlMethod = null, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Update a fonenumber identified by fonenumber.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL fonenumber.</param>
        /// <param name="type">Message routing type.</param>
        /// <param name="value">Message routing type value. (optional)</param>
        /// <param name="urlMethod">URL method. (optional)</param>
        /// <param name="urlUsername">URL auth username. (optional)</param>
        /// <param name="urlPassword">URL auth password. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PutFonenumbersFonenumberAsyncWithHttpInfo (string fonenumber, string type, string value = null, string urlMethod = null, string urlUsername = null, string urlPassword = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FonenumbersApi : IFonenumbersApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FonenumbersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FonenumbersApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FonenumbersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FonenumbersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a fonenumber identified by fonenumber. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL fonenumber.</param>
        /// <returns>string</returns>
        public string DeleteFonenumbersFonenumber (string fonenumber)
        {
             ApiResponse<string> localVarResponse = DeleteFonenumbersFonenumberWithHttpInfo(fonenumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a fonenumber identified by fonenumber. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL fonenumber.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DeleteFonenumbersFonenumberWithHttpInfo (string fonenumber)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling FonenumbersApi->DeleteFonenumbersFonenumber");

            var localVarPath = "/fonenumbers/{fonenumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarPathParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFonenumbersFonenumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete a fonenumber identified by fonenumber. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL fonenumber.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeleteFonenumbersFonenumberAsync (string fonenumber)
        {
             ApiResponse<string> localVarResponse = await DeleteFonenumbersFonenumberAsyncWithHttpInfo(fonenumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a fonenumber identified by fonenumber. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL fonenumber.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeleteFonenumbersFonenumberAsyncWithHttpInfo (string fonenumber)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling FonenumbersApi->DeleteFonenumbersFonenumber");

            var localVarPath = "/fonenumbers/{fonenumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarPathParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFonenumbersFonenumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a list of all active fonenumbers under the account. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters for the response. (optional)</param>
        /// <returns>string</returns>
        public string GetFonenumbers (string filter = null)
        {
             ApiResponse<string> localVarResponse = GetFonenumbersWithHttpInfo(filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all active fonenumbers under the account. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters for the response. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetFonenumbersWithHttpInfo (string filter = null)
        {

            var localVarPath = "/fonenumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFonenumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a list of all active fonenumbers under the account. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters for the response. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetFonenumbersAsync (string filter = null)
        {
             ApiResponse<string> localVarResponse = await GetFonenumbersAsyncWithHttpInfo(filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of all active fonenumbers under the account. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters for the response. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetFonenumbersAsyncWithHttpInfo (string filter = null)
        {

            var localVarPath = "/fonenumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFonenumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a fonenumber identified by fonenumber. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL fonenumber.</param>
        /// <returns>string</returns>
        public string GetFonenumbersFonenumber (string fonenumber)
        {
             ApiResponse<string> localVarResponse = GetFonenumbersFonenumberWithHttpInfo(fonenumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a fonenumber identified by fonenumber. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL fonenumber.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetFonenumbersFonenumberWithHttpInfo (string fonenumber)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling FonenumbersApi->GetFonenumbersFonenumber");

            var localVarPath = "/fonenumbers/{fonenumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarPathParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFonenumbersFonenumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a fonenumber identified by fonenumber. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL fonenumber.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetFonenumbersFonenumberAsync (string fonenumber)
        {
             ApiResponse<string> localVarResponse = await GetFonenumbersFonenumberAsyncWithHttpInfo(fonenumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a fonenumber identified by fonenumber. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL fonenumber.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetFonenumbersFonenumberAsyncWithHttpInfo (string fonenumber)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling FonenumbersApi->GetFonenumbersFonenumber");

            var localVarPath = "/fonenumbers/{fonenumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarPathParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFonenumbersFonenumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create a fonenumber under the account. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaCode">A valid 3-digit Area Code.</param>
        /// <returns>string</returns>
        public string PostFonenumbers (string areaCode)
        {
             ApiResponse<string> localVarResponse = PostFonenumbersWithHttpInfo(areaCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a fonenumber under the account. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaCode">A valid 3-digit Area Code.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostFonenumbersWithHttpInfo (string areaCode)
        {
            // verify the required parameter 'areaCode' is set
            if (areaCode == null)
                throw new ApiException(400, "Missing required parameter 'areaCode' when calling FonenumbersApi->PostFonenumbers");

            var localVarPath = "/fonenumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (areaCode != null) localVarFormParams.Add("area_code", Configuration.ApiClient.ParameterToString(areaCode)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFonenumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create a fonenumber under the account. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaCode">A valid 3-digit Area Code.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostFonenumbersAsync (string areaCode)
        {
             ApiResponse<string> localVarResponse = await PostFonenumbersAsyncWithHttpInfo(areaCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a fonenumber under the account. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaCode">A valid 3-digit Area Code.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostFonenumbersAsyncWithHttpInfo (string areaCode)
        {
            // verify the required parameter 'areaCode' is set
            if (areaCode == null)
                throw new ApiException(400, "Missing required parameter 'areaCode' when calling FonenumbersApi->PostFonenumbers");

            var localVarPath = "/fonenumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (areaCode != null) localVarFormParams.Add("area_code", Configuration.ApiClient.ParameterToString(areaCode)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFonenumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update a fonenumber identified by fonenumber. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL fonenumber.</param>
        /// <param name="type">Message routing type.</param>
        /// <param name="value">Message routing type value. (optional)</param>
        /// <param name="urlMethod">URL method. (optional)</param>
        /// <param name="urlUsername">URL auth username. (optional)</param>
        /// <param name="urlPassword">URL auth password. (optional)</param>
        /// <returns>string</returns>
        public string PutFonenumbersFonenumber (string fonenumber, string type, string value = null, string urlMethod = null, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<string> localVarResponse = PutFonenumbersFonenumberWithHttpInfo(fonenumber, type, value, urlMethod, urlUsername, urlPassword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a fonenumber identified by fonenumber. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL fonenumber.</param>
        /// <param name="type">Message routing type.</param>
        /// <param name="value">Message routing type value. (optional)</param>
        /// <param name="urlMethod">URL method. (optional)</param>
        /// <param name="urlUsername">URL auth username. (optional)</param>
        /// <param name="urlPassword">URL auth password. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PutFonenumbersFonenumberWithHttpInfo (string fonenumber, string type, string value = null, string urlMethod = null, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling FonenumbersApi->PutFonenumbersFonenumber");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling FonenumbersApi->PutFonenumbersFonenumber");

            var localVarPath = "/fonenumbers/{fonenumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarPathParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // path parameter
            if (type != null) localVarFormParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (value != null) localVarFormParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // form parameter
            if (urlMethod != null) localVarFormParams.Add("url_method", Configuration.ApiClient.ParameterToString(urlMethod)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFonenumbersFonenumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update a fonenumber identified by fonenumber. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL fonenumber.</param>
        /// <param name="type">Message routing type.</param>
        /// <param name="value">Message routing type value. (optional)</param>
        /// <param name="urlMethod">URL method. (optional)</param>
        /// <param name="urlUsername">URL auth username. (optional)</param>
        /// <param name="urlPassword">URL auth password. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PutFonenumbersFonenumberAsync (string fonenumber, string type, string value = null, string urlMethod = null, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<string> localVarResponse = await PutFonenumbersFonenumberAsyncWithHttpInfo(fonenumber, type, value, urlMethod, urlUsername, urlPassword);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a fonenumber identified by fonenumber. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL fonenumber.</param>
        /// <param name="type">Message routing type.</param>
        /// <param name="value">Message routing type value. (optional)</param>
        /// <param name="urlMethod">URL method. (optional)</param>
        /// <param name="urlUsername">URL auth username. (optional)</param>
        /// <param name="urlPassword">URL auth password. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PutFonenumbersFonenumberAsyncWithHttpInfo (string fonenumber, string type, string value = null, string urlMethod = null, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling FonenumbersApi->PutFonenumbersFonenumber");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling FonenumbersApi->PutFonenumbersFonenumber");

            var localVarPath = "/fonenumbers/{fonenumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarPathParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // path parameter
            if (type != null) localVarFormParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (value != null) localVarFormParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // form parameter
            if (urlMethod != null) localVarFormParams.Add("url_method", Configuration.ApiClient.ParameterToString(urlMethod)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFonenumbersFonenumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
