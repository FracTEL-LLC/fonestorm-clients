/* 
 * FoneStorm API 2.4.0 (Thunder)
 *
 * FracTEL's Middleware API
 *
 * OpenAPI spec version: 2.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFonenumbersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create FoneNumber
        /// </summary>
        /// <remarks>
        /// Order a new FoneNumber for a given area code.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaCode">Valid 3-digit area code</param>
        /// <returns>InlineResponse2014</returns>
        InlineResponse2014 CreateFonenumber (string areaCode);

        /// <summary>
        /// Create FoneNumber
        /// </summary>
        /// <remarks>
        /// Order a new FoneNumber for a given area code.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaCode">Valid 3-digit area code</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        ApiResponse<InlineResponse2014> CreateFonenumberWithHttpInfo (string areaCode);
        /// <summary>
        /// Create FoneNumber
        /// </summary>
        /// <remarks>
        /// Order a new FoneNumber for a given area code.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaCode">Valid 3-digit area code</param>
        /// <returns>InlineResponse2014</returns>
        InlineResponse2014 CreateFonenumber_0 (string areaCode);

        /// <summary>
        /// Create FoneNumber
        /// </summary>
        /// <remarks>
        /// Order a new FoneNumber for a given area code.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaCode">Valid 3-digit area code</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        ApiResponse<InlineResponse2014> CreateFonenumber_0WithHttpInfo (string areaCode);
        /// <summary>
        /// Delete FoneNumber
        /// </summary>
        /// <remarks>
        /// Remove a FoneNumber from an account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>InlineResponse2014</returns>
        InlineResponse2014 DeleteFonenumber (string fonenumber);

        /// <summary>
        /// Delete FoneNumber
        /// </summary>
        /// <remarks>
        /// Remove a FoneNumber from an account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        ApiResponse<InlineResponse2014> DeleteFonenumberWithHttpInfo (string fonenumber);
        /// <summary>
        /// Delete FoneNumber
        /// </summary>
        /// <remarks>
        /// Remove a FoneNumber from an account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>InlineResponse2014</returns>
        InlineResponse2014 DeleteFonenumber_0 (string fonenumber);

        /// <summary>
        /// Delete FoneNumber
        /// </summary>
        /// <remarks>
        /// Remove a FoneNumber from an account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        ApiResponse<InlineResponse2014> DeleteFonenumber_0WithHttpInfo (string fonenumber);
        /// <summary>
        /// Get FoneNumber
        /// </summary>
        /// <remarks>
        /// Get information for a single FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>InlineResponse2014</returns>
        InlineResponse2014 GetFonenumber (string fonenumber);

        /// <summary>
        /// Get FoneNumber
        /// </summary>
        /// <remarks>
        /// Get information for a single FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        ApiResponse<InlineResponse2014> GetFonenumberWithHttpInfo (string fonenumber);
        /// <summary>
        /// Get FoneNumber
        /// </summary>
        /// <remarks>
        /// Get information for a single FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>InlineResponse2014</returns>
        InlineResponse2014 GetFonenumber_0 (string fonenumber);

        /// <summary>
        /// Get FoneNumber
        /// </summary>
        /// <remarks>
        /// Get information for a single FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        ApiResponse<InlineResponse2014> GetFonenumber_0WithHttpInfo (string fonenumber);
        /// <summary>
        /// Get FoneNumbers
        /// </summary>
        /// <remarks>
        /// Get a list of all FoneNumbers, or a selection based on a filter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the response attributes. Allowed values are &#x60;fonenumbers&#x60; or &#x60;all&#x60;. See **Notes** for additional information. (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 GetFonenumbers (string filter = null);

        /// <summary>
        /// Get FoneNumbers
        /// </summary>
        /// <remarks>
        /// Get a list of all FoneNumbers, or a selection based on a filter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the response attributes. Allowed values are &#x60;fonenumbers&#x60; or &#x60;all&#x60;. See **Notes** for additional information. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> GetFonenumbersWithHttpInfo (string filter = null);
        /// <summary>
        /// Get FoneNumbers
        /// </summary>
        /// <remarks>
        /// Get a list of all FoneNumbers, or a selection based on a filter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the response attributes. Allowed values are &#x60;fonenumbers&#x60; or &#x60;all&#x60;. See **Notes** for additional information. (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 GetFonenumbers_0 (string filter = null);

        /// <summary>
        /// Get FoneNumbers
        /// </summary>
        /// <remarks>
        /// Get a list of all FoneNumbers, or a selection based on a filter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the response attributes. Allowed values are &#x60;fonenumbers&#x60; or &#x60;all&#x60;. See **Notes** for additional information. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> GetFonenumbers_0WithHttpInfo (string filter = null);
        /// <summary>
        /// Set Service Type
        /// </summary>
        /// <remarks>
        /// Set service type for a FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="serviceType">Service type. Allowed values are &#x60;Conference&#x60;, &#x60;Hangup&#x60;, &#x60;Busy&#x60;, &#x60;Reject&#x60;</param>
        /// <param name="serviceId">Service id (optional)</param>
        /// <returns>InlineResponse2014</returns>
        InlineResponse2014 SetFonenumberServiceType (string fonenumber, string serviceType, string serviceId = null);

        /// <summary>
        /// Set Service Type
        /// </summary>
        /// <remarks>
        /// Set service type for a FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="serviceType">Service type. Allowed values are &#x60;Conference&#x60;, &#x60;Hangup&#x60;, &#x60;Busy&#x60;, &#x60;Reject&#x60;</param>
        /// <param name="serviceId">Service id (optional)</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        ApiResponse<InlineResponse2014> SetFonenumberServiceTypeWithHttpInfo (string fonenumber, string serviceType, string serviceId = null);
        /// <summary>
        /// Set Service Type
        /// </summary>
        /// <remarks>
        /// Set service type for a FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="serviceType">Service type. Allowed values are &#x60;Conference&#x60;, &#x60;Hangup&#x60;, &#x60;Busy&#x60;, &#x60;Reject&#x60;</param>
        /// <param name="serviceId">Service id (optional)</param>
        /// <returns>InlineResponse2014</returns>
        InlineResponse2014 SetFonenumberServiceType_0 (string fonenumber, string serviceType, string serviceId = null);

        /// <summary>
        /// Set Service Type
        /// </summary>
        /// <remarks>
        /// Set service type for a FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="serviceType">Service type. Allowed values are &#x60;Conference&#x60;, &#x60;Hangup&#x60;, &#x60;Busy&#x60;, &#x60;Reject&#x60;</param>
        /// <param name="serviceId">Service id (optional)</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        ApiResponse<InlineResponse2014> SetFonenumberServiceType_0WithHttpInfo (string fonenumber, string serviceType, string serviceId = null);
        /// <summary>
        /// Update FoneNumber
        /// </summary>
        /// <remarks>
        /// Update a FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="type">Message routing type. Allowed values are &#x60;None&#x60;, &#x60;Device&#x60;, &#x60;Email&#x60;, &#x60;URL&#x60;, or &#x60;Forward&#x60;.</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method. Allowed values are &#x60;GET&#x60;, &#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>InlineResponse2014</returns>
        InlineResponse2014 UpdateFonenumber (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Update FoneNumber
        /// </summary>
        /// <remarks>
        /// Update a FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="type">Message routing type. Allowed values are &#x60;None&#x60;, &#x60;Device&#x60;, &#x60;Email&#x60;, &#x60;URL&#x60;, or &#x60;Forward&#x60;.</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method. Allowed values are &#x60;GET&#x60;, &#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        ApiResponse<InlineResponse2014> UpdateFonenumberWithHttpInfo (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null);
        /// <summary>
        /// Update FoneNumber
        /// </summary>
        /// <remarks>
        /// Update a FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="type">Message routing type. Allowed values are &#x60;None&#x60;, &#x60;Device&#x60;, &#x60;Email&#x60;, &#x60;URL&#x60;, or &#x60;Forward&#x60;.</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method. Allowed values are &#x60;GET&#x60;, &#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>InlineResponse2014</returns>
        InlineResponse2014 UpdateFonenumber_0 (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Update FoneNumber
        /// </summary>
        /// <remarks>
        /// Update a FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="type">Message routing type. Allowed values are &#x60;None&#x60;, &#x60;Device&#x60;, &#x60;Email&#x60;, &#x60;URL&#x60;, or &#x60;Forward&#x60;.</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method. Allowed values are &#x60;GET&#x60;, &#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        ApiResponse<InlineResponse2014> UpdateFonenumber_0WithHttpInfo (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create FoneNumber
        /// </summary>
        /// <remarks>
        /// Order a new FoneNumber for a given area code.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaCode">Valid 3-digit area code</param>
        /// <returns>Task of InlineResponse2014</returns>
        System.Threading.Tasks.Task<InlineResponse2014> CreateFonenumberAsync (string areaCode);

        /// <summary>
        /// Create FoneNumber
        /// </summary>
        /// <remarks>
        /// Order a new FoneNumber for a given area code.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaCode">Valid 3-digit area code</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> CreateFonenumberAsyncWithHttpInfo (string areaCode);
        /// <summary>
        /// Create FoneNumber
        /// </summary>
        /// <remarks>
        /// Order a new FoneNumber for a given area code.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaCode">Valid 3-digit area code</param>
        /// <returns>Task of InlineResponse2014</returns>
        System.Threading.Tasks.Task<InlineResponse2014> CreateFonenumber_0Async (string areaCode);

        /// <summary>
        /// Create FoneNumber
        /// </summary>
        /// <remarks>
        /// Order a new FoneNumber for a given area code.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaCode">Valid 3-digit area code</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> CreateFonenumber_0AsyncWithHttpInfo (string areaCode);
        /// <summary>
        /// Delete FoneNumber
        /// </summary>
        /// <remarks>
        /// Remove a FoneNumber from an account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>Task of InlineResponse2014</returns>
        System.Threading.Tasks.Task<InlineResponse2014> DeleteFonenumberAsync (string fonenumber);

        /// <summary>
        /// Delete FoneNumber
        /// </summary>
        /// <remarks>
        /// Remove a FoneNumber from an account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> DeleteFonenumberAsyncWithHttpInfo (string fonenumber);
        /// <summary>
        /// Delete FoneNumber
        /// </summary>
        /// <remarks>
        /// Remove a FoneNumber from an account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>Task of InlineResponse2014</returns>
        System.Threading.Tasks.Task<InlineResponse2014> DeleteFonenumber_0Async (string fonenumber);

        /// <summary>
        /// Delete FoneNumber
        /// </summary>
        /// <remarks>
        /// Remove a FoneNumber from an account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> DeleteFonenumber_0AsyncWithHttpInfo (string fonenumber);
        /// <summary>
        /// Get FoneNumber
        /// </summary>
        /// <remarks>
        /// Get information for a single FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>Task of InlineResponse2014</returns>
        System.Threading.Tasks.Task<InlineResponse2014> GetFonenumberAsync (string fonenumber);

        /// <summary>
        /// Get FoneNumber
        /// </summary>
        /// <remarks>
        /// Get information for a single FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> GetFonenumberAsyncWithHttpInfo (string fonenumber);
        /// <summary>
        /// Get FoneNumber
        /// </summary>
        /// <remarks>
        /// Get information for a single FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>Task of InlineResponse2014</returns>
        System.Threading.Tasks.Task<InlineResponse2014> GetFonenumber_0Async (string fonenumber);

        /// <summary>
        /// Get FoneNumber
        /// </summary>
        /// <remarks>
        /// Get information for a single FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> GetFonenumber_0AsyncWithHttpInfo (string fonenumber);
        /// <summary>
        /// Get FoneNumbers
        /// </summary>
        /// <remarks>
        /// Get a list of all FoneNumbers, or a selection based on a filter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the response attributes. Allowed values are &#x60;fonenumbers&#x60; or &#x60;all&#x60;. See **Notes** for additional information. (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> GetFonenumbersAsync (string filter = null);

        /// <summary>
        /// Get FoneNumbers
        /// </summary>
        /// <remarks>
        /// Get a list of all FoneNumbers, or a selection based on a filter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the response attributes. Allowed values are &#x60;fonenumbers&#x60; or &#x60;all&#x60;. See **Notes** for additional information. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetFonenumbersAsyncWithHttpInfo (string filter = null);
        /// <summary>
        /// Get FoneNumbers
        /// </summary>
        /// <remarks>
        /// Get a list of all FoneNumbers, or a selection based on a filter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the response attributes. Allowed values are &#x60;fonenumbers&#x60; or &#x60;all&#x60;. See **Notes** for additional information. (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> GetFonenumbers_0Async (string filter = null);

        /// <summary>
        /// Get FoneNumbers
        /// </summary>
        /// <remarks>
        /// Get a list of all FoneNumbers, or a selection based on a filter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the response attributes. Allowed values are &#x60;fonenumbers&#x60; or &#x60;all&#x60;. See **Notes** for additional information. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetFonenumbers_0AsyncWithHttpInfo (string filter = null);
        /// <summary>
        /// Set Service Type
        /// </summary>
        /// <remarks>
        /// Set service type for a FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="serviceType">Service type. Allowed values are &#x60;Conference&#x60;, &#x60;Hangup&#x60;, &#x60;Busy&#x60;, &#x60;Reject&#x60;</param>
        /// <param name="serviceId">Service id (optional)</param>
        /// <returns>Task of InlineResponse2014</returns>
        System.Threading.Tasks.Task<InlineResponse2014> SetFonenumberServiceTypeAsync (string fonenumber, string serviceType, string serviceId = null);

        /// <summary>
        /// Set Service Type
        /// </summary>
        /// <remarks>
        /// Set service type for a FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="serviceType">Service type. Allowed values are &#x60;Conference&#x60;, &#x60;Hangup&#x60;, &#x60;Busy&#x60;, &#x60;Reject&#x60;</param>
        /// <param name="serviceId">Service id (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> SetFonenumberServiceTypeAsyncWithHttpInfo (string fonenumber, string serviceType, string serviceId = null);
        /// <summary>
        /// Set Service Type
        /// </summary>
        /// <remarks>
        /// Set service type for a FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="serviceType">Service type. Allowed values are &#x60;Conference&#x60;, &#x60;Hangup&#x60;, &#x60;Busy&#x60;, &#x60;Reject&#x60;</param>
        /// <param name="serviceId">Service id (optional)</param>
        /// <returns>Task of InlineResponse2014</returns>
        System.Threading.Tasks.Task<InlineResponse2014> SetFonenumberServiceType_0Async (string fonenumber, string serviceType, string serviceId = null);

        /// <summary>
        /// Set Service Type
        /// </summary>
        /// <remarks>
        /// Set service type for a FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="serviceType">Service type. Allowed values are &#x60;Conference&#x60;, &#x60;Hangup&#x60;, &#x60;Busy&#x60;, &#x60;Reject&#x60;</param>
        /// <param name="serviceId">Service id (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> SetFonenumberServiceType_0AsyncWithHttpInfo (string fonenumber, string serviceType, string serviceId = null);
        /// <summary>
        /// Update FoneNumber
        /// </summary>
        /// <remarks>
        /// Update a FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="type">Message routing type. Allowed values are &#x60;None&#x60;, &#x60;Device&#x60;, &#x60;Email&#x60;, &#x60;URL&#x60;, or &#x60;Forward&#x60;.</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method. Allowed values are &#x60;GET&#x60;, &#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of InlineResponse2014</returns>
        System.Threading.Tasks.Task<InlineResponse2014> UpdateFonenumberAsync (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Update FoneNumber
        /// </summary>
        /// <remarks>
        /// Update a FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="type">Message routing type. Allowed values are &#x60;None&#x60;, &#x60;Device&#x60;, &#x60;Email&#x60;, &#x60;URL&#x60;, or &#x60;Forward&#x60;.</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method. Allowed values are &#x60;GET&#x60;, &#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> UpdateFonenumberAsyncWithHttpInfo (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null);
        /// <summary>
        /// Update FoneNumber
        /// </summary>
        /// <remarks>
        /// Update a FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="type">Message routing type. Allowed values are &#x60;None&#x60;, &#x60;Device&#x60;, &#x60;Email&#x60;, &#x60;URL&#x60;, or &#x60;Forward&#x60;.</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method. Allowed values are &#x60;GET&#x60;, &#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of InlineResponse2014</returns>
        System.Threading.Tasks.Task<InlineResponse2014> UpdateFonenumber_0Async (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Update FoneNumber
        /// </summary>
        /// <remarks>
        /// Update a FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="type">Message routing type. Allowed values are &#x60;None&#x60;, &#x60;Device&#x60;, &#x60;Email&#x60;, &#x60;URL&#x60;, or &#x60;Forward&#x60;.</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method. Allowed values are &#x60;GET&#x60;, &#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> UpdateFonenumber_0AsyncWithHttpInfo (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FonenumbersApi : IFonenumbersApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FonenumbersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FonenumbersApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FonenumbersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FonenumbersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create FoneNumber Order a new FoneNumber for a given area code.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaCode">Valid 3-digit area code</param>
        /// <returns>InlineResponse2014</returns>
        public InlineResponse2014 CreateFonenumber (string areaCode)
        {
             ApiResponse<InlineResponse2014> localVarResponse = CreateFonenumberWithHttpInfo(areaCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create FoneNumber Order a new FoneNumber for a given area code.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaCode">Valid 3-digit area code</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        public ApiResponse< InlineResponse2014 > CreateFonenumberWithHttpInfo (string areaCode)
        {
            // verify the required parameter 'areaCode' is set
            if (areaCode == null)
                throw new ApiException(400, "Missing required parameter 'areaCode' when calling FonenumbersApi->CreateFonenumber");

            var localVarPath = "/fonenumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (areaCode != null) localVarFormParams.Add("area_code", Configuration.ApiClient.ParameterToString(areaCode)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFonenumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
        }

        /// <summary>
        /// Create FoneNumber Order a new FoneNumber for a given area code.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaCode">Valid 3-digit area code</param>
        /// <returns>Task of InlineResponse2014</returns>
        public async System.Threading.Tasks.Task<InlineResponse2014> CreateFonenumberAsync (string areaCode)
        {
             ApiResponse<InlineResponse2014> localVarResponse = await CreateFonenumberAsyncWithHttpInfo(areaCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create FoneNumber Order a new FoneNumber for a given area code.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaCode">Valid 3-digit area code</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> CreateFonenumberAsyncWithHttpInfo (string areaCode)
        {
            // verify the required parameter 'areaCode' is set
            if (areaCode == null)
                throw new ApiException(400, "Missing required parameter 'areaCode' when calling FonenumbersApi->CreateFonenumber");

            var localVarPath = "/fonenumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (areaCode != null) localVarFormParams.Add("area_code", Configuration.ApiClient.ParameterToString(areaCode)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFonenumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
        }

        /// <summary>
        /// Create FoneNumber Order a new FoneNumber for a given area code.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaCode">Valid 3-digit area code</param>
        /// <returns>InlineResponse2014</returns>
        public InlineResponse2014 CreateFonenumber_0 (string areaCode)
        {
             ApiResponse<InlineResponse2014> localVarResponse = CreateFonenumber_0WithHttpInfo(areaCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create FoneNumber Order a new FoneNumber for a given area code.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaCode">Valid 3-digit area code</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        public ApiResponse< InlineResponse2014 > CreateFonenumber_0WithHttpInfo (string areaCode)
        {
            // verify the required parameter 'areaCode' is set
            if (areaCode == null)
                throw new ApiException(400, "Missing required parameter 'areaCode' when calling FonenumbersApi->CreateFonenumber_0");

            var localVarPath = "/fonenumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (areaCode != null) localVarFormParams.Add("area_code", Configuration.ApiClient.ParameterToString(areaCode)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFonenumber_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
        }

        /// <summary>
        /// Create FoneNumber Order a new FoneNumber for a given area code.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaCode">Valid 3-digit area code</param>
        /// <returns>Task of InlineResponse2014</returns>
        public async System.Threading.Tasks.Task<InlineResponse2014> CreateFonenumber_0Async (string areaCode)
        {
             ApiResponse<InlineResponse2014> localVarResponse = await CreateFonenumber_0AsyncWithHttpInfo(areaCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create FoneNumber Order a new FoneNumber for a given area code.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areaCode">Valid 3-digit area code</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> CreateFonenumber_0AsyncWithHttpInfo (string areaCode)
        {
            // verify the required parameter 'areaCode' is set
            if (areaCode == null)
                throw new ApiException(400, "Missing required parameter 'areaCode' when calling FonenumbersApi->CreateFonenumber_0");

            var localVarPath = "/fonenumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (areaCode != null) localVarFormParams.Add("area_code", Configuration.ApiClient.ParameterToString(areaCode)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFonenumber_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
        }

        /// <summary>
        /// Delete FoneNumber Remove a FoneNumber from an account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>InlineResponse2014</returns>
        public InlineResponse2014 DeleteFonenumber (string fonenumber)
        {
             ApiResponse<InlineResponse2014> localVarResponse = DeleteFonenumberWithHttpInfo(fonenumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete FoneNumber Remove a FoneNumber from an account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        public ApiResponse< InlineResponse2014 > DeleteFonenumberWithHttpInfo (string fonenumber)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling FonenumbersApi->DeleteFonenumber");

            var localVarPath = "/fonenumbers/{fonenumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarPathParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFonenumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
        }

        /// <summary>
        /// Delete FoneNumber Remove a FoneNumber from an account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>Task of InlineResponse2014</returns>
        public async System.Threading.Tasks.Task<InlineResponse2014> DeleteFonenumberAsync (string fonenumber)
        {
             ApiResponse<InlineResponse2014> localVarResponse = await DeleteFonenumberAsyncWithHttpInfo(fonenumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete FoneNumber Remove a FoneNumber from an account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> DeleteFonenumberAsyncWithHttpInfo (string fonenumber)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling FonenumbersApi->DeleteFonenumber");

            var localVarPath = "/fonenumbers/{fonenumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarPathParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFonenumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
        }

        /// <summary>
        /// Delete FoneNumber Remove a FoneNumber from an account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>InlineResponse2014</returns>
        public InlineResponse2014 DeleteFonenumber_0 (string fonenumber)
        {
             ApiResponse<InlineResponse2014> localVarResponse = DeleteFonenumber_0WithHttpInfo(fonenumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete FoneNumber Remove a FoneNumber from an account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        public ApiResponse< InlineResponse2014 > DeleteFonenumber_0WithHttpInfo (string fonenumber)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling FonenumbersApi->DeleteFonenumber_0");

            var localVarPath = "/fonenumbers/{fonenumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarPathParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFonenumber_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
        }

        /// <summary>
        /// Delete FoneNumber Remove a FoneNumber from an account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>Task of InlineResponse2014</returns>
        public async System.Threading.Tasks.Task<InlineResponse2014> DeleteFonenumber_0Async (string fonenumber)
        {
             ApiResponse<InlineResponse2014> localVarResponse = await DeleteFonenumber_0AsyncWithHttpInfo(fonenumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete FoneNumber Remove a FoneNumber from an account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> DeleteFonenumber_0AsyncWithHttpInfo (string fonenumber)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling FonenumbersApi->DeleteFonenumber_0");

            var localVarPath = "/fonenumbers/{fonenumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarPathParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFonenumber_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
        }

        /// <summary>
        /// Get FoneNumber Get information for a single FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>InlineResponse2014</returns>
        public InlineResponse2014 GetFonenumber (string fonenumber)
        {
             ApiResponse<InlineResponse2014> localVarResponse = GetFonenumberWithHttpInfo(fonenumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get FoneNumber Get information for a single FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        public ApiResponse< InlineResponse2014 > GetFonenumberWithHttpInfo (string fonenumber)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling FonenumbersApi->GetFonenumber");

            var localVarPath = "/fonenumbers/{fonenumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarPathParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFonenumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
        }

        /// <summary>
        /// Get FoneNumber Get information for a single FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>Task of InlineResponse2014</returns>
        public async System.Threading.Tasks.Task<InlineResponse2014> GetFonenumberAsync (string fonenumber)
        {
             ApiResponse<InlineResponse2014> localVarResponse = await GetFonenumberAsyncWithHttpInfo(fonenumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get FoneNumber Get information for a single FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> GetFonenumberAsyncWithHttpInfo (string fonenumber)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling FonenumbersApi->GetFonenumber");

            var localVarPath = "/fonenumbers/{fonenumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarPathParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFonenumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
        }

        /// <summary>
        /// Get FoneNumber Get information for a single FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>InlineResponse2014</returns>
        public InlineResponse2014 GetFonenumber_0 (string fonenumber)
        {
             ApiResponse<InlineResponse2014> localVarResponse = GetFonenumber_0WithHttpInfo(fonenumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get FoneNumber Get information for a single FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        public ApiResponse< InlineResponse2014 > GetFonenumber_0WithHttpInfo (string fonenumber)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling FonenumbersApi->GetFonenumber_0");

            var localVarPath = "/fonenumbers/{fonenumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarPathParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFonenumber_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
        }

        /// <summary>
        /// Get FoneNumber Get information for a single FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>Task of InlineResponse2014</returns>
        public async System.Threading.Tasks.Task<InlineResponse2014> GetFonenumber_0Async (string fonenumber)
        {
             ApiResponse<InlineResponse2014> localVarResponse = await GetFonenumber_0AsyncWithHttpInfo(fonenumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get FoneNumber Get information for a single FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> GetFonenumber_0AsyncWithHttpInfo (string fonenumber)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling FonenumbersApi->GetFonenumber_0");

            var localVarPath = "/fonenumbers/{fonenumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarPathParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFonenumber_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
        }

        /// <summary>
        /// Get FoneNumbers Get a list of all FoneNumbers, or a selection based on a filter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the response attributes. Allowed values are &#x60;fonenumbers&#x60; or &#x60;all&#x60;. See **Notes** for additional information. (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 GetFonenumbers (string filter = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = GetFonenumbersWithHttpInfo(filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get FoneNumbers Get a list of all FoneNumbers, or a selection based on a filter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the response attributes. Allowed values are &#x60;fonenumbers&#x60; or &#x60;all&#x60;. See **Notes** for additional information. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > GetFonenumbersWithHttpInfo (string filter = null)
        {

            var localVarPath = "/fonenumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFonenumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Get FoneNumbers Get a list of all FoneNumbers, or a selection based on a filter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the response attributes. Allowed values are &#x60;fonenumbers&#x60; or &#x60;all&#x60;. See **Notes** for additional information. (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> GetFonenumbersAsync (string filter = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await GetFonenumbersAsyncWithHttpInfo(filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get FoneNumbers Get a list of all FoneNumbers, or a selection based on a filter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the response attributes. Allowed values are &#x60;fonenumbers&#x60; or &#x60;all&#x60;. See **Notes** for additional information. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetFonenumbersAsyncWithHttpInfo (string filter = null)
        {

            var localVarPath = "/fonenumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFonenumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Get FoneNumbers Get a list of all FoneNumbers, or a selection based on a filter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the response attributes. Allowed values are &#x60;fonenumbers&#x60; or &#x60;all&#x60;. See **Notes** for additional information. (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 GetFonenumbers_0 (string filter = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = GetFonenumbers_0WithHttpInfo(filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get FoneNumbers Get a list of all FoneNumbers, or a selection based on a filter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the response attributes. Allowed values are &#x60;fonenumbers&#x60; or &#x60;all&#x60;. See **Notes** for additional information. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > GetFonenumbers_0WithHttpInfo (string filter = null)
        {

            var localVarPath = "/fonenumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFonenumbers_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Get FoneNumbers Get a list of all FoneNumbers, or a selection based on a filter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the response attributes. Allowed values are &#x60;fonenumbers&#x60; or &#x60;all&#x60;. See **Notes** for additional information. (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> GetFonenumbers_0Async (string filter = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await GetFonenumbers_0AsyncWithHttpInfo(filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get FoneNumbers Get a list of all FoneNumbers, or a selection based on a filter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter the response attributes. Allowed values are &#x60;fonenumbers&#x60; or &#x60;all&#x60;. See **Notes** for additional information. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetFonenumbers_0AsyncWithHttpInfo (string filter = null)
        {

            var localVarPath = "/fonenumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFonenumbers_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Set Service Type Set service type for a FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="serviceType">Service type. Allowed values are &#x60;Conference&#x60;, &#x60;Hangup&#x60;, &#x60;Busy&#x60;, &#x60;Reject&#x60;</param>
        /// <param name="serviceId">Service id (optional)</param>
        /// <returns>InlineResponse2014</returns>
        public InlineResponse2014 SetFonenumberServiceType (string fonenumber, string serviceType, string serviceId = null)
        {
             ApiResponse<InlineResponse2014> localVarResponse = SetFonenumberServiceTypeWithHttpInfo(fonenumber, serviceType, serviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set Service Type Set service type for a FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="serviceType">Service type. Allowed values are &#x60;Conference&#x60;, &#x60;Hangup&#x60;, &#x60;Busy&#x60;, &#x60;Reject&#x60;</param>
        /// <param name="serviceId">Service id (optional)</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        public ApiResponse< InlineResponse2014 > SetFonenumberServiceTypeWithHttpInfo (string fonenumber, string serviceType, string serviceId = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling FonenumbersApi->SetFonenumberServiceType");
            // verify the required parameter 'serviceType' is set
            if (serviceType == null)
                throw new ApiException(400, "Missing required parameter 'serviceType' when calling FonenumbersApi->SetFonenumberServiceType");

            var localVarPath = "/fonenumbers/{fonenumber}/service";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarPathParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // path parameter
            if (serviceType != null) localVarFormParams.Add("service_type", Configuration.ApiClient.ParameterToString(serviceType)); // form parameter
            if (serviceId != null) localVarFormParams.Add("service_id", Configuration.ApiClient.ParameterToString(serviceId)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetFonenumberServiceType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
        }

        /// <summary>
        /// Set Service Type Set service type for a FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="serviceType">Service type. Allowed values are &#x60;Conference&#x60;, &#x60;Hangup&#x60;, &#x60;Busy&#x60;, &#x60;Reject&#x60;</param>
        /// <param name="serviceId">Service id (optional)</param>
        /// <returns>Task of InlineResponse2014</returns>
        public async System.Threading.Tasks.Task<InlineResponse2014> SetFonenumberServiceTypeAsync (string fonenumber, string serviceType, string serviceId = null)
        {
             ApiResponse<InlineResponse2014> localVarResponse = await SetFonenumberServiceTypeAsyncWithHttpInfo(fonenumber, serviceType, serviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set Service Type Set service type for a FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="serviceType">Service type. Allowed values are &#x60;Conference&#x60;, &#x60;Hangup&#x60;, &#x60;Busy&#x60;, &#x60;Reject&#x60;</param>
        /// <param name="serviceId">Service id (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> SetFonenumberServiceTypeAsyncWithHttpInfo (string fonenumber, string serviceType, string serviceId = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling FonenumbersApi->SetFonenumberServiceType");
            // verify the required parameter 'serviceType' is set
            if (serviceType == null)
                throw new ApiException(400, "Missing required parameter 'serviceType' when calling FonenumbersApi->SetFonenumberServiceType");

            var localVarPath = "/fonenumbers/{fonenumber}/service";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarPathParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // path parameter
            if (serviceType != null) localVarFormParams.Add("service_type", Configuration.ApiClient.ParameterToString(serviceType)); // form parameter
            if (serviceId != null) localVarFormParams.Add("service_id", Configuration.ApiClient.ParameterToString(serviceId)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetFonenumberServiceType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
        }

        /// <summary>
        /// Set Service Type Set service type for a FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="serviceType">Service type. Allowed values are &#x60;Conference&#x60;, &#x60;Hangup&#x60;, &#x60;Busy&#x60;, &#x60;Reject&#x60;</param>
        /// <param name="serviceId">Service id (optional)</param>
        /// <returns>InlineResponse2014</returns>
        public InlineResponse2014 SetFonenumberServiceType_0 (string fonenumber, string serviceType, string serviceId = null)
        {
             ApiResponse<InlineResponse2014> localVarResponse = SetFonenumberServiceType_0WithHttpInfo(fonenumber, serviceType, serviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set Service Type Set service type for a FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="serviceType">Service type. Allowed values are &#x60;Conference&#x60;, &#x60;Hangup&#x60;, &#x60;Busy&#x60;, &#x60;Reject&#x60;</param>
        /// <param name="serviceId">Service id (optional)</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        public ApiResponse< InlineResponse2014 > SetFonenumberServiceType_0WithHttpInfo (string fonenumber, string serviceType, string serviceId = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling FonenumbersApi->SetFonenumberServiceType_0");
            // verify the required parameter 'serviceType' is set
            if (serviceType == null)
                throw new ApiException(400, "Missing required parameter 'serviceType' when calling FonenumbersApi->SetFonenumberServiceType_0");

            var localVarPath = "/fonenumbers/{fonenumber}/service";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarPathParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // path parameter
            if (serviceType != null) localVarFormParams.Add("service_type", Configuration.ApiClient.ParameterToString(serviceType)); // form parameter
            if (serviceId != null) localVarFormParams.Add("service_id", Configuration.ApiClient.ParameterToString(serviceId)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetFonenumberServiceType_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
        }

        /// <summary>
        /// Set Service Type Set service type for a FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="serviceType">Service type. Allowed values are &#x60;Conference&#x60;, &#x60;Hangup&#x60;, &#x60;Busy&#x60;, &#x60;Reject&#x60;</param>
        /// <param name="serviceId">Service id (optional)</param>
        /// <returns>Task of InlineResponse2014</returns>
        public async System.Threading.Tasks.Task<InlineResponse2014> SetFonenumberServiceType_0Async (string fonenumber, string serviceType, string serviceId = null)
        {
             ApiResponse<InlineResponse2014> localVarResponse = await SetFonenumberServiceType_0AsyncWithHttpInfo(fonenumber, serviceType, serviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set Service Type Set service type for a FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="serviceType">Service type. Allowed values are &#x60;Conference&#x60;, &#x60;Hangup&#x60;, &#x60;Busy&#x60;, &#x60;Reject&#x60;</param>
        /// <param name="serviceId">Service id (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> SetFonenumberServiceType_0AsyncWithHttpInfo (string fonenumber, string serviceType, string serviceId = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling FonenumbersApi->SetFonenumberServiceType_0");
            // verify the required parameter 'serviceType' is set
            if (serviceType == null)
                throw new ApiException(400, "Missing required parameter 'serviceType' when calling FonenumbersApi->SetFonenumberServiceType_0");

            var localVarPath = "/fonenumbers/{fonenumber}/service";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarPathParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // path parameter
            if (serviceType != null) localVarFormParams.Add("service_type", Configuration.ApiClient.ParameterToString(serviceType)); // form parameter
            if (serviceId != null) localVarFormParams.Add("service_id", Configuration.ApiClient.ParameterToString(serviceId)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetFonenumberServiceType_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
        }

        /// <summary>
        /// Update FoneNumber Update a FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="type">Message routing type. Allowed values are &#x60;None&#x60;, &#x60;Device&#x60;, &#x60;Email&#x60;, &#x60;URL&#x60;, or &#x60;Forward&#x60;.</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method. Allowed values are &#x60;GET&#x60;, &#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>InlineResponse2014</returns>
        public InlineResponse2014 UpdateFonenumber (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<InlineResponse2014> localVarResponse = UpdateFonenumberWithHttpInfo(fonenumber, type, value, urlMethod, urlUsername, urlPassword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update FoneNumber Update a FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="type">Message routing type. Allowed values are &#x60;None&#x60;, &#x60;Device&#x60;, &#x60;Email&#x60;, &#x60;URL&#x60;, or &#x60;Forward&#x60;.</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method. Allowed values are &#x60;GET&#x60;, &#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        public ApiResponse< InlineResponse2014 > UpdateFonenumberWithHttpInfo (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling FonenumbersApi->UpdateFonenumber");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling FonenumbersApi->UpdateFonenumber");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling FonenumbersApi->UpdateFonenumber");
            // verify the required parameter 'urlMethod' is set
            if (urlMethod == null)
                throw new ApiException(400, "Missing required parameter 'urlMethod' when calling FonenumbersApi->UpdateFonenumber");

            var localVarPath = "/fonenumbers/{fonenumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarPathParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // path parameter
            if (type != null) localVarFormParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (value != null) localVarFormParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // form parameter
            if (urlMethod != null) localVarFormParams.Add("url_method", Configuration.ApiClient.ParameterToString(urlMethod)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFonenumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
        }

        /// <summary>
        /// Update FoneNumber Update a FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="type">Message routing type. Allowed values are &#x60;None&#x60;, &#x60;Device&#x60;, &#x60;Email&#x60;, &#x60;URL&#x60;, or &#x60;Forward&#x60;.</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method. Allowed values are &#x60;GET&#x60;, &#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of InlineResponse2014</returns>
        public async System.Threading.Tasks.Task<InlineResponse2014> UpdateFonenumberAsync (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<InlineResponse2014> localVarResponse = await UpdateFonenumberAsyncWithHttpInfo(fonenumber, type, value, urlMethod, urlUsername, urlPassword);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update FoneNumber Update a FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="type">Message routing type. Allowed values are &#x60;None&#x60;, &#x60;Device&#x60;, &#x60;Email&#x60;, &#x60;URL&#x60;, or &#x60;Forward&#x60;.</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method. Allowed values are &#x60;GET&#x60;, &#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> UpdateFonenumberAsyncWithHttpInfo (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling FonenumbersApi->UpdateFonenumber");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling FonenumbersApi->UpdateFonenumber");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling FonenumbersApi->UpdateFonenumber");
            // verify the required parameter 'urlMethod' is set
            if (urlMethod == null)
                throw new ApiException(400, "Missing required parameter 'urlMethod' when calling FonenumbersApi->UpdateFonenumber");

            var localVarPath = "/fonenumbers/{fonenumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarPathParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // path parameter
            if (type != null) localVarFormParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (value != null) localVarFormParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // form parameter
            if (urlMethod != null) localVarFormParams.Add("url_method", Configuration.ApiClient.ParameterToString(urlMethod)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFonenumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
        }

        /// <summary>
        /// Update FoneNumber Update a FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="type">Message routing type. Allowed values are &#x60;None&#x60;, &#x60;Device&#x60;, &#x60;Email&#x60;, &#x60;URL&#x60;, or &#x60;Forward&#x60;.</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method. Allowed values are &#x60;GET&#x60;, &#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>InlineResponse2014</returns>
        public InlineResponse2014 UpdateFonenumber_0 (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<InlineResponse2014> localVarResponse = UpdateFonenumber_0WithHttpInfo(fonenumber, type, value, urlMethod, urlUsername, urlPassword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update FoneNumber Update a FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="type">Message routing type. Allowed values are &#x60;None&#x60;, &#x60;Device&#x60;, &#x60;Email&#x60;, &#x60;URL&#x60;, or &#x60;Forward&#x60;.</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method. Allowed values are &#x60;GET&#x60;, &#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        public ApiResponse< InlineResponse2014 > UpdateFonenumber_0WithHttpInfo (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling FonenumbersApi->UpdateFonenumber_0");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling FonenumbersApi->UpdateFonenumber_0");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling FonenumbersApi->UpdateFonenumber_0");
            // verify the required parameter 'urlMethod' is set
            if (urlMethod == null)
                throw new ApiException(400, "Missing required parameter 'urlMethod' when calling FonenumbersApi->UpdateFonenumber_0");

            var localVarPath = "/fonenumbers/{fonenumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarPathParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // path parameter
            if (type != null) localVarFormParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (value != null) localVarFormParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // form parameter
            if (urlMethod != null) localVarFormParams.Add("url_method", Configuration.ApiClient.ParameterToString(urlMethod)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFonenumber_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
        }

        /// <summary>
        /// Update FoneNumber Update a FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="type">Message routing type. Allowed values are &#x60;None&#x60;, &#x60;Device&#x60;, &#x60;Email&#x60;, &#x60;URL&#x60;, or &#x60;Forward&#x60;.</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method. Allowed values are &#x60;GET&#x60;, &#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of InlineResponse2014</returns>
        public async System.Threading.Tasks.Task<InlineResponse2014> UpdateFonenumber_0Async (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<InlineResponse2014> localVarResponse = await UpdateFonenumber_0AsyncWithHttpInfo(fonenumber, type, value, urlMethod, urlUsername, urlPassword);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update FoneNumber Update a FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="type">Message routing type. Allowed values are &#x60;None&#x60;, &#x60;Device&#x60;, &#x60;Email&#x60;, &#x60;URL&#x60;, or &#x60;Forward&#x60;.</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method. Allowed values are &#x60;GET&#x60;, &#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> UpdateFonenumber_0AsyncWithHttpInfo (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling FonenumbersApi->UpdateFonenumber_0");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling FonenumbersApi->UpdateFonenumber_0");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling FonenumbersApi->UpdateFonenumber_0");
            // verify the required parameter 'urlMethod' is set
            if (urlMethod == null)
                throw new ApiException(400, "Missing required parameter 'urlMethod' when calling FonenumbersApi->UpdateFonenumber_0");

            var localVarPath = "/fonenumbers/{fonenumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarPathParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // path parameter
            if (type != null) localVarFormParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (value != null) localVarFormParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // form parameter
            if (urlMethod != null) localVarFormParams.Add("url_method", Configuration.ApiClient.ParameterToString(urlMethod)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFonenumber_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
        }

    }
}
