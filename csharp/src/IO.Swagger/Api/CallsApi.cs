/* 
 * FoneStorm API 2.2.0 (Breeze)
 *
 * FracTEL's Middleware API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICallsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Set Receive Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a call is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>InlineResponse2013</returns>
        InlineResponse2013 ConfigureCallReceiveNotify (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Set Receive Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a call is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        ApiResponse<InlineResponse2013> ConfigureCallReceiveNotifyWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);
        /// <summary>
        /// Set Receive Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a call is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>InlineResponse2013</returns>
        InlineResponse2013 ConfigureCallReceiveNotify_0 (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Set Receive Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a call is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        ApiResponse<InlineResponse2013> ConfigureCallReceiveNotify_0WithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);
        /// <summary>
        /// Set Send Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when an outbound call is made. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>InlineResponse2013</returns>
        InlineResponse2013 ConfigureCallSendNotify (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Set Send Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when an outbound call is made. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        ApiResponse<InlineResponse2013> ConfigureCallSendNotifyWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);
        /// <summary>
        /// Set Send Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when an outbound call is made. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>InlineResponse2013</returns>
        InlineResponse2013 ConfigureCallSendNotify_0 (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Set Send Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when an outbound call is made. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        ApiResponse<InlineResponse2013> ConfigureCallSendNotify_0WithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);
        /// <summary>
        /// Create Call
        /// </summary>
        /// <remarks>
        /// Create a new voice call from a FoneNumber to a recipient phone number.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber to use as caller</param>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="tts">Text to speech message (optional)</param>
        /// <returns>InlineResponse2012</returns>
        InlineResponse2012 CreateCall (string fonenumber, string to, string tts = null);

        /// <summary>
        /// Create Call
        /// </summary>
        /// <remarks>
        /// Create a new voice call from a FoneNumber to a recipient phone number.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber to use as caller</param>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="tts">Text to speech message (optional)</param>
        /// <returns>ApiResponse of InlineResponse2012</returns>
        ApiResponse<InlineResponse2012> CreateCallWithHttpInfo (string fonenumber, string to, string tts = null);
        /// <summary>
        /// Create Call
        /// </summary>
        /// <remarks>
        /// Create a new voice call from a FoneNumber to a recipient phone number.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber to use as caller</param>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="tts">Text to speech message (optional)</param>
        /// <returns>InlineResponse2012</returns>
        InlineResponse2012 CreateCall_0 (string fonenumber, string to, string tts = null);

        /// <summary>
        /// Create Call
        /// </summary>
        /// <remarks>
        /// Create a new voice call from a FoneNumber to a recipient phone number.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber to use as caller</param>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="tts">Text to speech message (optional)</param>
        /// <returns>ApiResponse of InlineResponse2012</returns>
        ApiResponse<InlineResponse2012> CreateCall_0WithHttpInfo (string fonenumber, string to, string tts = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Set Receive Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a call is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of InlineResponse2013</returns>
        System.Threading.Tasks.Task<InlineResponse2013> ConfigureCallReceiveNotifyAsync (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Set Receive Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a call is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> ConfigureCallReceiveNotifyAsyncWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);
        /// <summary>
        /// Set Receive Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a call is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of InlineResponse2013</returns>
        System.Threading.Tasks.Task<InlineResponse2013> ConfigureCallReceiveNotify_0Async (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Set Receive Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a call is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> ConfigureCallReceiveNotify_0AsyncWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);
        /// <summary>
        /// Set Send Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when an outbound call is made. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of InlineResponse2013</returns>
        System.Threading.Tasks.Task<InlineResponse2013> ConfigureCallSendNotifyAsync (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Set Send Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when an outbound call is made. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> ConfigureCallSendNotifyAsyncWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);
        /// <summary>
        /// Set Send Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when an outbound call is made. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of InlineResponse2013</returns>
        System.Threading.Tasks.Task<InlineResponse2013> ConfigureCallSendNotify_0Async (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Set Send Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when an outbound call is made. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> ConfigureCallSendNotify_0AsyncWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);
        /// <summary>
        /// Create Call
        /// </summary>
        /// <remarks>
        /// Create a new voice call from a FoneNumber to a recipient phone number.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber to use as caller</param>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="tts">Text to speech message (optional)</param>
        /// <returns>Task of InlineResponse2012</returns>
        System.Threading.Tasks.Task<InlineResponse2012> CreateCallAsync (string fonenumber, string to, string tts = null);

        /// <summary>
        /// Create Call
        /// </summary>
        /// <remarks>
        /// Create a new voice call from a FoneNumber to a recipient phone number.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber to use as caller</param>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="tts">Text to speech message (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2012>> CreateCallAsyncWithHttpInfo (string fonenumber, string to, string tts = null);
        /// <summary>
        /// Create Call
        /// </summary>
        /// <remarks>
        /// Create a new voice call from a FoneNumber to a recipient phone number.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber to use as caller</param>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="tts">Text to speech message (optional)</param>
        /// <returns>Task of InlineResponse2012</returns>
        System.Threading.Tasks.Task<InlineResponse2012> CreateCall_0Async (string fonenumber, string to, string tts = null);

        /// <summary>
        /// Create Call
        /// </summary>
        /// <remarks>
        /// Create a new voice call from a FoneNumber to a recipient phone number.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber to use as caller</param>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="tts">Text to speech message (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2012>> CreateCall_0AsyncWithHttpInfo (string fonenumber, string to, string tts = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CallsApi : ICallsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CallsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CallsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CallsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Set Receive Callback Configure the callback URL to notify when a call is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>InlineResponse2013</returns>
        public InlineResponse2013 ConfigureCallReceiveNotify (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<InlineResponse2013> localVarResponse = ConfigureCallReceiveNotifyWithHttpInfo(fonenumber, method, url, urlUsername, urlPassword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set Receive Callback Configure the callback URL to notify when a call is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        public ApiResponse< InlineResponse2013 > ConfigureCallReceiveNotifyWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling CallsApi->ConfigureCallReceiveNotify");
            // verify the required parameter 'method' is set
            if (method == null)
                throw new ApiException(400, "Missing required parameter 'method' when calling CallsApi->ConfigureCallReceiveNotify");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling CallsApi->ConfigureCallReceiveNotify");

            var localVarPath = "/calls/receive_notify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (method != null) localVarFormParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureCallReceiveNotify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Set Receive Callback Configure the callback URL to notify when a call is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of InlineResponse2013</returns>
        public async System.Threading.Tasks.Task<InlineResponse2013> ConfigureCallReceiveNotifyAsync (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<InlineResponse2013> localVarResponse = await ConfigureCallReceiveNotifyAsyncWithHttpInfo(fonenumber, method, url, urlUsername, urlPassword);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set Receive Callback Configure the callback URL to notify when a call is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> ConfigureCallReceiveNotifyAsyncWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling CallsApi->ConfigureCallReceiveNotify");
            // verify the required parameter 'method' is set
            if (method == null)
                throw new ApiException(400, "Missing required parameter 'method' when calling CallsApi->ConfigureCallReceiveNotify");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling CallsApi->ConfigureCallReceiveNotify");

            var localVarPath = "/calls/receive_notify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (method != null) localVarFormParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureCallReceiveNotify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Set Receive Callback Configure the callback URL to notify when a call is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>InlineResponse2013</returns>
        public InlineResponse2013 ConfigureCallReceiveNotify_0 (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<InlineResponse2013> localVarResponse = ConfigureCallReceiveNotify_0WithHttpInfo(fonenumber, method, url, urlUsername, urlPassword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set Receive Callback Configure the callback URL to notify when a call is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        public ApiResponse< InlineResponse2013 > ConfigureCallReceiveNotify_0WithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling CallsApi->ConfigureCallReceiveNotify_0");
            // verify the required parameter 'method' is set
            if (method == null)
                throw new ApiException(400, "Missing required parameter 'method' when calling CallsApi->ConfigureCallReceiveNotify_0");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling CallsApi->ConfigureCallReceiveNotify_0");

            var localVarPath = "/calls/receive_notify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (method != null) localVarFormParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureCallReceiveNotify_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Set Receive Callback Configure the callback URL to notify when a call is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of InlineResponse2013</returns>
        public async System.Threading.Tasks.Task<InlineResponse2013> ConfigureCallReceiveNotify_0Async (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<InlineResponse2013> localVarResponse = await ConfigureCallReceiveNotify_0AsyncWithHttpInfo(fonenumber, method, url, urlUsername, urlPassword);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set Receive Callback Configure the callback URL to notify when a call is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> ConfigureCallReceiveNotify_0AsyncWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling CallsApi->ConfigureCallReceiveNotify_0");
            // verify the required parameter 'method' is set
            if (method == null)
                throw new ApiException(400, "Missing required parameter 'method' when calling CallsApi->ConfigureCallReceiveNotify_0");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling CallsApi->ConfigureCallReceiveNotify_0");

            var localVarPath = "/calls/receive_notify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (method != null) localVarFormParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureCallReceiveNotify_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Set Send Callback Configure the callback URL to notify when an outbound call is made. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>InlineResponse2013</returns>
        public InlineResponse2013 ConfigureCallSendNotify (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<InlineResponse2013> localVarResponse = ConfigureCallSendNotifyWithHttpInfo(fonenumber, method, url, urlUsername, urlPassword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set Send Callback Configure the callback URL to notify when an outbound call is made. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        public ApiResponse< InlineResponse2013 > ConfigureCallSendNotifyWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling CallsApi->ConfigureCallSendNotify");
            // verify the required parameter 'method' is set
            if (method == null)
                throw new ApiException(400, "Missing required parameter 'method' when calling CallsApi->ConfigureCallSendNotify");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling CallsApi->ConfigureCallSendNotify");

            var localVarPath = "/calls/send_notify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (method != null) localVarFormParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureCallSendNotify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Set Send Callback Configure the callback URL to notify when an outbound call is made. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of InlineResponse2013</returns>
        public async System.Threading.Tasks.Task<InlineResponse2013> ConfigureCallSendNotifyAsync (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<InlineResponse2013> localVarResponse = await ConfigureCallSendNotifyAsyncWithHttpInfo(fonenumber, method, url, urlUsername, urlPassword);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set Send Callback Configure the callback URL to notify when an outbound call is made. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> ConfigureCallSendNotifyAsyncWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling CallsApi->ConfigureCallSendNotify");
            // verify the required parameter 'method' is set
            if (method == null)
                throw new ApiException(400, "Missing required parameter 'method' when calling CallsApi->ConfigureCallSendNotify");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling CallsApi->ConfigureCallSendNotify");

            var localVarPath = "/calls/send_notify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (method != null) localVarFormParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureCallSendNotify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Set Send Callback Configure the callback URL to notify when an outbound call is made. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>InlineResponse2013</returns>
        public InlineResponse2013 ConfigureCallSendNotify_0 (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<InlineResponse2013> localVarResponse = ConfigureCallSendNotify_0WithHttpInfo(fonenumber, method, url, urlUsername, urlPassword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set Send Callback Configure the callback URL to notify when an outbound call is made. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        public ApiResponse< InlineResponse2013 > ConfigureCallSendNotify_0WithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling CallsApi->ConfigureCallSendNotify_0");
            // verify the required parameter 'method' is set
            if (method == null)
                throw new ApiException(400, "Missing required parameter 'method' when calling CallsApi->ConfigureCallSendNotify_0");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling CallsApi->ConfigureCallSendNotify_0");

            var localVarPath = "/calls/send_notify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (method != null) localVarFormParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureCallSendNotify_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Set Send Callback Configure the callback URL to notify when an outbound call is made. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of InlineResponse2013</returns>
        public async System.Threading.Tasks.Task<InlineResponse2013> ConfigureCallSendNotify_0Async (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<InlineResponse2013> localVarResponse = await ConfigureCallSendNotify_0AsyncWithHttpInfo(fonenumber, method, url, urlUsername, urlPassword);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set Send Callback Configure the callback URL to notify when an outbound call is made. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber associated with the account</param>
        /// <param name="method">Callback URL method. Allowed values are &#x60;GET&#x60;,&#x60;POST&#x60;, or &#x60;JSON&#x60;. See **Notes** for additional information.</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> ConfigureCallSendNotify_0AsyncWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling CallsApi->ConfigureCallSendNotify_0");
            // verify the required parameter 'method' is set
            if (method == null)
                throw new ApiException(400, "Missing required parameter 'method' when calling CallsApi->ConfigureCallSendNotify_0");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling CallsApi->ConfigureCallSendNotify_0");

            var localVarPath = "/calls/send_notify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (method != null) localVarFormParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureCallSendNotify_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Create Call Create a new voice call from a FoneNumber to a recipient phone number.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber to use as caller</param>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="tts">Text to speech message (optional)</param>
        /// <returns>InlineResponse2012</returns>
        public InlineResponse2012 CreateCall (string fonenumber, string to, string tts = null)
        {
             ApiResponse<InlineResponse2012> localVarResponse = CreateCallWithHttpInfo(fonenumber, to, tts);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Call Create a new voice call from a FoneNumber to a recipient phone number.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber to use as caller</param>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="tts">Text to speech message (optional)</param>
        /// <returns>ApiResponse of InlineResponse2012</returns>
        public ApiResponse< InlineResponse2012 > CreateCallWithHttpInfo (string fonenumber, string to, string tts = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling CallsApi->CreateCall");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CallsApi->CreateCall");

            var localVarPath = "/calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (to != null) localVarFormParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (tts != null) localVarFormParams.Add("tts", Configuration.ApiClient.ParameterToString(tts)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2012>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2012) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2012)));
        }

        /// <summary>
        /// Create Call Create a new voice call from a FoneNumber to a recipient phone number.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber to use as caller</param>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="tts">Text to speech message (optional)</param>
        /// <returns>Task of InlineResponse2012</returns>
        public async System.Threading.Tasks.Task<InlineResponse2012> CreateCallAsync (string fonenumber, string to, string tts = null)
        {
             ApiResponse<InlineResponse2012> localVarResponse = await CreateCallAsyncWithHttpInfo(fonenumber, to, tts);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Call Create a new voice call from a FoneNumber to a recipient phone number.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber to use as caller</param>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="tts">Text to speech message (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2012)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2012>> CreateCallAsyncWithHttpInfo (string fonenumber, string to, string tts = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling CallsApi->CreateCall");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CallsApi->CreateCall");

            var localVarPath = "/calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (to != null) localVarFormParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (tts != null) localVarFormParams.Add("tts", Configuration.ApiClient.ParameterToString(tts)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2012>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2012) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2012)));
        }

        /// <summary>
        /// Create Call Create a new voice call from a FoneNumber to a recipient phone number.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber to use as caller</param>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="tts">Text to speech message (optional)</param>
        /// <returns>InlineResponse2012</returns>
        public InlineResponse2012 CreateCall_0 (string fonenumber, string to, string tts = null)
        {
             ApiResponse<InlineResponse2012> localVarResponse = CreateCall_0WithHttpInfo(fonenumber, to, tts);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Call Create a new voice call from a FoneNumber to a recipient phone number.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber to use as caller</param>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="tts">Text to speech message (optional)</param>
        /// <returns>ApiResponse of InlineResponse2012</returns>
        public ApiResponse< InlineResponse2012 > CreateCall_0WithHttpInfo (string fonenumber, string to, string tts = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling CallsApi->CreateCall_0");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CallsApi->CreateCall_0");

            var localVarPath = "/calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (to != null) localVarFormParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (tts != null) localVarFormParams.Add("tts", Configuration.ApiClient.ParameterToString(tts)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCall_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2012>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2012) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2012)));
        }

        /// <summary>
        /// Create Call Create a new voice call from a FoneNumber to a recipient phone number.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber to use as caller</param>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="tts">Text to speech message (optional)</param>
        /// <returns>Task of InlineResponse2012</returns>
        public async System.Threading.Tasks.Task<InlineResponse2012> CreateCall_0Async (string fonenumber, string to, string tts = null)
        {
             ApiResponse<InlineResponse2012> localVarResponse = await CreateCall_0AsyncWithHttpInfo(fonenumber, to, tts);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Call Create a new voice call from a FoneNumber to a recipient phone number.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FoneNumber to use as caller</param>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="tts">Text to speech message (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2012)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2012>> CreateCall_0AsyncWithHttpInfo (string fonenumber, string to, string tts = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling CallsApi->CreateCall_0");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CallsApi->CreateCall_0");

            var localVarPath = "/calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (to != null) localVarFormParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (tts != null) localVarFormParams.Add("tts", Configuration.ApiClient.ParameterToString(tts)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCall_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2012>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2012) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2012)));
        }

    }
}
