/* 
 * FoneStorm API 2.2.0
 *
 * Extended API Documentation: https://developer.fonestorm.com
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFaxesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new fax under the account.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FracTEL phone number to use for fax.</param>
        /// <param name="to">Phone number to fax.</param>
        /// <param name="message">Message to fax. (optional)</param>
        /// <param name="pdf"> (optional)</param>
        /// <returns>string</returns>
        string PostFaxes (string fonenumber, string to, string message = null, string pdf = null);

        /// <summary>
        /// Create a new fax under the account.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FracTEL phone number to use for fax.</param>
        /// <param name="to">Phone number to fax.</param>
        /// <param name="message">Message to fax. (optional)</param>
        /// <param name="pdf"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostFaxesWithHttpInfo (string fonenumber, string to, string message = null, string pdf = null);
        /// <summary>
        /// Configure the callback URL to notify when a fax is received.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL phone number.</param>
        /// <param name="method">Callback URL method.</param>
        /// <param name="url">Callback URL.</param>
        /// <param name="urlUsername">Callback URL username. (optional)</param>
        /// <param name="urlPassword">Callback URL password. (optional)</param>
        /// <returns>string</returns>
        string PostFaxesReceiveNotify (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Configure the callback URL to notify when a fax is received.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL phone number.</param>
        /// <param name="method">Callback URL method.</param>
        /// <param name="url">Callback URL.</param>
        /// <param name="urlUsername">Callback URL username. (optional)</param>
        /// <param name="urlPassword">Callback URL password. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostFaxesReceiveNotifyWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);
        /// <summary>
        /// Configure the callback URL to notify when a fax is made.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL phone number</param>
        /// <param name="method">Callback URL method.</param>
        /// <param name="url">Callback URL.</param>
        /// <param name="urlUsername">Callback URL username. (optional)</param>
        /// <param name="urlPassword">Callback URL password. (optional)</param>
        /// <returns>string</returns>
        string PostFaxesSendNotify (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Configure the callback URL to notify when a fax is made.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL phone number</param>
        /// <param name="method">Callback URL method.</param>
        /// <param name="url">Callback URL.</param>
        /// <param name="urlUsername">Callback URL username. (optional)</param>
        /// <param name="urlPassword">Callback URL password. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostFaxesSendNotifyWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new fax under the account.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FracTEL phone number to use for fax.</param>
        /// <param name="to">Phone number to fax.</param>
        /// <param name="message">Message to fax. (optional)</param>
        /// <param name="pdf"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostFaxesAsync (string fonenumber, string to, string message = null, string pdf = null);

        /// <summary>
        /// Create a new fax under the account.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FracTEL phone number to use for fax.</param>
        /// <param name="to">Phone number to fax.</param>
        /// <param name="message">Message to fax. (optional)</param>
        /// <param name="pdf"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostFaxesAsyncWithHttpInfo (string fonenumber, string to, string message = null, string pdf = null);
        /// <summary>
        /// Configure the callback URL to notify when a fax is received.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL phone number.</param>
        /// <param name="method">Callback URL method.</param>
        /// <param name="url">Callback URL.</param>
        /// <param name="urlUsername">Callback URL username. (optional)</param>
        /// <param name="urlPassword">Callback URL password. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostFaxesReceiveNotifyAsync (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Configure the callback URL to notify when a fax is received.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL phone number.</param>
        /// <param name="method">Callback URL method.</param>
        /// <param name="url">Callback URL.</param>
        /// <param name="urlUsername">Callback URL username. (optional)</param>
        /// <param name="urlPassword">Callback URL password. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostFaxesReceiveNotifyAsyncWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);
        /// <summary>
        /// Configure the callback URL to notify when a fax is made.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL phone number</param>
        /// <param name="method">Callback URL method.</param>
        /// <param name="url">Callback URL.</param>
        /// <param name="urlUsername">Callback URL username. (optional)</param>
        /// <param name="urlPassword">Callback URL password. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostFaxesSendNotifyAsync (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Configure the callback URL to notify when a fax is made.
        /// </summary>
        /// <remarks>
        /// Returns a JSON response
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL phone number</param>
        /// <param name="method">Callback URL method.</param>
        /// <param name="url">Callback URL.</param>
        /// <param name="urlUsername">Callback URL username. (optional)</param>
        /// <param name="urlPassword">Callback URL password. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostFaxesSendNotifyAsyncWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FaxesApi : IFaxesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FaxesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FaxesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FaxesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FaxesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new fax under the account. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FracTEL phone number to use for fax.</param>
        /// <param name="to">Phone number to fax.</param>
        /// <param name="message">Message to fax. (optional)</param>
        /// <param name="pdf"> (optional)</param>
        /// <returns>string</returns>
        public string PostFaxes (string fonenumber, string to, string message = null, string pdf = null)
        {
             ApiResponse<string> localVarResponse = PostFaxesWithHttpInfo(fonenumber, to, message, pdf);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new fax under the account. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FracTEL phone number to use for fax.</param>
        /// <param name="to">Phone number to fax.</param>
        /// <param name="message">Message to fax. (optional)</param>
        /// <param name="pdf"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostFaxesWithHttpInfo (string fonenumber, string to, string message = null, string pdf = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling FaxesApi->PostFaxes");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling FaxesApi->PostFaxes");

            var localVarPath = "/faxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (to != null) localVarFormParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (message != null) localVarFormParams.Add("message", Configuration.ApiClient.ParameterToString(message)); // form parameter
            if (pdf != null) localVarFormParams.Add("pdf", Configuration.ApiClient.ParameterToString(pdf)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFaxes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create a new fax under the account. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FracTEL phone number to use for fax.</param>
        /// <param name="to">Phone number to fax.</param>
        /// <param name="message">Message to fax. (optional)</param>
        /// <param name="pdf"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostFaxesAsync (string fonenumber, string to, string message = null, string pdf = null)
        {
             ApiResponse<string> localVarResponse = await PostFaxesAsyncWithHttpInfo(fonenumber, to, message, pdf);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new fax under the account. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">FracTEL phone number to use for fax.</param>
        /// <param name="to">Phone number to fax.</param>
        /// <param name="message">Message to fax. (optional)</param>
        /// <param name="pdf"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostFaxesAsyncWithHttpInfo (string fonenumber, string to, string message = null, string pdf = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling FaxesApi->PostFaxes");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling FaxesApi->PostFaxes");

            var localVarPath = "/faxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (to != null) localVarFormParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (message != null) localVarFormParams.Add("message", Configuration.ApiClient.ParameterToString(message)); // form parameter
            if (pdf != null) localVarFormParams.Add("pdf", Configuration.ApiClient.ParameterToString(pdf)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFaxes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Configure the callback URL to notify when a fax is received. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL phone number.</param>
        /// <param name="method">Callback URL method.</param>
        /// <param name="url">Callback URL.</param>
        /// <param name="urlUsername">Callback URL username. (optional)</param>
        /// <param name="urlPassword">Callback URL password. (optional)</param>
        /// <returns>string</returns>
        public string PostFaxesReceiveNotify (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<string> localVarResponse = PostFaxesReceiveNotifyWithHttpInfo(fonenumber, method, url, urlUsername, urlPassword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Configure the callback URL to notify when a fax is received. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL phone number.</param>
        /// <param name="method">Callback URL method.</param>
        /// <param name="url">Callback URL.</param>
        /// <param name="urlUsername">Callback URL username. (optional)</param>
        /// <param name="urlPassword">Callback URL password. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostFaxesReceiveNotifyWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling FaxesApi->PostFaxesReceiveNotify");
            // verify the required parameter 'method' is set
            if (method == null)
                throw new ApiException(400, "Missing required parameter 'method' when calling FaxesApi->PostFaxesReceiveNotify");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling FaxesApi->PostFaxesReceiveNotify");

            var localVarPath = "/faxes/receive_notify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (method != null) localVarFormParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFaxesReceiveNotify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Configure the callback URL to notify when a fax is received. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL phone number.</param>
        /// <param name="method">Callback URL method.</param>
        /// <param name="url">Callback URL.</param>
        /// <param name="urlUsername">Callback URL username. (optional)</param>
        /// <param name="urlPassword">Callback URL password. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostFaxesReceiveNotifyAsync (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<string> localVarResponse = await PostFaxesReceiveNotifyAsyncWithHttpInfo(fonenumber, method, url, urlUsername, urlPassword);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Configure the callback URL to notify when a fax is received. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL phone number.</param>
        /// <param name="method">Callback URL method.</param>
        /// <param name="url">Callback URL.</param>
        /// <param name="urlUsername">Callback URL username. (optional)</param>
        /// <param name="urlPassword">Callback URL password. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostFaxesReceiveNotifyAsyncWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling FaxesApi->PostFaxesReceiveNotify");
            // verify the required parameter 'method' is set
            if (method == null)
                throw new ApiException(400, "Missing required parameter 'method' when calling FaxesApi->PostFaxesReceiveNotify");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling FaxesApi->PostFaxesReceiveNotify");

            var localVarPath = "/faxes/receive_notify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (method != null) localVarFormParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFaxesReceiveNotify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Configure the callback URL to notify when a fax is made. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL phone number</param>
        /// <param name="method">Callback URL method.</param>
        /// <param name="url">Callback URL.</param>
        /// <param name="urlUsername">Callback URL username. (optional)</param>
        /// <param name="urlPassword">Callback URL password. (optional)</param>
        /// <returns>string</returns>
        public string PostFaxesSendNotify (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<string> localVarResponse = PostFaxesSendNotifyWithHttpInfo(fonenumber, method, url, urlUsername, urlPassword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Configure the callback URL to notify when a fax is made. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL phone number</param>
        /// <param name="method">Callback URL method.</param>
        /// <param name="url">Callback URL.</param>
        /// <param name="urlUsername">Callback URL username. (optional)</param>
        /// <param name="urlPassword">Callback URL password. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostFaxesSendNotifyWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling FaxesApi->PostFaxesSendNotify");
            // verify the required parameter 'method' is set
            if (method == null)
                throw new ApiException(400, "Missing required parameter 'method' when calling FaxesApi->PostFaxesSendNotify");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling FaxesApi->PostFaxesSendNotify");

            var localVarPath = "/faxes/send_notify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (method != null) localVarFormParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFaxesSendNotify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Configure the callback URL to notify when a fax is made. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL phone number</param>
        /// <param name="method">Callback URL method.</param>
        /// <param name="url">Callback URL.</param>
        /// <param name="urlUsername">Callback URL username. (optional)</param>
        /// <param name="urlPassword">Callback URL password. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostFaxesSendNotifyAsync (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<string> localVarResponse = await PostFaxesSendNotifyAsyncWithHttpInfo(fonenumber, method, url, urlUsername, urlPassword);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Configure the callback URL to notify when a fax is made. Returns a JSON response
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL phone number</param>
        /// <param name="method">Callback URL method.</param>
        /// <param name="url">Callback URL.</param>
        /// <param name="urlUsername">Callback URL username. (optional)</param>
        /// <param name="urlPassword">Callback URL password. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostFaxesSendNotifyAsyncWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling FaxesApi->PostFaxesSendNotify");
            // verify the required parameter 'method' is set
            if (method == null)
                throw new ApiException(400, "Missing required parameter 'method' when calling FaxesApi->PostFaxesSendNotify");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling FaxesApi->PostFaxesSendNotify");

            var localVarPath = "/faxes/send_notify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (method != null) localVarFormParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFaxesSendNotify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
