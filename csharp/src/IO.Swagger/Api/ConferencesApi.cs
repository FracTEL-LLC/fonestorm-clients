/* 
 * FoneStorm API 2.4.0 (Thunder)
 *
 * FracTEL's Middleware API
 *
 * OpenAPI spec version: 2.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConferencesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Conference
        /// </summary>
        /// <remarks>
        /// Create a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Label of conference</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>InlineResponse2013</returns>
        InlineResponse2013 CreateConference (string label, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null);

        /// <summary>
        /// Create Conference
        /// </summary>
        /// <remarks>
        /// Create a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Label of conference</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        ApiResponse<InlineResponse2013> CreateConferenceWithHttpInfo (string label, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null);
        /// <summary>
        /// Create Conference
        /// </summary>
        /// <remarks>
        /// Create a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Label of conference</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>InlineResponse2013</returns>
        InlineResponse2013 CreateConference_0 (string label, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null);

        /// <summary>
        /// Create Conference
        /// </summary>
        /// <remarks>
        /// Create a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Label of conference</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        ApiResponse<InlineResponse2013> CreateConference_0WithHttpInfo (string label, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null);
        /// <summary>
        /// Delete Conference
        /// </summary>
        /// <remarks>
        /// Delete a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>InlineResponse2013</returns>
        InlineResponse2013 DeleteConference (string id);

        /// <summary>
        /// Delete Conference
        /// </summary>
        /// <remarks>
        /// Delete a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        ApiResponse<InlineResponse2013> DeleteConferenceWithHttpInfo (string id);
        /// <summary>
        /// Delete Conference
        /// </summary>
        /// <remarks>
        /// Delete a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>InlineResponse2013</returns>
        InlineResponse2013 DeleteConference_0 (string id);

        /// <summary>
        /// Delete Conference
        /// </summary>
        /// <remarks>
        /// Delete a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        ApiResponse<InlineResponse2013> DeleteConference_0WithHttpInfo (string id);
        /// <summary>
        /// Get Conference
        /// </summary>
        /// <remarks>
        /// Get information about a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>InlineResponse2013</returns>
        InlineResponse2013 GetConference (string id);

        /// <summary>
        /// Get Conference
        /// </summary>
        /// <remarks>
        /// Get information about a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        ApiResponse<InlineResponse2013> GetConferenceWithHttpInfo (string id);
        /// <summary>
        /// Conference Fonenumbers
        /// </summary>
        /// <remarks>
        /// Get fonenumbers assigned to a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 GetConferenceFonenumbers (string id);

        /// <summary>
        /// Conference Fonenumbers
        /// </summary>
        /// <remarks>
        /// Get fonenumbers assigned to a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> GetConferenceFonenumbersWithHttpInfo (string id);
        /// <summary>
        /// Conference Fonenumbers
        /// </summary>
        /// <remarks>
        /// Get fonenumbers assigned to a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 GetConferenceFonenumbers_0 (string id);

        /// <summary>
        /// Conference Fonenumbers
        /// </summary>
        /// <remarks>
        /// Get fonenumbers assigned to a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> GetConferenceFonenumbers_0WithHttpInfo (string id);
        /// <summary>
        /// Get Conference
        /// </summary>
        /// <remarks>
        /// Get information about a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>InlineResponse2013</returns>
        InlineResponse2013 GetConference_0 (string id);

        /// <summary>
        /// Get Conference
        /// </summary>
        /// <remarks>
        /// Get information about a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        ApiResponse<InlineResponse2013> GetConference_0WithHttpInfo (string id);
        /// <summary>
        /// Get Conferences
        /// </summary>
        /// <remarks>
        /// Get a list of all conferences.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 GetConferences ();

        /// <summary>
        /// Get Conferences
        /// </summary>
        /// <remarks>
        /// Get a list of all conferences.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> GetConferencesWithHttpInfo ();
        /// <summary>
        /// Get Conferences
        /// </summary>
        /// <remarks>
        /// Get a list of all conferences.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 GetConferences_0 ();

        /// <summary>
        /// Get Conferences
        /// </summary>
        /// <remarks>
        /// Get a list of all conferences.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> GetConferences_0WithHttpInfo ();
        /// <summary>
        /// Update Conference
        /// </summary>
        /// <remarks>
        /// Update a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <param name="label">Label of conference (optional)</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>InlineResponse2013</returns>
        InlineResponse2013 UpdateConference (string id, string label = null, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null);

        /// <summary>
        /// Update Conference
        /// </summary>
        /// <remarks>
        /// Update a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <param name="label">Label of conference (optional)</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        ApiResponse<InlineResponse2013> UpdateConferenceWithHttpInfo (string id, string label = null, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null);
        /// <summary>
        /// Update Conference
        /// </summary>
        /// <remarks>
        /// Update a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <param name="label">Label of conference (optional)</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>InlineResponse2013</returns>
        InlineResponse2013 UpdateConference_0 (string id, string label = null, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null);

        /// <summary>
        /// Update Conference
        /// </summary>
        /// <remarks>
        /// Update a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <param name="label">Label of conference (optional)</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        ApiResponse<InlineResponse2013> UpdateConference_0WithHttpInfo (string id, string label = null, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Conference
        /// </summary>
        /// <remarks>
        /// Create a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Label of conference</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>Task of InlineResponse2013</returns>
        System.Threading.Tasks.Task<InlineResponse2013> CreateConferenceAsync (string label, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null);

        /// <summary>
        /// Create Conference
        /// </summary>
        /// <remarks>
        /// Create a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Label of conference</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> CreateConferenceAsyncWithHttpInfo (string label, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null);
        /// <summary>
        /// Create Conference
        /// </summary>
        /// <remarks>
        /// Create a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Label of conference</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>Task of InlineResponse2013</returns>
        System.Threading.Tasks.Task<InlineResponse2013> CreateConference_0Async (string label, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null);

        /// <summary>
        /// Create Conference
        /// </summary>
        /// <remarks>
        /// Create a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Label of conference</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> CreateConference_0AsyncWithHttpInfo (string label, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null);
        /// <summary>
        /// Delete Conference
        /// </summary>
        /// <remarks>
        /// Delete a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>Task of InlineResponse2013</returns>
        System.Threading.Tasks.Task<InlineResponse2013> DeleteConferenceAsync (string id);

        /// <summary>
        /// Delete Conference
        /// </summary>
        /// <remarks>
        /// Delete a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> DeleteConferenceAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete Conference
        /// </summary>
        /// <remarks>
        /// Delete a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>Task of InlineResponse2013</returns>
        System.Threading.Tasks.Task<InlineResponse2013> DeleteConference_0Async (string id);

        /// <summary>
        /// Delete Conference
        /// </summary>
        /// <remarks>
        /// Delete a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> DeleteConference_0AsyncWithHttpInfo (string id);
        /// <summary>
        /// Get Conference
        /// </summary>
        /// <remarks>
        /// Get information about a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>Task of InlineResponse2013</returns>
        System.Threading.Tasks.Task<InlineResponse2013> GetConferenceAsync (string id);

        /// <summary>
        /// Get Conference
        /// </summary>
        /// <remarks>
        /// Get information about a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> GetConferenceAsyncWithHttpInfo (string id);
        /// <summary>
        /// Conference Fonenumbers
        /// </summary>
        /// <remarks>
        /// Get fonenumbers assigned to a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> GetConferenceFonenumbersAsync (string id);

        /// <summary>
        /// Conference Fonenumbers
        /// </summary>
        /// <remarks>
        /// Get fonenumbers assigned to a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetConferenceFonenumbersAsyncWithHttpInfo (string id);
        /// <summary>
        /// Conference Fonenumbers
        /// </summary>
        /// <remarks>
        /// Get fonenumbers assigned to a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> GetConferenceFonenumbers_0Async (string id);

        /// <summary>
        /// Conference Fonenumbers
        /// </summary>
        /// <remarks>
        /// Get fonenumbers assigned to a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetConferenceFonenumbers_0AsyncWithHttpInfo (string id);
        /// <summary>
        /// Get Conference
        /// </summary>
        /// <remarks>
        /// Get information about a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>Task of InlineResponse2013</returns>
        System.Threading.Tasks.Task<InlineResponse2013> GetConference_0Async (string id);

        /// <summary>
        /// Get Conference
        /// </summary>
        /// <remarks>
        /// Get information about a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> GetConference_0AsyncWithHttpInfo (string id);
        /// <summary>
        /// Get Conferences
        /// </summary>
        /// <remarks>
        /// Get a list of all conferences.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> GetConferencesAsync ();

        /// <summary>
        /// Get Conferences
        /// </summary>
        /// <remarks>
        /// Get a list of all conferences.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetConferencesAsyncWithHttpInfo ();
        /// <summary>
        /// Get Conferences
        /// </summary>
        /// <remarks>
        /// Get a list of all conferences.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> GetConferences_0Async ();

        /// <summary>
        /// Get Conferences
        /// </summary>
        /// <remarks>
        /// Get a list of all conferences.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetConferences_0AsyncWithHttpInfo ();
        /// <summary>
        /// Update Conference
        /// </summary>
        /// <remarks>
        /// Update a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <param name="label">Label of conference (optional)</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>Task of InlineResponse2013</returns>
        System.Threading.Tasks.Task<InlineResponse2013> UpdateConferenceAsync (string id, string label = null, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null);

        /// <summary>
        /// Update Conference
        /// </summary>
        /// <remarks>
        /// Update a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <param name="label">Label of conference (optional)</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> UpdateConferenceAsyncWithHttpInfo (string id, string label = null, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null);
        /// <summary>
        /// Update Conference
        /// </summary>
        /// <remarks>
        /// Update a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <param name="label">Label of conference (optional)</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>Task of InlineResponse2013</returns>
        System.Threading.Tasks.Task<InlineResponse2013> UpdateConference_0Async (string id, string label = null, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null);

        /// <summary>
        /// Update Conference
        /// </summary>
        /// <remarks>
        /// Update a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <param name="label">Label of conference (optional)</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> UpdateConference_0AsyncWithHttpInfo (string id, string label = null, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConferencesApi : IConferencesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConferencesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConferencesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConferencesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConferencesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Conference Create a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Label of conference</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>InlineResponse2013</returns>
        public InlineResponse2013 CreateConference (string label, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null)
        {
             ApiResponse<InlineResponse2013> localVarResponse = CreateConferenceWithHttpInfo(label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Conference Create a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Label of conference</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        public ApiResponse< InlineResponse2013 > CreateConferenceWithHttpInfo (string label, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null)
        {
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling ConferencesApi->CreateConference");

            var localVarPath = "/conferences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (label != null) localVarFormParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // form parameter
            if (startTime != null) localVarFormParams.Add("start_time", Configuration.ApiClient.ParameterToString(startTime)); // form parameter
            if (endTime != null) localVarFormParams.Add("end_time", Configuration.ApiClient.ParameterToString(endTime)); // form parameter
            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (beforeMessage != null) localVarFormParams.Add("before_message", Configuration.ApiClient.ParameterToString(beforeMessage)); // form parameter
            if (afterMessage != null) localVarFormParams.Add("after_message", Configuration.ApiClient.ParameterToString(afterMessage)); // form parameter
            if (maxMembers != null) localVarFormParams.Add("max_members", Configuration.ApiClient.ParameterToString(maxMembers)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Create Conference Create a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Label of conference</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>Task of InlineResponse2013</returns>
        public async System.Threading.Tasks.Task<InlineResponse2013> CreateConferenceAsync (string label, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null)
        {
             ApiResponse<InlineResponse2013> localVarResponse = await CreateConferenceAsyncWithHttpInfo(label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Conference Create a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Label of conference</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> CreateConferenceAsyncWithHttpInfo (string label, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null)
        {
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling ConferencesApi->CreateConference");

            var localVarPath = "/conferences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (label != null) localVarFormParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // form parameter
            if (startTime != null) localVarFormParams.Add("start_time", Configuration.ApiClient.ParameterToString(startTime)); // form parameter
            if (endTime != null) localVarFormParams.Add("end_time", Configuration.ApiClient.ParameterToString(endTime)); // form parameter
            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (beforeMessage != null) localVarFormParams.Add("before_message", Configuration.ApiClient.ParameterToString(beforeMessage)); // form parameter
            if (afterMessage != null) localVarFormParams.Add("after_message", Configuration.ApiClient.ParameterToString(afterMessage)); // form parameter
            if (maxMembers != null) localVarFormParams.Add("max_members", Configuration.ApiClient.ParameterToString(maxMembers)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Create Conference Create a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Label of conference</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>InlineResponse2013</returns>
        public InlineResponse2013 CreateConference_0 (string label, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null)
        {
             ApiResponse<InlineResponse2013> localVarResponse = CreateConference_0WithHttpInfo(label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Conference Create a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Label of conference</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        public ApiResponse< InlineResponse2013 > CreateConference_0WithHttpInfo (string label, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null)
        {
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling ConferencesApi->CreateConference_0");

            var localVarPath = "/conferences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (label != null) localVarFormParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // form parameter
            if (startTime != null) localVarFormParams.Add("start_time", Configuration.ApiClient.ParameterToString(startTime)); // form parameter
            if (endTime != null) localVarFormParams.Add("end_time", Configuration.ApiClient.ParameterToString(endTime)); // form parameter
            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (beforeMessage != null) localVarFormParams.Add("before_message", Configuration.ApiClient.ParameterToString(beforeMessage)); // form parameter
            if (afterMessage != null) localVarFormParams.Add("after_message", Configuration.ApiClient.ParameterToString(afterMessage)); // form parameter
            if (maxMembers != null) localVarFormParams.Add("max_members", Configuration.ApiClient.ParameterToString(maxMembers)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateConference_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Create Conference Create a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Label of conference</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>Task of InlineResponse2013</returns>
        public async System.Threading.Tasks.Task<InlineResponse2013> CreateConference_0Async (string label, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null)
        {
             ApiResponse<InlineResponse2013> localVarResponse = await CreateConference_0AsyncWithHttpInfo(label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Conference Create a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Label of conference</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> CreateConference_0AsyncWithHttpInfo (string label, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null)
        {
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling ConferencesApi->CreateConference_0");

            var localVarPath = "/conferences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (label != null) localVarFormParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // form parameter
            if (startTime != null) localVarFormParams.Add("start_time", Configuration.ApiClient.ParameterToString(startTime)); // form parameter
            if (endTime != null) localVarFormParams.Add("end_time", Configuration.ApiClient.ParameterToString(endTime)); // form parameter
            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (beforeMessage != null) localVarFormParams.Add("before_message", Configuration.ApiClient.ParameterToString(beforeMessage)); // form parameter
            if (afterMessage != null) localVarFormParams.Add("after_message", Configuration.ApiClient.ParameterToString(afterMessage)); // form parameter
            if (maxMembers != null) localVarFormParams.Add("max_members", Configuration.ApiClient.ParameterToString(maxMembers)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateConference_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Delete Conference Delete a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>InlineResponse2013</returns>
        public InlineResponse2013 DeleteConference (string id)
        {
             ApiResponse<InlineResponse2013> localVarResponse = DeleteConferenceWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Conference Delete a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        public ApiResponse< InlineResponse2013 > DeleteConferenceWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConferencesApi->DeleteConference");

            var localVarPath = "/conferences/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Delete Conference Delete a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>Task of InlineResponse2013</returns>
        public async System.Threading.Tasks.Task<InlineResponse2013> DeleteConferenceAsync (string id)
        {
             ApiResponse<InlineResponse2013> localVarResponse = await DeleteConferenceAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Conference Delete a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> DeleteConferenceAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConferencesApi->DeleteConference");

            var localVarPath = "/conferences/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Delete Conference Delete a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>InlineResponse2013</returns>
        public InlineResponse2013 DeleteConference_0 (string id)
        {
             ApiResponse<InlineResponse2013> localVarResponse = DeleteConference_0WithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Conference Delete a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        public ApiResponse< InlineResponse2013 > DeleteConference_0WithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConferencesApi->DeleteConference_0");

            var localVarPath = "/conferences/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteConference_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Delete Conference Delete a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>Task of InlineResponse2013</returns>
        public async System.Threading.Tasks.Task<InlineResponse2013> DeleteConference_0Async (string id)
        {
             ApiResponse<InlineResponse2013> localVarResponse = await DeleteConference_0AsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Conference Delete a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> DeleteConference_0AsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConferencesApi->DeleteConference_0");

            var localVarPath = "/conferences/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteConference_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Get Conference Get information about a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>InlineResponse2013</returns>
        public InlineResponse2013 GetConference (string id)
        {
             ApiResponse<InlineResponse2013> localVarResponse = GetConferenceWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Conference Get information about a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        public ApiResponse< InlineResponse2013 > GetConferenceWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConferencesApi->GetConference");

            var localVarPath = "/conferences/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Get Conference Get information about a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>Task of InlineResponse2013</returns>
        public async System.Threading.Tasks.Task<InlineResponse2013> GetConferenceAsync (string id)
        {
             ApiResponse<InlineResponse2013> localVarResponse = await GetConferenceAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Conference Get information about a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> GetConferenceAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConferencesApi->GetConference");

            var localVarPath = "/conferences/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Conference Fonenumbers Get fonenumbers assigned to a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 GetConferenceFonenumbers (string id)
        {
             ApiResponse<InlineResponse2002> localVarResponse = GetConferenceFonenumbersWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Conference Fonenumbers Get fonenumbers assigned to a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > GetConferenceFonenumbersWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConferencesApi->GetConferenceFonenumbers");

            var localVarPath = "/conferences/{id}/fonenumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConferenceFonenumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Conference Fonenumbers Get fonenumbers assigned to a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> GetConferenceFonenumbersAsync (string id)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await GetConferenceFonenumbersAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Conference Fonenumbers Get fonenumbers assigned to a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetConferenceFonenumbersAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConferencesApi->GetConferenceFonenumbers");

            var localVarPath = "/conferences/{id}/fonenumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConferenceFonenumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Conference Fonenumbers Get fonenumbers assigned to a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 GetConferenceFonenumbers_0 (string id)
        {
             ApiResponse<InlineResponse2002> localVarResponse = GetConferenceFonenumbers_0WithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Conference Fonenumbers Get fonenumbers assigned to a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > GetConferenceFonenumbers_0WithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConferencesApi->GetConferenceFonenumbers_0");

            var localVarPath = "/conferences/{id}/fonenumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConferenceFonenumbers_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Conference Fonenumbers Get fonenumbers assigned to a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> GetConferenceFonenumbers_0Async (string id)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await GetConferenceFonenumbers_0AsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Conference Fonenumbers Get fonenumbers assigned to a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetConferenceFonenumbers_0AsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConferencesApi->GetConferenceFonenumbers_0");

            var localVarPath = "/conferences/{id}/fonenumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConferenceFonenumbers_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Get Conference Get information about a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>InlineResponse2013</returns>
        public InlineResponse2013 GetConference_0 (string id)
        {
             ApiResponse<InlineResponse2013> localVarResponse = GetConference_0WithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Conference Get information about a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        public ApiResponse< InlineResponse2013 > GetConference_0WithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConferencesApi->GetConference_0");

            var localVarPath = "/conferences/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConference_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Get Conference Get information about a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>Task of InlineResponse2013</returns>
        public async System.Threading.Tasks.Task<InlineResponse2013> GetConference_0Async (string id)
        {
             ApiResponse<InlineResponse2013> localVarResponse = await GetConference_0AsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Conference Get information about a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> GetConference_0AsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConferencesApi->GetConference_0");

            var localVarPath = "/conferences/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConference_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Get Conferences Get a list of all conferences.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 GetConferences ()
        {
             ApiResponse<InlineResponse200> localVarResponse = GetConferencesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Conferences Get a list of all conferences.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > GetConferencesWithHttpInfo ()
        {

            var localVarPath = "/conferences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Get Conferences Get a list of all conferences.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> GetConferencesAsync ()
        {
             ApiResponse<InlineResponse200> localVarResponse = await GetConferencesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Conferences Get a list of all conferences.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetConferencesAsyncWithHttpInfo ()
        {

            var localVarPath = "/conferences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Get Conferences Get a list of all conferences.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 GetConferences_0 ()
        {
             ApiResponse<InlineResponse200> localVarResponse = GetConferences_0WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Conferences Get a list of all conferences.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > GetConferences_0WithHttpInfo ()
        {

            var localVarPath = "/conferences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConferences_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Get Conferences Get a list of all conferences.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> GetConferences_0Async ()
        {
             ApiResponse<InlineResponse200> localVarResponse = await GetConferences_0AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Conferences Get a list of all conferences.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetConferences_0AsyncWithHttpInfo ()
        {

            var localVarPath = "/conferences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConferences_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Update Conference Update a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <param name="label">Label of conference (optional)</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>InlineResponse2013</returns>
        public InlineResponse2013 UpdateConference (string id, string label = null, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null)
        {
             ApiResponse<InlineResponse2013> localVarResponse = UpdateConferenceWithHttpInfo(id, label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Conference Update a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <param name="label">Label of conference (optional)</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        public ApiResponse< InlineResponse2013 > UpdateConferenceWithHttpInfo (string id, string label = null, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConferencesApi->UpdateConference");

            var localVarPath = "/conferences/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (label != null) localVarFormParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // form parameter
            if (startTime != null) localVarFormParams.Add("start_time", Configuration.ApiClient.ParameterToString(startTime)); // form parameter
            if (endTime != null) localVarFormParams.Add("end_time", Configuration.ApiClient.ParameterToString(endTime)); // form parameter
            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (beforeMessage != null) localVarFormParams.Add("before_message", Configuration.ApiClient.ParameterToString(beforeMessage)); // form parameter
            if (afterMessage != null) localVarFormParams.Add("after_message", Configuration.ApiClient.ParameterToString(afterMessage)); // form parameter
            if (maxMembers != null) localVarFormParams.Add("max_members", Configuration.ApiClient.ParameterToString(maxMembers)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Update Conference Update a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <param name="label">Label of conference (optional)</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>Task of InlineResponse2013</returns>
        public async System.Threading.Tasks.Task<InlineResponse2013> UpdateConferenceAsync (string id, string label = null, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null)
        {
             ApiResponse<InlineResponse2013> localVarResponse = await UpdateConferenceAsyncWithHttpInfo(id, label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Conference Update a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <param name="label">Label of conference (optional)</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> UpdateConferenceAsyncWithHttpInfo (string id, string label = null, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConferencesApi->UpdateConference");

            var localVarPath = "/conferences/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (label != null) localVarFormParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // form parameter
            if (startTime != null) localVarFormParams.Add("start_time", Configuration.ApiClient.ParameterToString(startTime)); // form parameter
            if (endTime != null) localVarFormParams.Add("end_time", Configuration.ApiClient.ParameterToString(endTime)); // form parameter
            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (beforeMessage != null) localVarFormParams.Add("before_message", Configuration.ApiClient.ParameterToString(beforeMessage)); // form parameter
            if (afterMessage != null) localVarFormParams.Add("after_message", Configuration.ApiClient.ParameterToString(afterMessage)); // form parameter
            if (maxMembers != null) localVarFormParams.Add("max_members", Configuration.ApiClient.ParameterToString(maxMembers)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Update Conference Update a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <param name="label">Label of conference (optional)</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>InlineResponse2013</returns>
        public InlineResponse2013 UpdateConference_0 (string id, string label = null, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null)
        {
             ApiResponse<InlineResponse2013> localVarResponse = UpdateConference_0WithHttpInfo(id, label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Conference Update a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <param name="label">Label of conference (optional)</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        public ApiResponse< InlineResponse2013 > UpdateConference_0WithHttpInfo (string id, string label = null, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConferencesApi->UpdateConference_0");

            var localVarPath = "/conferences/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (label != null) localVarFormParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // form parameter
            if (startTime != null) localVarFormParams.Add("start_time", Configuration.ApiClient.ParameterToString(startTime)); // form parameter
            if (endTime != null) localVarFormParams.Add("end_time", Configuration.ApiClient.ParameterToString(endTime)); // form parameter
            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (beforeMessage != null) localVarFormParams.Add("before_message", Configuration.ApiClient.ParameterToString(beforeMessage)); // form parameter
            if (afterMessage != null) localVarFormParams.Add("after_message", Configuration.ApiClient.ParameterToString(afterMessage)); // form parameter
            if (maxMembers != null) localVarFormParams.Add("max_members", Configuration.ApiClient.ParameterToString(maxMembers)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateConference_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Update Conference Update a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <param name="label">Label of conference (optional)</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>Task of InlineResponse2013</returns>
        public async System.Threading.Tasks.Task<InlineResponse2013> UpdateConference_0Async (string id, string label = null, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null)
        {
             ApiResponse<InlineResponse2013> localVarResponse = await UpdateConference_0AsyncWithHttpInfo(id, label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Conference Update a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Conference id</param>
        /// <param name="label">Label of conference (optional)</param>
        /// <param name="startTime">Start time and date of conference (optional)</param>
        /// <param name="endTime">End time and date of conference (optional)</param>
        /// <param name="fonenumber">Fonenumber to use for conference (optional)</param>
        /// <param name="beforeMessage">Message to play before conference start time (optional)</param>
        /// <param name="afterMessage">Message to play after conference end time (optional)</param>
        /// <param name="maxMembers">Maximum number of allowed conference attendees (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> UpdateConference_0AsyncWithHttpInfo (string id, string label = null, DateTime? startTime = null, DateTime? endTime = null, BigDecimal fonenumber = null, string beforeMessage = null, string afterMessage = null, decimal? maxMembers = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConferencesApi->UpdateConference_0");

            var localVarPath = "/conferences/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (label != null) localVarFormParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // form parameter
            if (startTime != null) localVarFormParams.Add("start_time", Configuration.ApiClient.ParameterToString(startTime)); // form parameter
            if (endTime != null) localVarFormParams.Add("end_time", Configuration.ApiClient.ParameterToString(endTime)); // form parameter
            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (beforeMessage != null) localVarFormParams.Add("before_message", Configuration.ApiClient.ParameterToString(beforeMessage)); // form parameter
            if (afterMessage != null) localVarFormParams.Add("after_message", Configuration.ApiClient.ParameterToString(afterMessage)); // form parameter
            if (maxMembers != null) localVarFormParams.Add("max_members", Configuration.ApiClient.ParameterToString(maxMembers)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateConference_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

    }
}
