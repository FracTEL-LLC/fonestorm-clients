/* 
 * FoneStorm API 2.2.0 (Breeze)
 *
 * FracTEL's Middleware API
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Set Delivery Service
        /// </summary>
        /// <remarks>
        /// Configure the delivery service type used as the destination for messages received at a FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="type">Message routing type</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method (when &#x60;type&#x60; is URL)</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>InlineResponse2013</returns>
        InlineResponse2013 ConfigureMessageReceive (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Set Delivery Service
        /// </summary>
        /// <remarks>
        /// Configure the delivery service type used as the destination for messages received at a FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="type">Message routing type</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method (when &#x60;type&#x60; is URL)</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        ApiResponse<InlineResponse2013> ConfigureMessageReceiveWithHttpInfo (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null);
        /// <summary>
        /// Set Receive Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a message is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>InlineResponse2013</returns>
        InlineResponse2013 ConfigureMessageReceiveNotify (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Set Receive Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a message is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        ApiResponse<InlineResponse2013> ConfigureMessageReceiveNotifyWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);
        /// <summary>
        /// Set Receive Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a message is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>InlineResponse2013</returns>
        InlineResponse2013 ConfigureMessageReceiveNotify_0 (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Set Receive Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a message is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        ApiResponse<InlineResponse2013> ConfigureMessageReceiveNotify_0WithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);
        /// <summary>
        /// Set Delivery Service
        /// </summary>
        /// <remarks>
        /// Configure the delivery service type used as the destination for messages received at a FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="type">Message routing type</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method (when &#x60;type&#x60; is URL)</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>InlineResponse2013</returns>
        InlineResponse2013 ConfigureMessageReceive_0 (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Set Delivery Service
        /// </summary>
        /// <remarks>
        /// Configure the delivery service type used as the destination for messages received at a FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="type">Message routing type</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method (when &#x60;type&#x60; is URL)</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        ApiResponse<InlineResponse2013> ConfigureMessageReceive_0WithHttpInfo (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null);
        /// <summary>
        /// Set Send Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a message is sent. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>InlineResponse2013</returns>
        InlineResponse2013 ConfigureMessageSendNotify (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Set Send Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a message is sent. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        ApiResponse<InlineResponse2013> ConfigureMessageSendNotifyWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);
        /// <summary>
        /// Set Send Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a message is sent. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>InlineResponse2013</returns>
        InlineResponse2013 ConfigureMessageSendNotify_0 (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Set Send Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a message is sent. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        ApiResponse<InlineResponse2013> ConfigureMessageSendNotify_0WithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);
        /// <summary>
        /// Create Message
        /// </summary>
        /// <remarks>
        /// Send an SMS or MMS message.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="message">Message body</param>
        /// <param name="mediaUrl">URL for MMS media (up to 10) (optional)</param>
        /// <param name="confirmationUrl">Callback URL for confirmation (optional)</param>
        /// <param name="confirmationUrlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="confirmationUrlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="requireConfirmation">Only send this message if confirmation is available (optional)</param>
        /// <returns>InlineResponse2014</returns>
        InlineResponse2014 CreateMessage (string to, string fonenumber, string message, List<string> mediaUrl = null, string confirmationUrl = null, string confirmationUrlUsername = null, string confirmationUrlPassword = null, bool? requireConfirmation = null);

        /// <summary>
        /// Create Message
        /// </summary>
        /// <remarks>
        /// Send an SMS or MMS message.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="message">Message body</param>
        /// <param name="mediaUrl">URL for MMS media (up to 10) (optional)</param>
        /// <param name="confirmationUrl">Callback URL for confirmation (optional)</param>
        /// <param name="confirmationUrlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="confirmationUrlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="requireConfirmation">Only send this message if confirmation is available (optional)</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        ApiResponse<InlineResponse2014> CreateMessageWithHttpInfo (string to, string fonenumber, string message, List<string> mediaUrl = null, string confirmationUrl = null, string confirmationUrlUsername = null, string confirmationUrlPassword = null, bool? requireConfirmation = null);
        /// <summary>
        /// Create Message
        /// </summary>
        /// <remarks>
        /// Send an SMS or MMS message.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="message">Message body</param>
        /// <param name="mediaUrl">URL for MMS media (up to 10) (optional)</param>
        /// <param name="confirmationUrl">Callback URL for confirmation (optional)</param>
        /// <param name="confirmationUrlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="confirmationUrlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="requireConfirmation">Only send this message if confirmation is available (optional)</param>
        /// <returns>InlineResponse2014</returns>
        InlineResponse2014 CreateMessage_0 (string to, string fonenumber, string message, List<string> mediaUrl = null, string confirmationUrl = null, string confirmationUrlUsername = null, string confirmationUrlPassword = null, bool? requireConfirmation = null);

        /// <summary>
        /// Create Message
        /// </summary>
        /// <remarks>
        /// Send an SMS or MMS message.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="message">Message body</param>
        /// <param name="mediaUrl">URL for MMS media (up to 10) (optional)</param>
        /// <param name="confirmationUrl">Callback URL for confirmation (optional)</param>
        /// <param name="confirmationUrlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="confirmationUrlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="requireConfirmation">Only send this message if confirmation is available (optional)</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        ApiResponse<InlineResponse2014> CreateMessage_0WithHttpInfo (string to, string fonenumber, string message, List<string> mediaUrl = null, string confirmationUrl = null, string confirmationUrlUsername = null, string confirmationUrlPassword = null, bool? requireConfirmation = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Set Delivery Service
        /// </summary>
        /// <remarks>
        /// Configure the delivery service type used as the destination for messages received at a FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="type">Message routing type</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method (when &#x60;type&#x60; is URL)</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of InlineResponse2013</returns>
        System.Threading.Tasks.Task<InlineResponse2013> ConfigureMessageReceiveAsync (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Set Delivery Service
        /// </summary>
        /// <remarks>
        /// Configure the delivery service type used as the destination for messages received at a FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="type">Message routing type</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method (when &#x60;type&#x60; is URL)</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> ConfigureMessageReceiveAsyncWithHttpInfo (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null);
        /// <summary>
        /// Set Receive Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a message is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of InlineResponse2013</returns>
        System.Threading.Tasks.Task<InlineResponse2013> ConfigureMessageReceiveNotifyAsync (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Set Receive Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a message is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> ConfigureMessageReceiveNotifyAsyncWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);
        /// <summary>
        /// Set Receive Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a message is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of InlineResponse2013</returns>
        System.Threading.Tasks.Task<InlineResponse2013> ConfigureMessageReceiveNotify_0Async (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Set Receive Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a message is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> ConfigureMessageReceiveNotify_0AsyncWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);
        /// <summary>
        /// Set Delivery Service
        /// </summary>
        /// <remarks>
        /// Configure the delivery service type used as the destination for messages received at a FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="type">Message routing type</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method (when &#x60;type&#x60; is URL)</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of InlineResponse2013</returns>
        System.Threading.Tasks.Task<InlineResponse2013> ConfigureMessageReceive_0Async (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Set Delivery Service
        /// </summary>
        /// <remarks>
        /// Configure the delivery service type used as the destination for messages received at a FoneNumber.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="type">Message routing type</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method (when &#x60;type&#x60; is URL)</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> ConfigureMessageReceive_0AsyncWithHttpInfo (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null);
        /// <summary>
        /// Set Send Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a message is sent. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of InlineResponse2013</returns>
        System.Threading.Tasks.Task<InlineResponse2013> ConfigureMessageSendNotifyAsync (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Set Send Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a message is sent. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> ConfigureMessageSendNotifyAsyncWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);
        /// <summary>
        /// Set Send Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a message is sent. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of InlineResponse2013</returns>
        System.Threading.Tasks.Task<InlineResponse2013> ConfigureMessageSendNotify_0Async (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);

        /// <summary>
        /// Set Send Callback
        /// </summary>
        /// <remarks>
        /// Configure the callback URL to notify when a message is sent. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> ConfigureMessageSendNotify_0AsyncWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null);
        /// <summary>
        /// Create Message
        /// </summary>
        /// <remarks>
        /// Send an SMS or MMS message.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="message">Message body</param>
        /// <param name="mediaUrl">URL for MMS media (up to 10) (optional)</param>
        /// <param name="confirmationUrl">Callback URL for confirmation (optional)</param>
        /// <param name="confirmationUrlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="confirmationUrlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="requireConfirmation">Only send this message if confirmation is available (optional)</param>
        /// <returns>Task of InlineResponse2014</returns>
        System.Threading.Tasks.Task<InlineResponse2014> CreateMessageAsync (string to, string fonenumber, string message, List<string> mediaUrl = null, string confirmationUrl = null, string confirmationUrlUsername = null, string confirmationUrlPassword = null, bool? requireConfirmation = null);

        /// <summary>
        /// Create Message
        /// </summary>
        /// <remarks>
        /// Send an SMS or MMS message.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="message">Message body</param>
        /// <param name="mediaUrl">URL for MMS media (up to 10) (optional)</param>
        /// <param name="confirmationUrl">Callback URL for confirmation (optional)</param>
        /// <param name="confirmationUrlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="confirmationUrlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="requireConfirmation">Only send this message if confirmation is available (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> CreateMessageAsyncWithHttpInfo (string to, string fonenumber, string message, List<string> mediaUrl = null, string confirmationUrl = null, string confirmationUrlUsername = null, string confirmationUrlPassword = null, bool? requireConfirmation = null);
        /// <summary>
        /// Create Message
        /// </summary>
        /// <remarks>
        /// Send an SMS or MMS message.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="message">Message body</param>
        /// <param name="mediaUrl">URL for MMS media (up to 10) (optional)</param>
        /// <param name="confirmationUrl">Callback URL for confirmation (optional)</param>
        /// <param name="confirmationUrlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="confirmationUrlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="requireConfirmation">Only send this message if confirmation is available (optional)</param>
        /// <returns>Task of InlineResponse2014</returns>
        System.Threading.Tasks.Task<InlineResponse2014> CreateMessage_0Async (string to, string fonenumber, string message, List<string> mediaUrl = null, string confirmationUrl = null, string confirmationUrlUsername = null, string confirmationUrlPassword = null, bool? requireConfirmation = null);

        /// <summary>
        /// Create Message
        /// </summary>
        /// <remarks>
        /// Send an SMS or MMS message.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="message">Message body</param>
        /// <param name="mediaUrl">URL for MMS media (up to 10) (optional)</param>
        /// <param name="confirmationUrl">Callback URL for confirmation (optional)</param>
        /// <param name="confirmationUrlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="confirmationUrlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="requireConfirmation">Only send this message if confirmation is available (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> CreateMessage_0AsyncWithHttpInfo (string to, string fonenumber, string message, List<string> mediaUrl = null, string confirmationUrl = null, string confirmationUrlUsername = null, string confirmationUrlPassword = null, bool? requireConfirmation = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MessagesApi : IMessagesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MessagesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MessagesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Set Delivery Service Configure the delivery service type used as the destination for messages received at a FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="type">Message routing type</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method (when &#x60;type&#x60; is URL)</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>InlineResponse2013</returns>
        public InlineResponse2013 ConfigureMessageReceive (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<InlineResponse2013> localVarResponse = ConfigureMessageReceiveWithHttpInfo(fonenumber, type, value, urlMethod, urlUsername, urlPassword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set Delivery Service Configure the delivery service type used as the destination for messages received at a FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="type">Message routing type</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method (when &#x60;type&#x60; is URL)</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        public ApiResponse< InlineResponse2013 > ConfigureMessageReceiveWithHttpInfo (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling MessagesApi->ConfigureMessageReceive");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling MessagesApi->ConfigureMessageReceive");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling MessagesApi->ConfigureMessageReceive");
            // verify the required parameter 'urlMethod' is set
            if (urlMethod == null)
                throw new ApiException(400, "Missing required parameter 'urlMethod' when calling MessagesApi->ConfigureMessageReceive");

            var localVarPath = "/messages/receive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (type != null) localVarFormParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (value != null) localVarFormParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // form parameter
            if (urlMethod != null) localVarFormParams.Add("url_method", Configuration.ApiClient.ParameterToString(urlMethod)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureMessageReceive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Set Delivery Service Configure the delivery service type used as the destination for messages received at a FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="type">Message routing type</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method (when &#x60;type&#x60; is URL)</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of InlineResponse2013</returns>
        public async System.Threading.Tasks.Task<InlineResponse2013> ConfigureMessageReceiveAsync (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<InlineResponse2013> localVarResponse = await ConfigureMessageReceiveAsyncWithHttpInfo(fonenumber, type, value, urlMethod, urlUsername, urlPassword);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set Delivery Service Configure the delivery service type used as the destination for messages received at a FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="type">Message routing type</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method (when &#x60;type&#x60; is URL)</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> ConfigureMessageReceiveAsyncWithHttpInfo (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling MessagesApi->ConfigureMessageReceive");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling MessagesApi->ConfigureMessageReceive");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling MessagesApi->ConfigureMessageReceive");
            // verify the required parameter 'urlMethod' is set
            if (urlMethod == null)
                throw new ApiException(400, "Missing required parameter 'urlMethod' when calling MessagesApi->ConfigureMessageReceive");

            var localVarPath = "/messages/receive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (type != null) localVarFormParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (value != null) localVarFormParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // form parameter
            if (urlMethod != null) localVarFormParams.Add("url_method", Configuration.ApiClient.ParameterToString(urlMethod)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureMessageReceive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Set Receive Callback Configure the callback URL to notify when a message is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>InlineResponse2013</returns>
        public InlineResponse2013 ConfigureMessageReceiveNotify (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<InlineResponse2013> localVarResponse = ConfigureMessageReceiveNotifyWithHttpInfo(fonenumber, method, url, urlUsername, urlPassword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set Receive Callback Configure the callback URL to notify when a message is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        public ApiResponse< InlineResponse2013 > ConfigureMessageReceiveNotifyWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling MessagesApi->ConfigureMessageReceiveNotify");
            // verify the required parameter 'method' is set
            if (method == null)
                throw new ApiException(400, "Missing required parameter 'method' when calling MessagesApi->ConfigureMessageReceiveNotify");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling MessagesApi->ConfigureMessageReceiveNotify");

            var localVarPath = "/messages/receive_notify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (method != null) localVarFormParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureMessageReceiveNotify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Set Receive Callback Configure the callback URL to notify when a message is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of InlineResponse2013</returns>
        public async System.Threading.Tasks.Task<InlineResponse2013> ConfigureMessageReceiveNotifyAsync (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<InlineResponse2013> localVarResponse = await ConfigureMessageReceiveNotifyAsyncWithHttpInfo(fonenumber, method, url, urlUsername, urlPassword);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set Receive Callback Configure the callback URL to notify when a message is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> ConfigureMessageReceiveNotifyAsyncWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling MessagesApi->ConfigureMessageReceiveNotify");
            // verify the required parameter 'method' is set
            if (method == null)
                throw new ApiException(400, "Missing required parameter 'method' when calling MessagesApi->ConfigureMessageReceiveNotify");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling MessagesApi->ConfigureMessageReceiveNotify");

            var localVarPath = "/messages/receive_notify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (method != null) localVarFormParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureMessageReceiveNotify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Set Receive Callback Configure the callback URL to notify when a message is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>InlineResponse2013</returns>
        public InlineResponse2013 ConfigureMessageReceiveNotify_0 (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<InlineResponse2013> localVarResponse = ConfigureMessageReceiveNotify_0WithHttpInfo(fonenumber, method, url, urlUsername, urlPassword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set Receive Callback Configure the callback URL to notify when a message is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        public ApiResponse< InlineResponse2013 > ConfigureMessageReceiveNotify_0WithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling MessagesApi->ConfigureMessageReceiveNotify_0");
            // verify the required parameter 'method' is set
            if (method == null)
                throw new ApiException(400, "Missing required parameter 'method' when calling MessagesApi->ConfigureMessageReceiveNotify_0");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling MessagesApi->ConfigureMessageReceiveNotify_0");

            var localVarPath = "/messages/receive_notify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (method != null) localVarFormParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureMessageReceiveNotify_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Set Receive Callback Configure the callback URL to notify when a message is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of InlineResponse2013</returns>
        public async System.Threading.Tasks.Task<InlineResponse2013> ConfigureMessageReceiveNotify_0Async (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<InlineResponse2013> localVarResponse = await ConfigureMessageReceiveNotify_0AsyncWithHttpInfo(fonenumber, method, url, urlUsername, urlPassword);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set Receive Callback Configure the callback URL to notify when a message is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> ConfigureMessageReceiveNotify_0AsyncWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling MessagesApi->ConfigureMessageReceiveNotify_0");
            // verify the required parameter 'method' is set
            if (method == null)
                throw new ApiException(400, "Missing required parameter 'method' when calling MessagesApi->ConfigureMessageReceiveNotify_0");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling MessagesApi->ConfigureMessageReceiveNotify_0");

            var localVarPath = "/messages/receive_notify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (method != null) localVarFormParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureMessageReceiveNotify_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Set Delivery Service Configure the delivery service type used as the destination for messages received at a FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="type">Message routing type</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method (when &#x60;type&#x60; is URL)</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>InlineResponse2013</returns>
        public InlineResponse2013 ConfigureMessageReceive_0 (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<InlineResponse2013> localVarResponse = ConfigureMessageReceive_0WithHttpInfo(fonenumber, type, value, urlMethod, urlUsername, urlPassword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set Delivery Service Configure the delivery service type used as the destination for messages received at a FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="type">Message routing type</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method (when &#x60;type&#x60; is URL)</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        public ApiResponse< InlineResponse2013 > ConfigureMessageReceive_0WithHttpInfo (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling MessagesApi->ConfigureMessageReceive_0");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling MessagesApi->ConfigureMessageReceive_0");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling MessagesApi->ConfigureMessageReceive_0");
            // verify the required parameter 'urlMethod' is set
            if (urlMethod == null)
                throw new ApiException(400, "Missing required parameter 'urlMethod' when calling MessagesApi->ConfigureMessageReceive_0");

            var localVarPath = "/messages/receive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (type != null) localVarFormParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (value != null) localVarFormParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // form parameter
            if (urlMethod != null) localVarFormParams.Add("url_method", Configuration.ApiClient.ParameterToString(urlMethod)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureMessageReceive_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Set Delivery Service Configure the delivery service type used as the destination for messages received at a FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="type">Message routing type</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method (when &#x60;type&#x60; is URL)</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of InlineResponse2013</returns>
        public async System.Threading.Tasks.Task<InlineResponse2013> ConfigureMessageReceive_0Async (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<InlineResponse2013> localVarResponse = await ConfigureMessageReceive_0AsyncWithHttpInfo(fonenumber, type, value, urlMethod, urlUsername, urlPassword);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set Delivery Service Configure the delivery service type used as the destination for messages received at a FoneNumber.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="type">Message routing type</param>
        /// <param name="value">Message routing type value</param>
        /// <param name="urlMethod">URL method (when &#x60;type&#x60; is URL)</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> ConfigureMessageReceive_0AsyncWithHttpInfo (string fonenumber, string type, string value, string urlMethod, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling MessagesApi->ConfigureMessageReceive_0");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling MessagesApi->ConfigureMessageReceive_0");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling MessagesApi->ConfigureMessageReceive_0");
            // verify the required parameter 'urlMethod' is set
            if (urlMethod == null)
                throw new ApiException(400, "Missing required parameter 'urlMethod' when calling MessagesApi->ConfigureMessageReceive_0");

            var localVarPath = "/messages/receive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (type != null) localVarFormParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (value != null) localVarFormParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // form parameter
            if (urlMethod != null) localVarFormParams.Add("url_method", Configuration.ApiClient.ParameterToString(urlMethod)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureMessageReceive_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Set Send Callback Configure the callback URL to notify when a message is sent. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>InlineResponse2013</returns>
        public InlineResponse2013 ConfigureMessageSendNotify (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<InlineResponse2013> localVarResponse = ConfigureMessageSendNotifyWithHttpInfo(fonenumber, method, url, urlUsername, urlPassword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set Send Callback Configure the callback URL to notify when a message is sent. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        public ApiResponse< InlineResponse2013 > ConfigureMessageSendNotifyWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling MessagesApi->ConfigureMessageSendNotify");
            // verify the required parameter 'method' is set
            if (method == null)
                throw new ApiException(400, "Missing required parameter 'method' when calling MessagesApi->ConfigureMessageSendNotify");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling MessagesApi->ConfigureMessageSendNotify");

            var localVarPath = "/messages/send_notify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (method != null) localVarFormParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureMessageSendNotify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Set Send Callback Configure the callback URL to notify when a message is sent. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of InlineResponse2013</returns>
        public async System.Threading.Tasks.Task<InlineResponse2013> ConfigureMessageSendNotifyAsync (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<InlineResponse2013> localVarResponse = await ConfigureMessageSendNotifyAsyncWithHttpInfo(fonenumber, method, url, urlUsername, urlPassword);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set Send Callback Configure the callback URL to notify when a message is sent. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> ConfigureMessageSendNotifyAsyncWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling MessagesApi->ConfigureMessageSendNotify");
            // verify the required parameter 'method' is set
            if (method == null)
                throw new ApiException(400, "Missing required parameter 'method' when calling MessagesApi->ConfigureMessageSendNotify");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling MessagesApi->ConfigureMessageSendNotify");

            var localVarPath = "/messages/send_notify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (method != null) localVarFormParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureMessageSendNotify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Set Send Callback Configure the callback URL to notify when a message is sent. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>InlineResponse2013</returns>
        public InlineResponse2013 ConfigureMessageSendNotify_0 (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<InlineResponse2013> localVarResponse = ConfigureMessageSendNotify_0WithHttpInfo(fonenumber, method, url, urlUsername, urlPassword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set Send Callback Configure the callback URL to notify when a message is sent. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        public ApiResponse< InlineResponse2013 > ConfigureMessageSendNotify_0WithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling MessagesApi->ConfigureMessageSendNotify_0");
            // verify the required parameter 'method' is set
            if (method == null)
                throw new ApiException(400, "Missing required parameter 'method' when calling MessagesApi->ConfigureMessageSendNotify_0");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling MessagesApi->ConfigureMessageSendNotify_0");

            var localVarPath = "/messages/send_notify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (method != null) localVarFormParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureMessageSendNotify_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Set Send Callback Configure the callback URL to notify when a message is sent. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of InlineResponse2013</returns>
        public async System.Threading.Tasks.Task<InlineResponse2013> ConfigureMessageSendNotify_0Async (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
             ApiResponse<InlineResponse2013> localVarResponse = await ConfigureMessageSendNotify_0AsyncWithHttpInfo(fonenumber, method, url, urlUsername, urlPassword);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set Send Callback Configure the callback URL to notify when a message is sent. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="method">Callback URL method</param>
        /// <param name="url">Callback URL. See **Notes** for additional information.</param>
        /// <param name="urlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="urlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> ConfigureMessageSendNotify_0AsyncWithHttpInfo (string fonenumber, string method, string url, string urlUsername = null, string urlPassword = null)
        {
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling MessagesApi->ConfigureMessageSendNotify_0");
            // verify the required parameter 'method' is set
            if (method == null)
                throw new ApiException(400, "Missing required parameter 'method' when calling MessagesApi->ConfigureMessageSendNotify_0");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling MessagesApi->ConfigureMessageSendNotify_0");

            var localVarPath = "/messages/send_notify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (method != null) localVarFormParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (urlUsername != null) localVarFormParams.Add("url_username", Configuration.ApiClient.ParameterToString(urlUsername)); // form parameter
            if (urlPassword != null) localVarFormParams.Add("url_password", Configuration.ApiClient.ParameterToString(urlPassword)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureMessageSendNotify_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2013)));
        }

        /// <summary>
        /// Create Message Send an SMS or MMS message.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="message">Message body</param>
        /// <param name="mediaUrl">URL for MMS media (up to 10) (optional)</param>
        /// <param name="confirmationUrl">Callback URL for confirmation (optional)</param>
        /// <param name="confirmationUrlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="confirmationUrlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="requireConfirmation">Only send this message if confirmation is available (optional)</param>
        /// <returns>InlineResponse2014</returns>
        public InlineResponse2014 CreateMessage (string to, string fonenumber, string message, List<string> mediaUrl = null, string confirmationUrl = null, string confirmationUrlUsername = null, string confirmationUrlPassword = null, bool? requireConfirmation = null)
        {
             ApiResponse<InlineResponse2014> localVarResponse = CreateMessageWithHttpInfo(to, fonenumber, message, mediaUrl, confirmationUrl, confirmationUrlUsername, confirmationUrlPassword, requireConfirmation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Message Send an SMS or MMS message.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="message">Message body</param>
        /// <param name="mediaUrl">URL for MMS media (up to 10) (optional)</param>
        /// <param name="confirmationUrl">Callback URL for confirmation (optional)</param>
        /// <param name="confirmationUrlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="confirmationUrlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="requireConfirmation">Only send this message if confirmation is available (optional)</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        public ApiResponse< InlineResponse2014 > CreateMessageWithHttpInfo (string to, string fonenumber, string message, List<string> mediaUrl = null, string confirmationUrl = null, string confirmationUrlUsername = null, string confirmationUrlPassword = null, bool? requireConfirmation = null)
        {
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling MessagesApi->CreateMessage");
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling MessagesApi->CreateMessage");
            // verify the required parameter 'message' is set
            if (message == null)
                throw new ApiException(400, "Missing required parameter 'message' when calling MessagesApi->CreateMessage");

            var localVarPath = "/messages/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (to != null) localVarFormParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (message != null) localVarFormParams.Add("message", Configuration.ApiClient.ParameterToString(message)); // form parameter
            if (mediaUrl != null) localVarFormParams.Add("media_url", Configuration.ApiClient.ParameterToString(mediaUrl)); // form parameter
            if (confirmationUrl != null) localVarFormParams.Add("confirmation_url", Configuration.ApiClient.ParameterToString(confirmationUrl)); // form parameter
            if (confirmationUrlUsername != null) localVarFormParams.Add("confirmation_url_username", Configuration.ApiClient.ParameterToString(confirmationUrlUsername)); // form parameter
            if (confirmationUrlPassword != null) localVarFormParams.Add("confirmation_url_password", Configuration.ApiClient.ParameterToString(confirmationUrlPassword)); // form parameter
            if (requireConfirmation != null) localVarFormParams.Add("require_confirmation", Configuration.ApiClient.ParameterToString(requireConfirmation)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
        }

        /// <summary>
        /// Create Message Send an SMS or MMS message.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="message">Message body</param>
        /// <param name="mediaUrl">URL for MMS media (up to 10) (optional)</param>
        /// <param name="confirmationUrl">Callback URL for confirmation (optional)</param>
        /// <param name="confirmationUrlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="confirmationUrlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="requireConfirmation">Only send this message if confirmation is available (optional)</param>
        /// <returns>Task of InlineResponse2014</returns>
        public async System.Threading.Tasks.Task<InlineResponse2014> CreateMessageAsync (string to, string fonenumber, string message, List<string> mediaUrl = null, string confirmationUrl = null, string confirmationUrlUsername = null, string confirmationUrlPassword = null, bool? requireConfirmation = null)
        {
             ApiResponse<InlineResponse2014> localVarResponse = await CreateMessageAsyncWithHttpInfo(to, fonenumber, message, mediaUrl, confirmationUrl, confirmationUrlUsername, confirmationUrlPassword, requireConfirmation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Message Send an SMS or MMS message.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="message">Message body</param>
        /// <param name="mediaUrl">URL for MMS media (up to 10) (optional)</param>
        /// <param name="confirmationUrl">Callback URL for confirmation (optional)</param>
        /// <param name="confirmationUrlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="confirmationUrlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="requireConfirmation">Only send this message if confirmation is available (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> CreateMessageAsyncWithHttpInfo (string to, string fonenumber, string message, List<string> mediaUrl = null, string confirmationUrl = null, string confirmationUrlUsername = null, string confirmationUrlPassword = null, bool? requireConfirmation = null)
        {
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling MessagesApi->CreateMessage");
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling MessagesApi->CreateMessage");
            // verify the required parameter 'message' is set
            if (message == null)
                throw new ApiException(400, "Missing required parameter 'message' when calling MessagesApi->CreateMessage");

            var localVarPath = "/messages/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (to != null) localVarFormParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (message != null) localVarFormParams.Add("message", Configuration.ApiClient.ParameterToString(message)); // form parameter
            if (mediaUrl != null) localVarFormParams.Add("media_url", Configuration.ApiClient.ParameterToString(mediaUrl)); // form parameter
            if (confirmationUrl != null) localVarFormParams.Add("confirmation_url", Configuration.ApiClient.ParameterToString(confirmationUrl)); // form parameter
            if (confirmationUrlUsername != null) localVarFormParams.Add("confirmation_url_username", Configuration.ApiClient.ParameterToString(confirmationUrlUsername)); // form parameter
            if (confirmationUrlPassword != null) localVarFormParams.Add("confirmation_url_password", Configuration.ApiClient.ParameterToString(confirmationUrlPassword)); // form parameter
            if (requireConfirmation != null) localVarFormParams.Add("require_confirmation", Configuration.ApiClient.ParameterToString(requireConfirmation)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
        }

        /// <summary>
        /// Create Message Send an SMS or MMS message.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="message">Message body</param>
        /// <param name="mediaUrl">URL for MMS media (up to 10) (optional)</param>
        /// <param name="confirmationUrl">Callback URL for confirmation (optional)</param>
        /// <param name="confirmationUrlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="confirmationUrlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="requireConfirmation">Only send this message if confirmation is available (optional)</param>
        /// <returns>InlineResponse2014</returns>
        public InlineResponse2014 CreateMessage_0 (string to, string fonenumber, string message, List<string> mediaUrl = null, string confirmationUrl = null, string confirmationUrlUsername = null, string confirmationUrlPassword = null, bool? requireConfirmation = null)
        {
             ApiResponse<InlineResponse2014> localVarResponse = CreateMessage_0WithHttpInfo(to, fonenumber, message, mediaUrl, confirmationUrl, confirmationUrlUsername, confirmationUrlPassword, requireConfirmation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Message Send an SMS or MMS message.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="message">Message body</param>
        /// <param name="mediaUrl">URL for MMS media (up to 10) (optional)</param>
        /// <param name="confirmationUrl">Callback URL for confirmation (optional)</param>
        /// <param name="confirmationUrlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="confirmationUrlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="requireConfirmation">Only send this message if confirmation is available (optional)</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        public ApiResponse< InlineResponse2014 > CreateMessage_0WithHttpInfo (string to, string fonenumber, string message, List<string> mediaUrl = null, string confirmationUrl = null, string confirmationUrlUsername = null, string confirmationUrlPassword = null, bool? requireConfirmation = null)
        {
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling MessagesApi->CreateMessage_0");
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling MessagesApi->CreateMessage_0");
            // verify the required parameter 'message' is set
            if (message == null)
                throw new ApiException(400, "Missing required parameter 'message' when calling MessagesApi->CreateMessage_0");

            var localVarPath = "/messages/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (to != null) localVarFormParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (message != null) localVarFormParams.Add("message", Configuration.ApiClient.ParameterToString(message)); // form parameter
            if (mediaUrl != null) localVarFormParams.Add("media_url", Configuration.ApiClient.ParameterToString(mediaUrl)); // form parameter
            if (confirmationUrl != null) localVarFormParams.Add("confirmation_url", Configuration.ApiClient.ParameterToString(confirmationUrl)); // form parameter
            if (confirmationUrlUsername != null) localVarFormParams.Add("confirmation_url_username", Configuration.ApiClient.ParameterToString(confirmationUrlUsername)); // form parameter
            if (confirmationUrlPassword != null) localVarFormParams.Add("confirmation_url_password", Configuration.ApiClient.ParameterToString(confirmationUrlPassword)); // form parameter
            if (requireConfirmation != null) localVarFormParams.Add("require_confirmation", Configuration.ApiClient.ParameterToString(requireConfirmation)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMessage_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
        }

        /// <summary>
        /// Create Message Send an SMS or MMS message.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="message">Message body</param>
        /// <param name="mediaUrl">URL for MMS media (up to 10) (optional)</param>
        /// <param name="confirmationUrl">Callback URL for confirmation (optional)</param>
        /// <param name="confirmationUrlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="confirmationUrlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="requireConfirmation">Only send this message if confirmation is available (optional)</param>
        /// <returns>Task of InlineResponse2014</returns>
        public async System.Threading.Tasks.Task<InlineResponse2014> CreateMessage_0Async (string to, string fonenumber, string message, List<string> mediaUrl = null, string confirmationUrl = null, string confirmationUrlUsername = null, string confirmationUrlPassword = null, bool? requireConfirmation = null)
        {
             ApiResponse<InlineResponse2014> localVarResponse = await CreateMessage_0AsyncWithHttpInfo(to, fonenumber, message, mediaUrl, confirmationUrl, confirmationUrlUsername, confirmationUrlPassword, requireConfirmation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Message Send an SMS or MMS message.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">Receiving 10 digit phone number</param>
        /// <param name="fonenumber">Your FracTEL FoneNumber</param>
        /// <param name="message">Message body</param>
        /// <param name="mediaUrl">URL for MMS media (up to 10) (optional)</param>
        /// <param name="confirmationUrl">Callback URL for confirmation (optional)</param>
        /// <param name="confirmationUrlUsername">Username for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="confirmationUrlPassword">Password for HTTP **Basic** authentication scheme (optional)</param>
        /// <param name="requireConfirmation">Only send this message if confirmation is available (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> CreateMessage_0AsyncWithHttpInfo (string to, string fonenumber, string message, List<string> mediaUrl = null, string confirmationUrl = null, string confirmationUrlUsername = null, string confirmationUrlPassword = null, bool? requireConfirmation = null)
        {
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling MessagesApi->CreateMessage_0");
            // verify the required parameter 'fonenumber' is set
            if (fonenumber == null)
                throw new ApiException(400, "Missing required parameter 'fonenumber' when calling MessagesApi->CreateMessage_0");
            // verify the required parameter 'message' is set
            if (message == null)
                throw new ApiException(400, "Missing required parameter 'message' when calling MessagesApi->CreateMessage_0");

            var localVarPath = "/messages/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (to != null) localVarFormParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (fonenumber != null) localVarFormParams.Add("fonenumber", Configuration.ApiClient.ParameterToString(fonenumber)); // form parameter
            if (message != null) localVarFormParams.Add("message", Configuration.ApiClient.ParameterToString(message)); // form parameter
            if (mediaUrl != null) localVarFormParams.Add("media_url", Configuration.ApiClient.ParameterToString(mediaUrl)); // form parameter
            if (confirmationUrl != null) localVarFormParams.Add("confirmation_url", Configuration.ApiClient.ParameterToString(confirmationUrl)); // form parameter
            if (confirmationUrlUsername != null) localVarFormParams.Add("confirmation_url_username", Configuration.ApiClient.ParameterToString(confirmationUrlUsername)); // form parameter
            if (confirmationUrlPassword != null) localVarFormParams.Add("confirmation_url_password", Configuration.ApiClient.ParameterToString(confirmationUrlPassword)); // form parameter
            if (requireConfirmation != null) localVarFormParams.Add("require_confirmation", Configuration.ApiClient.ParameterToString(requireConfirmation)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarHeaderParams["token"] = Configuration.GetApiKeyWithPrefix("token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMessage_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2014)));
        }

    }
}
