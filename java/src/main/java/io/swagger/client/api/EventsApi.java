/*
 * FoneStorm API 2.4.0 (Thunder)
 * FracTEL's Middleware API
 *
 * OpenAPI spec version: 2.4.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import io.swagger.client.model.Error;
import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.InlineResponse2012;
import org.joda.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventsApi {
    private ApiClient apiClient;

    public EventsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createEvent
     * @param id Event id (required)
     * @param organizerContactId Event organizer contact id (required)
     * @param startTime Event start time (required)
     * @param endTime Event end time (required)
     * @param title Event title (required)
     * @param attendees Event attendee contact ids (required)
     * @param description Event description (optional)
     * @param location Event location (optional)
     * @param status Event status (optional)
     * @param rescheduleCount Event reschedule count (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createEventCall(String id, String organizerContactId, LocalDate startTime, LocalDate endTime, String title, List<String> attendees, String description, String location, String status, BigDecimal rescheduleCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (id != null)
        localVarFormParams.put("id", id);
        if (organizerContactId != null)
        localVarFormParams.put("organizer_contact_id", organizerContactId);
        if (startTime != null)
        localVarFormParams.put("start_time", startTime);
        if (endTime != null)
        localVarFormParams.put("end_time", endTime);
        if (title != null)
        localVarFormParams.put("title", title);
        if (description != null)
        localVarFormParams.put("description", description);
        if (location != null)
        localVarFormParams.put("location", location);
        if (attendees != null)
        localVarFormParams.put("attendees", attendees);
        if (status != null)
        localVarFormParams.put("status", status);
        if (rescheduleCount != null)
        localVarFormParams.put("reschedule_count", rescheduleCount);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createEventValidateBeforeCall(String id, String organizerContactId, LocalDate startTime, LocalDate endTime, String title, List<String> attendees, String description, String location, String status, BigDecimal rescheduleCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createEvent(Async)");
        }
        
        // verify the required parameter 'organizerContactId' is set
        if (organizerContactId == null) {
            throw new ApiException("Missing the required parameter 'organizerContactId' when calling createEvent(Async)");
        }
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling createEvent(Async)");
        }
        
        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling createEvent(Async)");
        }
        
        // verify the required parameter 'title' is set
        if (title == null) {
            throw new ApiException("Missing the required parameter 'title' when calling createEvent(Async)");
        }
        
        // verify the required parameter 'attendees' is set
        if (attendees == null) {
            throw new ApiException("Missing the required parameter 'attendees' when calling createEvent(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createEventCall(id, organizerContactId, startTime, endTime, title, attendees, description, location, status, rescheduleCount, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Event
     * Create an event.
     * @param id Event id (required)
     * @param organizerContactId Event organizer contact id (required)
     * @param startTime Event start time (required)
     * @param endTime Event end time (required)
     * @param title Event title (required)
     * @param attendees Event attendee contact ids (required)
     * @param description Event description (optional)
     * @param location Event location (optional)
     * @param status Event status (optional)
     * @param rescheduleCount Event reschedule count (optional)
     * @return InlineResponse2012
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2012 createEvent(String id, String organizerContactId, LocalDate startTime, LocalDate endTime, String title, List<String> attendees, String description, String location, String status, BigDecimal rescheduleCount) throws ApiException {
        ApiResponse<InlineResponse2012> resp = createEventWithHttpInfo(id, organizerContactId, startTime, endTime, title, attendees, description, location, status, rescheduleCount);
        return resp.getData();
    }

    /**
     * Create Event
     * Create an event.
     * @param id Event id (required)
     * @param organizerContactId Event organizer contact id (required)
     * @param startTime Event start time (required)
     * @param endTime Event end time (required)
     * @param title Event title (required)
     * @param attendees Event attendee contact ids (required)
     * @param description Event description (optional)
     * @param location Event location (optional)
     * @param status Event status (optional)
     * @param rescheduleCount Event reschedule count (optional)
     * @return ApiResponse&lt;InlineResponse2012&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2012> createEventWithHttpInfo(String id, String organizerContactId, LocalDate startTime, LocalDate endTime, String title, List<String> attendees, String description, String location, String status, BigDecimal rescheduleCount) throws ApiException {
        com.squareup.okhttp.Call call = createEventValidateBeforeCall(id, organizerContactId, startTime, endTime, title, attendees, description, location, status, rescheduleCount, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2012>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Event (asynchronously)
     * Create an event.
     * @param id Event id (required)
     * @param organizerContactId Event organizer contact id (required)
     * @param startTime Event start time (required)
     * @param endTime Event end time (required)
     * @param title Event title (required)
     * @param attendees Event attendee contact ids (required)
     * @param description Event description (optional)
     * @param location Event location (optional)
     * @param status Event status (optional)
     * @param rescheduleCount Event reschedule count (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createEventAsync(String id, String organizerContactId, LocalDate startTime, LocalDate endTime, String title, List<String> attendees, String description, String location, String status, BigDecimal rescheduleCount, final ApiCallback<InlineResponse2012> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createEventValidateBeforeCall(id, organizerContactId, startTime, endTime, title, attendees, description, location, status, rescheduleCount, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2012>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createEvent_0
     * @param id Event id (required)
     * @param organizerContactId Event organizer contact id (required)
     * @param startTime Event start time (required)
     * @param endTime Event end time (required)
     * @param title Event title (required)
     * @param attendees Event attendee contact ids (required)
     * @param description Event description (optional)
     * @param location Event location (optional)
     * @param status Event status (optional)
     * @param rescheduleCount Event reschedule count (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createEvent_0Call(String id, String organizerContactId, LocalDate startTime, LocalDate endTime, String title, List<String> attendees, String description, String location, String status, BigDecimal rescheduleCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (id != null)
        localVarFormParams.put("id", id);
        if (organizerContactId != null)
        localVarFormParams.put("organizer_contact_id", organizerContactId);
        if (startTime != null)
        localVarFormParams.put("start_time", startTime);
        if (endTime != null)
        localVarFormParams.put("end_time", endTime);
        if (title != null)
        localVarFormParams.put("title", title);
        if (description != null)
        localVarFormParams.put("description", description);
        if (location != null)
        localVarFormParams.put("location", location);
        if (attendees != null)
        localVarFormParams.put("attendees", attendees);
        if (status != null)
        localVarFormParams.put("status", status);
        if (rescheduleCount != null)
        localVarFormParams.put("reschedule_count", rescheduleCount);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createEvent_0ValidateBeforeCall(String id, String organizerContactId, LocalDate startTime, LocalDate endTime, String title, List<String> attendees, String description, String location, String status, BigDecimal rescheduleCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createEvent_0(Async)");
        }
        
        // verify the required parameter 'organizerContactId' is set
        if (organizerContactId == null) {
            throw new ApiException("Missing the required parameter 'organizerContactId' when calling createEvent_0(Async)");
        }
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling createEvent_0(Async)");
        }
        
        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling createEvent_0(Async)");
        }
        
        // verify the required parameter 'title' is set
        if (title == null) {
            throw new ApiException("Missing the required parameter 'title' when calling createEvent_0(Async)");
        }
        
        // verify the required parameter 'attendees' is set
        if (attendees == null) {
            throw new ApiException("Missing the required parameter 'attendees' when calling createEvent_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createEvent_0Call(id, organizerContactId, startTime, endTime, title, attendees, description, location, status, rescheduleCount, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Event
     * Create an event.
     * @param id Event id (required)
     * @param organizerContactId Event organizer contact id (required)
     * @param startTime Event start time (required)
     * @param endTime Event end time (required)
     * @param title Event title (required)
     * @param attendees Event attendee contact ids (required)
     * @param description Event description (optional)
     * @param location Event location (optional)
     * @param status Event status (optional)
     * @param rescheduleCount Event reschedule count (optional)
     * @return InlineResponse2012
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2012 createEvent_0(String id, String organizerContactId, LocalDate startTime, LocalDate endTime, String title, List<String> attendees, String description, String location, String status, BigDecimal rescheduleCount) throws ApiException {
        ApiResponse<InlineResponse2012> resp = createEvent_0WithHttpInfo(id, organizerContactId, startTime, endTime, title, attendees, description, location, status, rescheduleCount);
        return resp.getData();
    }

    /**
     * Create Event
     * Create an event.
     * @param id Event id (required)
     * @param organizerContactId Event organizer contact id (required)
     * @param startTime Event start time (required)
     * @param endTime Event end time (required)
     * @param title Event title (required)
     * @param attendees Event attendee contact ids (required)
     * @param description Event description (optional)
     * @param location Event location (optional)
     * @param status Event status (optional)
     * @param rescheduleCount Event reschedule count (optional)
     * @return ApiResponse&lt;InlineResponse2012&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2012> createEvent_0WithHttpInfo(String id, String organizerContactId, LocalDate startTime, LocalDate endTime, String title, List<String> attendees, String description, String location, String status, BigDecimal rescheduleCount) throws ApiException {
        com.squareup.okhttp.Call call = createEvent_0ValidateBeforeCall(id, organizerContactId, startTime, endTime, title, attendees, description, location, status, rescheduleCount, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2012>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Event (asynchronously)
     * Create an event.
     * @param id Event id (required)
     * @param organizerContactId Event organizer contact id (required)
     * @param startTime Event start time (required)
     * @param endTime Event end time (required)
     * @param title Event title (required)
     * @param attendees Event attendee contact ids (required)
     * @param description Event description (optional)
     * @param location Event location (optional)
     * @param status Event status (optional)
     * @param rescheduleCount Event reschedule count (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createEvent_0Async(String id, String organizerContactId, LocalDate startTime, LocalDate endTime, String title, List<String> attendees, String description, String location, String status, BigDecimal rescheduleCount, final ApiCallback<InlineResponse2012> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createEvent_0ValidateBeforeCall(id, organizerContactId, startTime, endTime, title, attendees, description, location, status, rescheduleCount, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2012>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteEvent
     * @param id Event id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEventCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/events/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEventValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteEvent(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteEventCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Event
     * Delete a single event.
     * @param id Event id (required)
     * @return InlineResponse2012
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2012 deleteEvent(String id) throws ApiException {
        ApiResponse<InlineResponse2012> resp = deleteEventWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Delete Event
     * Delete a single event.
     * @param id Event id (required)
     * @return ApiResponse&lt;InlineResponse2012&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2012> deleteEventWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteEventValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2012>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Event (asynchronously)
     * Delete a single event.
     * @param id Event id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEventAsync(String id, final ApiCallback<InlineResponse2012> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEventValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2012>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteEvent_0
     * @param id Event id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEvent_0Call(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/events/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEvent_0ValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteEvent_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteEvent_0Call(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Event
     * Delete a single event.
     * @param id Event id (required)
     * @return InlineResponse2012
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2012 deleteEvent_0(String id) throws ApiException {
        ApiResponse<InlineResponse2012> resp = deleteEvent_0WithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Delete Event
     * Delete a single event.
     * @param id Event id (required)
     * @return ApiResponse&lt;InlineResponse2012&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2012> deleteEvent_0WithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteEvent_0ValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2012>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Event (asynchronously)
     * Delete a single event.
     * @param id Event id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEvent_0Async(String id, final ApiCallback<InlineResponse2012> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEvent_0ValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2012>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEvent
     * @param id Event id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEventCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/events/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEventValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEvent(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEventCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Event
     * Get information about an event.
     * @param id Event id (required)
     * @return InlineResponse2012
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2012 getEvent(String id) throws ApiException {
        ApiResponse<InlineResponse2012> resp = getEventWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Event
     * Get information about an event.
     * @param id Event id (required)
     * @return ApiResponse&lt;InlineResponse2012&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2012> getEventWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getEventValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2012>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Event (asynchronously)
     * Get information about an event.
     * @param id Event id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEventAsync(String id, final ApiCallback<InlineResponse2012> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEventValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2012>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEvent_0
     * @param id Event id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEvent_0Call(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/events/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEvent_0ValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEvent_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEvent_0Call(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Event
     * Get information about an event.
     * @param id Event id (required)
     * @return InlineResponse2012
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2012 getEvent_0(String id) throws ApiException {
        ApiResponse<InlineResponse2012> resp = getEvent_0WithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Event
     * Get information about an event.
     * @param id Event id (required)
     * @return ApiResponse&lt;InlineResponse2012&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2012> getEvent_0WithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getEvent_0ValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2012>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Event (asynchronously)
     * Get information about an event.
     * @param id Event id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEvent_0Async(String id, final ApiCallback<InlineResponse2012> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEvent_0ValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2012>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEvents
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEventsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEventsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getEventsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Events
     * Get a list of all events.
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 getEvents() throws ApiException {
        ApiResponse<InlineResponse2001> resp = getEventsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get Events
     * Get a list of all events.
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> getEventsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getEventsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Events (asynchronously)
     * Get a list of all events.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEventsAsync(final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEventsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEvents_0
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEvents_0Call(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEvents_0ValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getEvents_0Call(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Events
     * Get a list of all events.
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 getEvents_0() throws ApiException {
        ApiResponse<InlineResponse2001> resp = getEvents_0WithHttpInfo();
        return resp.getData();
    }

    /**
     * Get Events
     * Get a list of all events.
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> getEvents_0WithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getEvents_0ValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Events (asynchronously)
     * Get a list of all events.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEvents_0Async(final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEvents_0ValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEvent
     * @param id Event id (required)
     * @param organizerContactId Event organizer contact id (optional)
     * @param startTime Event start time (optional)
     * @param endTime Event end time (optional)
     * @param title Event title (optional)
     * @param description Event description (optional)
     * @param location Event location (optional)
     * @param attendees Event attendee contact ids (optional)
     * @param status Event status (optional)
     * @param rescheduleCount Event reschedule count (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEventCall(String id, String organizerContactId, LocalDate startTime, LocalDate endTime, String title, String description, String location, List<String> attendees, String status, BigDecimal rescheduleCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/events/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (organizerContactId != null)
        localVarFormParams.put("organizer_contact_id", organizerContactId);
        if (startTime != null)
        localVarFormParams.put("start_time", startTime);
        if (endTime != null)
        localVarFormParams.put("end_time", endTime);
        if (title != null)
        localVarFormParams.put("title", title);
        if (description != null)
        localVarFormParams.put("description", description);
        if (location != null)
        localVarFormParams.put("location", location);
        if (attendees != null)
        localVarFormParams.put("attendees", attendees);
        if (status != null)
        localVarFormParams.put("status", status);
        if (rescheduleCount != null)
        localVarFormParams.put("reschedule_count", rescheduleCount);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEventValidateBeforeCall(String id, String organizerContactId, LocalDate startTime, LocalDate endTime, String title, String description, String location, List<String> attendees, String status, BigDecimal rescheduleCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateEvent(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateEventCall(id, organizerContactId, startTime, endTime, title, description, location, attendees, status, rescheduleCount, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Event
     * Update an event.
     * @param id Event id (required)
     * @param organizerContactId Event organizer contact id (optional)
     * @param startTime Event start time (optional)
     * @param endTime Event end time (optional)
     * @param title Event title (optional)
     * @param description Event description (optional)
     * @param location Event location (optional)
     * @param attendees Event attendee contact ids (optional)
     * @param status Event status (optional)
     * @param rescheduleCount Event reschedule count (optional)
     * @return InlineResponse2012
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2012 updateEvent(String id, String organizerContactId, LocalDate startTime, LocalDate endTime, String title, String description, String location, List<String> attendees, String status, BigDecimal rescheduleCount) throws ApiException {
        ApiResponse<InlineResponse2012> resp = updateEventWithHttpInfo(id, organizerContactId, startTime, endTime, title, description, location, attendees, status, rescheduleCount);
        return resp.getData();
    }

    /**
     * Update Event
     * Update an event.
     * @param id Event id (required)
     * @param organizerContactId Event organizer contact id (optional)
     * @param startTime Event start time (optional)
     * @param endTime Event end time (optional)
     * @param title Event title (optional)
     * @param description Event description (optional)
     * @param location Event location (optional)
     * @param attendees Event attendee contact ids (optional)
     * @param status Event status (optional)
     * @param rescheduleCount Event reschedule count (optional)
     * @return ApiResponse&lt;InlineResponse2012&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2012> updateEventWithHttpInfo(String id, String organizerContactId, LocalDate startTime, LocalDate endTime, String title, String description, String location, List<String> attendees, String status, BigDecimal rescheduleCount) throws ApiException {
        com.squareup.okhttp.Call call = updateEventValidateBeforeCall(id, organizerContactId, startTime, endTime, title, description, location, attendees, status, rescheduleCount, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2012>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Event (asynchronously)
     * Update an event.
     * @param id Event id (required)
     * @param organizerContactId Event organizer contact id (optional)
     * @param startTime Event start time (optional)
     * @param endTime Event end time (optional)
     * @param title Event title (optional)
     * @param description Event description (optional)
     * @param location Event location (optional)
     * @param attendees Event attendee contact ids (optional)
     * @param status Event status (optional)
     * @param rescheduleCount Event reschedule count (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEventAsync(String id, String organizerContactId, LocalDate startTime, LocalDate endTime, String title, String description, String location, List<String> attendees, String status, BigDecimal rescheduleCount, final ApiCallback<InlineResponse2012> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEventValidateBeforeCall(id, organizerContactId, startTime, endTime, title, description, location, attendees, status, rescheduleCount, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2012>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEvent_0
     * @param id Event id (required)
     * @param organizerContactId Event organizer contact id (optional)
     * @param startTime Event start time (optional)
     * @param endTime Event end time (optional)
     * @param title Event title (optional)
     * @param description Event description (optional)
     * @param location Event location (optional)
     * @param attendees Event attendee contact ids (optional)
     * @param status Event status (optional)
     * @param rescheduleCount Event reschedule count (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEvent_0Call(String id, String organizerContactId, LocalDate startTime, LocalDate endTime, String title, String description, String location, List<String> attendees, String status, BigDecimal rescheduleCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/events/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (organizerContactId != null)
        localVarFormParams.put("organizer_contact_id", organizerContactId);
        if (startTime != null)
        localVarFormParams.put("start_time", startTime);
        if (endTime != null)
        localVarFormParams.put("end_time", endTime);
        if (title != null)
        localVarFormParams.put("title", title);
        if (description != null)
        localVarFormParams.put("description", description);
        if (location != null)
        localVarFormParams.put("location", location);
        if (attendees != null)
        localVarFormParams.put("attendees", attendees);
        if (status != null)
        localVarFormParams.put("status", status);
        if (rescheduleCount != null)
        localVarFormParams.put("reschedule_count", rescheduleCount);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEvent_0ValidateBeforeCall(String id, String organizerContactId, LocalDate startTime, LocalDate endTime, String title, String description, String location, List<String> attendees, String status, BigDecimal rescheduleCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateEvent_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateEvent_0Call(id, organizerContactId, startTime, endTime, title, description, location, attendees, status, rescheduleCount, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Event
     * Update an event.
     * @param id Event id (required)
     * @param organizerContactId Event organizer contact id (optional)
     * @param startTime Event start time (optional)
     * @param endTime Event end time (optional)
     * @param title Event title (optional)
     * @param description Event description (optional)
     * @param location Event location (optional)
     * @param attendees Event attendee contact ids (optional)
     * @param status Event status (optional)
     * @param rescheduleCount Event reschedule count (optional)
     * @return InlineResponse2012
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2012 updateEvent_0(String id, String organizerContactId, LocalDate startTime, LocalDate endTime, String title, String description, String location, List<String> attendees, String status, BigDecimal rescheduleCount) throws ApiException {
        ApiResponse<InlineResponse2012> resp = updateEvent_0WithHttpInfo(id, organizerContactId, startTime, endTime, title, description, location, attendees, status, rescheduleCount);
        return resp.getData();
    }

    /**
     * Update Event
     * Update an event.
     * @param id Event id (required)
     * @param organizerContactId Event organizer contact id (optional)
     * @param startTime Event start time (optional)
     * @param endTime Event end time (optional)
     * @param title Event title (optional)
     * @param description Event description (optional)
     * @param location Event location (optional)
     * @param attendees Event attendee contact ids (optional)
     * @param status Event status (optional)
     * @param rescheduleCount Event reschedule count (optional)
     * @return ApiResponse&lt;InlineResponse2012&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2012> updateEvent_0WithHttpInfo(String id, String organizerContactId, LocalDate startTime, LocalDate endTime, String title, String description, String location, List<String> attendees, String status, BigDecimal rescheduleCount) throws ApiException {
        com.squareup.okhttp.Call call = updateEvent_0ValidateBeforeCall(id, organizerContactId, startTime, endTime, title, description, location, attendees, status, rescheduleCount, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2012>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Event (asynchronously)
     * Update an event.
     * @param id Event id (required)
     * @param organizerContactId Event organizer contact id (optional)
     * @param startTime Event start time (optional)
     * @param endTime Event end time (optional)
     * @param title Event title (optional)
     * @param description Event description (optional)
     * @param location Event location (optional)
     * @param attendees Event attendee contact ids (optional)
     * @param status Event status (optional)
     * @param rescheduleCount Event reschedule count (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEvent_0Async(String id, String organizerContactId, LocalDate startTime, LocalDate endTime, String title, String description, String location, List<String> attendees, String status, BigDecimal rescheduleCount, final ApiCallback<InlineResponse2012> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEvent_0ValidateBeforeCall(id, organizerContactId, startTime, endTime, title, description, location, attendees, status, rescheduleCount, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2012>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
