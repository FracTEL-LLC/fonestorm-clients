/*
 * FoneStorm API 2.4.0 (Thunder)
 * FracTEL's Middleware API
 *
 * OpenAPI spec version: 2.4.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.InlineResponse2003;
import io.swagger.client.model.InlineResponse2004;
import io.swagger.client.model.InlineResponse2017;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContactsApi {
    private ApiClient apiClient;

    public ContactsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContactsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createContact
     * @param email Contact email address (optional)
     * @param firstName Contact first name (optional)
     * @param lastName Contact last name (optional)
     * @param optInCall Contact opt-in for calls (optional)
     * @param optInEmail Contact opt-in for emails (optional)
     * @param optInFax Contact opt-in for faxes (optional)
     * @param optInMessage Contact opt-in for messages (optional)
     * @param phone Contact phone number (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContactCall(String email, String firstName, String lastName, Boolean optInCall, Boolean optInEmail, Boolean optInFax, Boolean optInMessage, String phone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/contacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (email != null)
        localVarFormParams.put("email", email);
        if (firstName != null)
        localVarFormParams.put("first_name", firstName);
        if (lastName != null)
        localVarFormParams.put("last_name", lastName);
        if (optInCall != null)
        localVarFormParams.put("opt_in_call", optInCall);
        if (optInEmail != null)
        localVarFormParams.put("opt_in_email", optInEmail);
        if (optInFax != null)
        localVarFormParams.put("opt_in_fax", optInFax);
        if (optInMessage != null)
        localVarFormParams.put("opt_in_message", optInMessage);
        if (phone != null)
        localVarFormParams.put("phone", phone);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContactValidateBeforeCall(String email, String firstName, String lastName, Boolean optInCall, Boolean optInEmail, Boolean optInFax, Boolean optInMessage, String phone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = createContactCall(email, firstName, lastName, optInCall, optInEmail, optInFax, optInMessage, phone, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Contact
     * Create a contact.
     * @param email Contact email address (optional)
     * @param firstName Contact first name (optional)
     * @param lastName Contact last name (optional)
     * @param optInCall Contact opt-in for calls (optional)
     * @param optInEmail Contact opt-in for emails (optional)
     * @param optInFax Contact opt-in for faxes (optional)
     * @param optInMessage Contact opt-in for messages (optional)
     * @param phone Contact phone number (optional)
     * @return InlineResponse2017
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2017 createContact(String email, String firstName, String lastName, Boolean optInCall, Boolean optInEmail, Boolean optInFax, Boolean optInMessage, String phone) throws ApiException {
        ApiResponse<InlineResponse2017> resp = createContactWithHttpInfo(email, firstName, lastName, optInCall, optInEmail, optInFax, optInMessage, phone);
        return resp.getData();
    }

    /**
     * Create Contact
     * Create a contact.
     * @param email Contact email address (optional)
     * @param firstName Contact first name (optional)
     * @param lastName Contact last name (optional)
     * @param optInCall Contact opt-in for calls (optional)
     * @param optInEmail Contact opt-in for emails (optional)
     * @param optInFax Contact opt-in for faxes (optional)
     * @param optInMessage Contact opt-in for messages (optional)
     * @param phone Contact phone number (optional)
     * @return ApiResponse&lt;InlineResponse2017&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2017> createContactWithHttpInfo(String email, String firstName, String lastName, Boolean optInCall, Boolean optInEmail, Boolean optInFax, Boolean optInMessage, String phone) throws ApiException {
        com.squareup.okhttp.Call call = createContactValidateBeforeCall(email, firstName, lastName, optInCall, optInEmail, optInFax, optInMessage, phone, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2017>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Contact (asynchronously)
     * Create a contact.
     * @param email Contact email address (optional)
     * @param firstName Contact first name (optional)
     * @param lastName Contact last name (optional)
     * @param optInCall Contact opt-in for calls (optional)
     * @param optInEmail Contact opt-in for emails (optional)
     * @param optInFax Contact opt-in for faxes (optional)
     * @param optInMessage Contact opt-in for messages (optional)
     * @param phone Contact phone number (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContactAsync(String email, String firstName, String lastName, Boolean optInCall, Boolean optInEmail, Boolean optInFax, Boolean optInMessage, String phone, final ApiCallback<InlineResponse2017> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContactValidateBeforeCall(email, firstName, lastName, optInCall, optInEmail, optInFax, optInMessage, phone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2017>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createContact_0
     * @param email Contact email address (optional)
     * @param firstName Contact first name (optional)
     * @param lastName Contact last name (optional)
     * @param optInCall Contact opt-in for calls (optional)
     * @param optInEmail Contact opt-in for emails (optional)
     * @param optInFax Contact opt-in for faxes (optional)
     * @param optInMessage Contact opt-in for messages (optional)
     * @param phone Contact phone number (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContact_0Call(String email, String firstName, String lastName, Boolean optInCall, Boolean optInEmail, Boolean optInFax, Boolean optInMessage, String phone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/contacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (email != null)
        localVarFormParams.put("email", email);
        if (firstName != null)
        localVarFormParams.put("first_name", firstName);
        if (lastName != null)
        localVarFormParams.put("last_name", lastName);
        if (optInCall != null)
        localVarFormParams.put("opt_in_call", optInCall);
        if (optInEmail != null)
        localVarFormParams.put("opt_in_email", optInEmail);
        if (optInFax != null)
        localVarFormParams.put("opt_in_fax", optInFax);
        if (optInMessage != null)
        localVarFormParams.put("opt_in_message", optInMessage);
        if (phone != null)
        localVarFormParams.put("phone", phone);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContact_0ValidateBeforeCall(String email, String firstName, String lastName, Boolean optInCall, Boolean optInEmail, Boolean optInFax, Boolean optInMessage, String phone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = createContact_0Call(email, firstName, lastName, optInCall, optInEmail, optInFax, optInMessage, phone, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Contact
     * Create a contact.
     * @param email Contact email address (optional)
     * @param firstName Contact first name (optional)
     * @param lastName Contact last name (optional)
     * @param optInCall Contact opt-in for calls (optional)
     * @param optInEmail Contact opt-in for emails (optional)
     * @param optInFax Contact opt-in for faxes (optional)
     * @param optInMessage Contact opt-in for messages (optional)
     * @param phone Contact phone number (optional)
     * @return InlineResponse2017
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2017 createContact_0(String email, String firstName, String lastName, Boolean optInCall, Boolean optInEmail, Boolean optInFax, Boolean optInMessage, String phone) throws ApiException {
        ApiResponse<InlineResponse2017> resp = createContact_0WithHttpInfo(email, firstName, lastName, optInCall, optInEmail, optInFax, optInMessage, phone);
        return resp.getData();
    }

    /**
     * Create Contact
     * Create a contact.
     * @param email Contact email address (optional)
     * @param firstName Contact first name (optional)
     * @param lastName Contact last name (optional)
     * @param optInCall Contact opt-in for calls (optional)
     * @param optInEmail Contact opt-in for emails (optional)
     * @param optInFax Contact opt-in for faxes (optional)
     * @param optInMessage Contact opt-in for messages (optional)
     * @param phone Contact phone number (optional)
     * @return ApiResponse&lt;InlineResponse2017&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2017> createContact_0WithHttpInfo(String email, String firstName, String lastName, Boolean optInCall, Boolean optInEmail, Boolean optInFax, Boolean optInMessage, String phone) throws ApiException {
        com.squareup.okhttp.Call call = createContact_0ValidateBeforeCall(email, firstName, lastName, optInCall, optInEmail, optInFax, optInMessage, phone, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2017>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Contact (asynchronously)
     * Create a contact.
     * @param email Contact email address (optional)
     * @param firstName Contact first name (optional)
     * @param lastName Contact last name (optional)
     * @param optInCall Contact opt-in for calls (optional)
     * @param optInEmail Contact opt-in for emails (optional)
     * @param optInFax Contact opt-in for faxes (optional)
     * @param optInMessage Contact opt-in for messages (optional)
     * @param phone Contact phone number (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContact_0Async(String email, String firstName, String lastName, Boolean optInCall, Boolean optInEmail, Boolean optInFax, Boolean optInMessage, String phone, final ApiCallback<InlineResponse2017> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContact_0ValidateBeforeCall(email, firstName, lastName, optInCall, optInEmail, optInFax, optInMessage, phone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2017>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteContact
     * @param id Contact id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContactCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/contacts/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContactValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteContact(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteContactCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Contact
     * Delete a contact.
     * @param id Contact id (required)
     * @return InlineResponse2017
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2017 deleteContact(String id) throws ApiException {
        ApiResponse<InlineResponse2017> resp = deleteContactWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Delete Contact
     * Delete a contact.
     * @param id Contact id (required)
     * @return ApiResponse&lt;InlineResponse2017&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2017> deleteContactWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteContactValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2017>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Contact (asynchronously)
     * Delete a contact.
     * @param id Contact id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContactAsync(String id, final ApiCallback<InlineResponse2017> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContactValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2017>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteContact_0
     * @param id Contact id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContact_0Call(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/contacts/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContact_0ValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteContact_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteContact_0Call(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Contact
     * Delete a contact.
     * @param id Contact id (required)
     * @return InlineResponse2017
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2017 deleteContact_0(String id) throws ApiException {
        ApiResponse<InlineResponse2017> resp = deleteContact_0WithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Delete Contact
     * Delete a contact.
     * @param id Contact id (required)
     * @return ApiResponse&lt;InlineResponse2017&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2017> deleteContact_0WithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteContact_0ValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2017>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Contact (asynchronously)
     * Delete a contact.
     * @param id Contact id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContact_0Async(String id, final ApiCallback<InlineResponse2017> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContact_0ValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2017>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContact
     * @param id Contact id (required)
     * @param attributes Include all attributes (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContactCall(String id, Boolean attributes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/contacts/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (attributes != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "attributes", attributes));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded", "application/offset+octet-stream", "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContactValidateBeforeCall(String id, Boolean attributes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getContact(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getContactCall(id, attributes, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Contact
     * Get information about a contact.
     * @param id Contact id (required)
     * @param attributes Include all attributes (optional)
     * @return InlineResponse2004
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2004 getContact(String id, Boolean attributes) throws ApiException {
        ApiResponse<InlineResponse2004> resp = getContactWithHttpInfo(id, attributes);
        return resp.getData();
    }

    /**
     * Get Contact
     * Get information about a contact.
     * @param id Contact id (required)
     * @param attributes Include all attributes (optional)
     * @return ApiResponse&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2004> getContactWithHttpInfo(String id, Boolean attributes) throws ApiException {
        com.squareup.okhttp.Call call = getContactValidateBeforeCall(id, attributes, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Contact (asynchronously)
     * Get information about a contact.
     * @param id Contact id (required)
     * @param attributes Include all attributes (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContactAsync(String id, Boolean attributes, final ApiCallback<InlineResponse2004> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContactValidateBeforeCall(id, attributes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContactEvents
     * @param id Contact id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContactEventsCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/contacts/{id}/events"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContactEventsValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getContactEvents(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getContactEventsCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Contact Events
     * Get a list of all events for a given contact.
     * @param id Contact id (required)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 getContactEvents(String id) throws ApiException {
        ApiResponse<InlineResponse2001> resp = getContactEventsWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Contact Events
     * Get a list of all events for a given contact.
     * @param id Contact id (required)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> getContactEventsWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getContactEventsValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Contact Events (asynchronously)
     * Get a list of all events for a given contact.
     * @param id Contact id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContactEventsAsync(String id, final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContactEventsValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContactEvents_0
     * @param id Contact id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContactEvents_0Call(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/contacts/{id}/events"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContactEvents_0ValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getContactEvents_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getContactEvents_0Call(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Contact Events
     * Get a list of all events for a given contact.
     * @param id Contact id (required)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 getContactEvents_0(String id) throws ApiException {
        ApiResponse<InlineResponse2001> resp = getContactEvents_0WithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Contact Events
     * Get a list of all events for a given contact.
     * @param id Contact id (required)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> getContactEvents_0WithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getContactEvents_0ValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Contact Events (asynchronously)
     * Get a list of all events for a given contact.
     * @param id Contact id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContactEvents_0Async(String id, final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContactEvents_0ValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContactSurveys
     * @param id Contact id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContactSurveysCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/contacts/{id}/surveys"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContactSurveysValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getContactSurveys(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getContactSurveysCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Contact Surveys
     * Get a list of all surveys for a given contact.
     * @param id Contact id (required)
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2003 getContactSurveys(String id) throws ApiException {
        ApiResponse<InlineResponse2003> resp = getContactSurveysWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Contact Surveys
     * Get a list of all surveys for a given contact.
     * @param id Contact id (required)
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2003> getContactSurveysWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getContactSurveysValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Contact Surveys (asynchronously)
     * Get a list of all surveys for a given contact.
     * @param id Contact id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContactSurveysAsync(String id, final ApiCallback<InlineResponse2003> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContactSurveysValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContactSurveys_0
     * @param id Contact id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContactSurveys_0Call(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/contacts/{id}/surveys"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContactSurveys_0ValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getContactSurveys_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getContactSurveys_0Call(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Contact Surveys
     * Get a list of all surveys for a given contact.
     * @param id Contact id (required)
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2003 getContactSurveys_0(String id) throws ApiException {
        ApiResponse<InlineResponse2003> resp = getContactSurveys_0WithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Contact Surveys
     * Get a list of all surveys for a given contact.
     * @param id Contact id (required)
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2003> getContactSurveys_0WithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getContactSurveys_0ValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Contact Surveys (asynchronously)
     * Get a list of all surveys for a given contact.
     * @param id Contact id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContactSurveys_0Async(String id, final ApiCallback<InlineResponse2003> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContactSurveys_0ValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContact_0
     * @param id Contact id (required)
     * @param attributes Include all attributes (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContact_0Call(String id, Boolean attributes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/contacts/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (attributes != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "attributes", attributes));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded", "application/offset+octet-stream", "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContact_0ValidateBeforeCall(String id, Boolean attributes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getContact_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getContact_0Call(id, attributes, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Contact
     * Get information about a contact.
     * @param id Contact id (required)
     * @param attributes Include all attributes (optional)
     * @return InlineResponse2004
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2004 getContact_0(String id, Boolean attributes) throws ApiException {
        ApiResponse<InlineResponse2004> resp = getContact_0WithHttpInfo(id, attributes);
        return resp.getData();
    }

    /**
     * Get Contact
     * Get information about a contact.
     * @param id Contact id (required)
     * @param attributes Include all attributes (optional)
     * @return ApiResponse&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2004> getContact_0WithHttpInfo(String id, Boolean attributes) throws ApiException {
        com.squareup.okhttp.Call call = getContact_0ValidateBeforeCall(id, attributes, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Contact (asynchronously)
     * Get information about a contact.
     * @param id Contact id (required)
     * @param attributes Include all attributes (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContact_0Async(String id, Boolean attributes, final ApiCallback<InlineResponse2004> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContact_0ValidateBeforeCall(id, attributes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContacts
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContactsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/contacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContactsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getContactsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Contacts
     * Get a list of all contacts.
     * @return InlineResponse2004
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2004 getContacts() throws ApiException {
        ApiResponse<InlineResponse2004> resp = getContactsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get Contacts
     * Get a list of all contacts.
     * @return ApiResponse&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2004> getContactsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getContactsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Contacts (asynchronously)
     * Get a list of all contacts.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContactsAsync(final ApiCallback<InlineResponse2004> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContactsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContacts_0
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContacts_0Call(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/contacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContacts_0ValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getContacts_0Call(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Contacts
     * Get a list of all contacts.
     * @return InlineResponse2004
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2004 getContacts_0() throws ApiException {
        ApiResponse<InlineResponse2004> resp = getContacts_0WithHttpInfo();
        return resp.getData();
    }

    /**
     * Get Contacts
     * Get a list of all contacts.
     * @return ApiResponse&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2004> getContacts_0WithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getContacts_0ValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Contacts (asynchronously)
     * Get a list of all contacts.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContacts_0Async(final ApiCallback<InlineResponse2004> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContacts_0ValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateContact
     * @param id Contact id (required)
     * @param email Contact email address (optional)
     * @param firstName Contact first name (optional)
     * @param lastName Contact last name (optional)
     * @param optInCall Contact opt-in for calls (optional)
     * @param optInEmail Contact opt-in for emails (optional)
     * @param optInFax Contact opt-in for faxes (optional)
     * @param optInMessage Contact opt-in for messages (optional)
     * @param phone Contact phone number (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContactCall(String id, String email, String firstName, String lastName, Boolean optInCall, Boolean optInEmail, Boolean optInFax, Boolean optInMessage, String phone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/contacts/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (email != null)
        localVarFormParams.put("email", email);
        if (firstName != null)
        localVarFormParams.put("first_name", firstName);
        if (lastName != null)
        localVarFormParams.put("last_name", lastName);
        if (optInCall != null)
        localVarFormParams.put("opt_in_call", optInCall);
        if (optInEmail != null)
        localVarFormParams.put("opt_in_email", optInEmail);
        if (optInFax != null)
        localVarFormParams.put("opt_in_fax", optInFax);
        if (optInMessage != null)
        localVarFormParams.put("opt_in_message", optInMessage);
        if (phone != null)
        localVarFormParams.put("phone", phone);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContactValidateBeforeCall(String id, String email, String firstName, String lastName, Boolean optInCall, Boolean optInEmail, Boolean optInFax, Boolean optInMessage, String phone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateContact(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateContactCall(id, email, firstName, lastName, optInCall, optInEmail, optInFax, optInMessage, phone, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Contact
     * Update a contact.
     * @param id Contact id (required)
     * @param email Contact email address (optional)
     * @param firstName Contact first name (optional)
     * @param lastName Contact last name (optional)
     * @param optInCall Contact opt-in for calls (optional)
     * @param optInEmail Contact opt-in for emails (optional)
     * @param optInFax Contact opt-in for faxes (optional)
     * @param optInMessage Contact opt-in for messages (optional)
     * @param phone Contact phone number (optional)
     * @return InlineResponse2017
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2017 updateContact(String id, String email, String firstName, String lastName, Boolean optInCall, Boolean optInEmail, Boolean optInFax, Boolean optInMessage, String phone) throws ApiException {
        ApiResponse<InlineResponse2017> resp = updateContactWithHttpInfo(id, email, firstName, lastName, optInCall, optInEmail, optInFax, optInMessage, phone);
        return resp.getData();
    }

    /**
     * Update Contact
     * Update a contact.
     * @param id Contact id (required)
     * @param email Contact email address (optional)
     * @param firstName Contact first name (optional)
     * @param lastName Contact last name (optional)
     * @param optInCall Contact opt-in for calls (optional)
     * @param optInEmail Contact opt-in for emails (optional)
     * @param optInFax Contact opt-in for faxes (optional)
     * @param optInMessage Contact opt-in for messages (optional)
     * @param phone Contact phone number (optional)
     * @return ApiResponse&lt;InlineResponse2017&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2017> updateContactWithHttpInfo(String id, String email, String firstName, String lastName, Boolean optInCall, Boolean optInEmail, Boolean optInFax, Boolean optInMessage, String phone) throws ApiException {
        com.squareup.okhttp.Call call = updateContactValidateBeforeCall(id, email, firstName, lastName, optInCall, optInEmail, optInFax, optInMessage, phone, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2017>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Contact (asynchronously)
     * Update a contact.
     * @param id Contact id (required)
     * @param email Contact email address (optional)
     * @param firstName Contact first name (optional)
     * @param lastName Contact last name (optional)
     * @param optInCall Contact opt-in for calls (optional)
     * @param optInEmail Contact opt-in for emails (optional)
     * @param optInFax Contact opt-in for faxes (optional)
     * @param optInMessage Contact opt-in for messages (optional)
     * @param phone Contact phone number (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContactAsync(String id, String email, String firstName, String lastName, Boolean optInCall, Boolean optInEmail, Boolean optInFax, Boolean optInMessage, String phone, final ApiCallback<InlineResponse2017> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContactValidateBeforeCall(id, email, firstName, lastName, optInCall, optInEmail, optInFax, optInMessage, phone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2017>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateContact_0
     * @param id Contact id (required)
     * @param email Contact email address (optional)
     * @param firstName Contact first name (optional)
     * @param lastName Contact last name (optional)
     * @param optInCall Contact opt-in for calls (optional)
     * @param optInEmail Contact opt-in for emails (optional)
     * @param optInFax Contact opt-in for faxes (optional)
     * @param optInMessage Contact opt-in for messages (optional)
     * @param phone Contact phone number (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContact_0Call(String id, String email, String firstName, String lastName, Boolean optInCall, Boolean optInEmail, Boolean optInFax, Boolean optInMessage, String phone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/contacts/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (email != null)
        localVarFormParams.put("email", email);
        if (firstName != null)
        localVarFormParams.put("first_name", firstName);
        if (lastName != null)
        localVarFormParams.put("last_name", lastName);
        if (optInCall != null)
        localVarFormParams.put("opt_in_call", optInCall);
        if (optInEmail != null)
        localVarFormParams.put("opt_in_email", optInEmail);
        if (optInFax != null)
        localVarFormParams.put("opt_in_fax", optInFax);
        if (optInMessage != null)
        localVarFormParams.put("opt_in_message", optInMessage);
        if (phone != null)
        localVarFormParams.put("phone", phone);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContact_0ValidateBeforeCall(String id, String email, String firstName, String lastName, Boolean optInCall, Boolean optInEmail, Boolean optInFax, Boolean optInMessage, String phone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateContact_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateContact_0Call(id, email, firstName, lastName, optInCall, optInEmail, optInFax, optInMessage, phone, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Contact
     * Update a contact.
     * @param id Contact id (required)
     * @param email Contact email address (optional)
     * @param firstName Contact first name (optional)
     * @param lastName Contact last name (optional)
     * @param optInCall Contact opt-in for calls (optional)
     * @param optInEmail Contact opt-in for emails (optional)
     * @param optInFax Contact opt-in for faxes (optional)
     * @param optInMessage Contact opt-in for messages (optional)
     * @param phone Contact phone number (optional)
     * @return InlineResponse2017
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2017 updateContact_0(String id, String email, String firstName, String lastName, Boolean optInCall, Boolean optInEmail, Boolean optInFax, Boolean optInMessage, String phone) throws ApiException {
        ApiResponse<InlineResponse2017> resp = updateContact_0WithHttpInfo(id, email, firstName, lastName, optInCall, optInEmail, optInFax, optInMessage, phone);
        return resp.getData();
    }

    /**
     * Update Contact
     * Update a contact.
     * @param id Contact id (required)
     * @param email Contact email address (optional)
     * @param firstName Contact first name (optional)
     * @param lastName Contact last name (optional)
     * @param optInCall Contact opt-in for calls (optional)
     * @param optInEmail Contact opt-in for emails (optional)
     * @param optInFax Contact opt-in for faxes (optional)
     * @param optInMessage Contact opt-in for messages (optional)
     * @param phone Contact phone number (optional)
     * @return ApiResponse&lt;InlineResponse2017&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2017> updateContact_0WithHttpInfo(String id, String email, String firstName, String lastName, Boolean optInCall, Boolean optInEmail, Boolean optInFax, Boolean optInMessage, String phone) throws ApiException {
        com.squareup.okhttp.Call call = updateContact_0ValidateBeforeCall(id, email, firstName, lastName, optInCall, optInEmail, optInFax, optInMessage, phone, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2017>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Contact (asynchronously)
     * Update a contact.
     * @param id Contact id (required)
     * @param email Contact email address (optional)
     * @param firstName Contact first name (optional)
     * @param lastName Contact last name (optional)
     * @param optInCall Contact opt-in for calls (optional)
     * @param optInEmail Contact opt-in for emails (optional)
     * @param optInFax Contact opt-in for faxes (optional)
     * @param optInMessage Contact opt-in for messages (optional)
     * @param phone Contact phone number (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContact_0Async(String id, String email, String firstName, String lastName, Boolean optInCall, Boolean optInEmail, Boolean optInFax, Boolean optInMessage, String phone, final ApiCallback<InlineResponse2017> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContact_0ValidateBeforeCall(id, email, firstName, lastName, optInCall, optInEmail, optInFax, optInMessage, phone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2017>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
