/*
 * FoneStorm API 2.4.0 (Thunder)
 * FracTEL's Middleware API
 *
 * OpenAPI spec version: 2.4.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.InlineResponse2014;
import io.swagger.client.model.InlineResponse2015;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MessagesApi {
    private ApiClient apiClient;

    public MessagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MessagesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for configureMessageReceive
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param type Message routing type (required)
     * @param value Message routing type value (required)
     * @param urlMethod URL method (when &#x60;type&#x60; is URL) (required)
     * @param urlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param urlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call configureMessageReceiveCall(String fonenumber, String type, String value, String urlMethod, String urlUsername, String urlPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/messages/receive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fonenumber != null)
        localVarFormParams.put("fonenumber", fonenumber);
        if (type != null)
        localVarFormParams.put("type", type);
        if (value != null)
        localVarFormParams.put("value", value);
        if (urlMethod != null)
        localVarFormParams.put("url_method", urlMethod);
        if (urlUsername != null)
        localVarFormParams.put("url_username", urlUsername);
        if (urlPassword != null)
        localVarFormParams.put("url_password", urlPassword);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call configureMessageReceiveValidateBeforeCall(String fonenumber, String type, String value, String urlMethod, String urlUsername, String urlPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fonenumber' is set
        if (fonenumber == null) {
            throw new ApiException("Missing the required parameter 'fonenumber' when calling configureMessageReceive(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling configureMessageReceive(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling configureMessageReceive(Async)");
        }
        
        // verify the required parameter 'urlMethod' is set
        if (urlMethod == null) {
            throw new ApiException("Missing the required parameter 'urlMethod' when calling configureMessageReceive(Async)");
        }
        
        
        com.squareup.okhttp.Call call = configureMessageReceiveCall(fonenumber, type, value, urlMethod, urlUsername, urlPassword, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set Delivery Service
     * Configure the delivery service type used as the destination for messages received at a FoneNumber.
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param type Message routing type (required)
     * @param value Message routing type value (required)
     * @param urlMethod URL method (when &#x60;type&#x60; is URL) (required)
     * @param urlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param urlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @return InlineResponse2014
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2014 configureMessageReceive(String fonenumber, String type, String value, String urlMethod, String urlUsername, String urlPassword) throws ApiException {
        ApiResponse<InlineResponse2014> resp = configureMessageReceiveWithHttpInfo(fonenumber, type, value, urlMethod, urlUsername, urlPassword);
        return resp.getData();
    }

    /**
     * Set Delivery Service
     * Configure the delivery service type used as the destination for messages received at a FoneNumber.
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param type Message routing type (required)
     * @param value Message routing type value (required)
     * @param urlMethod URL method (when &#x60;type&#x60; is URL) (required)
     * @param urlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param urlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @return ApiResponse&lt;InlineResponse2014&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2014> configureMessageReceiveWithHttpInfo(String fonenumber, String type, String value, String urlMethod, String urlUsername, String urlPassword) throws ApiException {
        com.squareup.okhttp.Call call = configureMessageReceiveValidateBeforeCall(fonenumber, type, value, urlMethod, urlUsername, urlPassword, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2014>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set Delivery Service (asynchronously)
     * Configure the delivery service type used as the destination for messages received at a FoneNumber.
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param type Message routing type (required)
     * @param value Message routing type value (required)
     * @param urlMethod URL method (when &#x60;type&#x60; is URL) (required)
     * @param urlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param urlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call configureMessageReceiveAsync(String fonenumber, String type, String value, String urlMethod, String urlUsername, String urlPassword, final ApiCallback<InlineResponse2014> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = configureMessageReceiveValidateBeforeCall(fonenumber, type, value, urlMethod, urlUsername, urlPassword, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2014>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for configureMessageReceiveNotify
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param method Callback URL method (required)
     * @param url Callback URL. See **Notes** for additional information. (required)
     * @param urlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param urlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call configureMessageReceiveNotifyCall(String fonenumber, String method, String url, String urlUsername, String urlPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/messages/receive_notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fonenumber != null)
        localVarFormParams.put("fonenumber", fonenumber);
        if (method != null)
        localVarFormParams.put("method", method);
        if (url != null)
        localVarFormParams.put("url", url);
        if (urlUsername != null)
        localVarFormParams.put("url_username", urlUsername);
        if (urlPassword != null)
        localVarFormParams.put("url_password", urlPassword);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call configureMessageReceiveNotifyValidateBeforeCall(String fonenumber, String method, String url, String urlUsername, String urlPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fonenumber' is set
        if (fonenumber == null) {
            throw new ApiException("Missing the required parameter 'fonenumber' when calling configureMessageReceiveNotify(Async)");
        }
        
        // verify the required parameter 'method' is set
        if (method == null) {
            throw new ApiException("Missing the required parameter 'method' when calling configureMessageReceiveNotify(Async)");
        }
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling configureMessageReceiveNotify(Async)");
        }
        
        
        com.squareup.okhttp.Call call = configureMessageReceiveNotifyCall(fonenumber, method, url, urlUsername, urlPassword, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set Receive Callback
     * Configure the callback URL to notify when a message is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param method Callback URL method (required)
     * @param url Callback URL. See **Notes** for additional information. (required)
     * @param urlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param urlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @return InlineResponse2014
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2014 configureMessageReceiveNotify(String fonenumber, String method, String url, String urlUsername, String urlPassword) throws ApiException {
        ApiResponse<InlineResponse2014> resp = configureMessageReceiveNotifyWithHttpInfo(fonenumber, method, url, urlUsername, urlPassword);
        return resp.getData();
    }

    /**
     * Set Receive Callback
     * Configure the callback URL to notify when a message is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param method Callback URL method (required)
     * @param url Callback URL. See **Notes** for additional information. (required)
     * @param urlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param urlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @return ApiResponse&lt;InlineResponse2014&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2014> configureMessageReceiveNotifyWithHttpInfo(String fonenumber, String method, String url, String urlUsername, String urlPassword) throws ApiException {
        com.squareup.okhttp.Call call = configureMessageReceiveNotifyValidateBeforeCall(fonenumber, method, url, urlUsername, urlPassword, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2014>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set Receive Callback (asynchronously)
     * Configure the callback URL to notify when a message is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param method Callback URL method (required)
     * @param url Callback URL. See **Notes** for additional information. (required)
     * @param urlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param urlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call configureMessageReceiveNotifyAsync(String fonenumber, String method, String url, String urlUsername, String urlPassword, final ApiCallback<InlineResponse2014> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = configureMessageReceiveNotifyValidateBeforeCall(fonenumber, method, url, urlUsername, urlPassword, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2014>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for configureMessageReceiveNotify_0
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param method Callback URL method (required)
     * @param url Callback URL. See **Notes** for additional information. (required)
     * @param urlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param urlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call configureMessageReceiveNotify_0Call(String fonenumber, String method, String url, String urlUsername, String urlPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/messages/receive_notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fonenumber != null)
        localVarFormParams.put("fonenumber", fonenumber);
        if (method != null)
        localVarFormParams.put("method", method);
        if (url != null)
        localVarFormParams.put("url", url);
        if (urlUsername != null)
        localVarFormParams.put("url_username", urlUsername);
        if (urlPassword != null)
        localVarFormParams.put("url_password", urlPassword);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call configureMessageReceiveNotify_0ValidateBeforeCall(String fonenumber, String method, String url, String urlUsername, String urlPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fonenumber' is set
        if (fonenumber == null) {
            throw new ApiException("Missing the required parameter 'fonenumber' when calling configureMessageReceiveNotify_0(Async)");
        }
        
        // verify the required parameter 'method' is set
        if (method == null) {
            throw new ApiException("Missing the required parameter 'method' when calling configureMessageReceiveNotify_0(Async)");
        }
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling configureMessageReceiveNotify_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = configureMessageReceiveNotify_0Call(fonenumber, method, url, urlUsername, urlPassword, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set Receive Callback
     * Configure the callback URL to notify when a message is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param method Callback URL method (required)
     * @param url Callback URL. See **Notes** for additional information. (required)
     * @param urlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param urlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @return InlineResponse2014
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2014 configureMessageReceiveNotify_0(String fonenumber, String method, String url, String urlUsername, String urlPassword) throws ApiException {
        ApiResponse<InlineResponse2014> resp = configureMessageReceiveNotify_0WithHttpInfo(fonenumber, method, url, urlUsername, urlPassword);
        return resp.getData();
    }

    /**
     * Set Receive Callback
     * Configure the callback URL to notify when a message is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param method Callback URL method (required)
     * @param url Callback URL. See **Notes** for additional information. (required)
     * @param urlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param urlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @return ApiResponse&lt;InlineResponse2014&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2014> configureMessageReceiveNotify_0WithHttpInfo(String fonenumber, String method, String url, String urlUsername, String urlPassword) throws ApiException {
        com.squareup.okhttp.Call call = configureMessageReceiveNotify_0ValidateBeforeCall(fonenumber, method, url, urlUsername, urlPassword, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2014>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set Receive Callback (asynchronously)
     * Configure the callback URL to notify when a message is received. Each FoneNumber can be configured to use its own callback URL for handling receive notifications.
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param method Callback URL method (required)
     * @param url Callback URL. See **Notes** for additional information. (required)
     * @param urlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param urlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call configureMessageReceiveNotify_0Async(String fonenumber, String method, String url, String urlUsername, String urlPassword, final ApiCallback<InlineResponse2014> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = configureMessageReceiveNotify_0ValidateBeforeCall(fonenumber, method, url, urlUsername, urlPassword, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2014>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for configureMessageReceive_0
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param type Message routing type (required)
     * @param value Message routing type value (required)
     * @param urlMethod URL method (when &#x60;type&#x60; is URL) (required)
     * @param urlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param urlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call configureMessageReceive_0Call(String fonenumber, String type, String value, String urlMethod, String urlUsername, String urlPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/messages/receive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fonenumber != null)
        localVarFormParams.put("fonenumber", fonenumber);
        if (type != null)
        localVarFormParams.put("type", type);
        if (value != null)
        localVarFormParams.put("value", value);
        if (urlMethod != null)
        localVarFormParams.put("url_method", urlMethod);
        if (urlUsername != null)
        localVarFormParams.put("url_username", urlUsername);
        if (urlPassword != null)
        localVarFormParams.put("url_password", urlPassword);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call configureMessageReceive_0ValidateBeforeCall(String fonenumber, String type, String value, String urlMethod, String urlUsername, String urlPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fonenumber' is set
        if (fonenumber == null) {
            throw new ApiException("Missing the required parameter 'fonenumber' when calling configureMessageReceive_0(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling configureMessageReceive_0(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling configureMessageReceive_0(Async)");
        }
        
        // verify the required parameter 'urlMethod' is set
        if (urlMethod == null) {
            throw new ApiException("Missing the required parameter 'urlMethod' when calling configureMessageReceive_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = configureMessageReceive_0Call(fonenumber, type, value, urlMethod, urlUsername, urlPassword, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set Delivery Service
     * Configure the delivery service type used as the destination for messages received at a FoneNumber.
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param type Message routing type (required)
     * @param value Message routing type value (required)
     * @param urlMethod URL method (when &#x60;type&#x60; is URL) (required)
     * @param urlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param urlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @return InlineResponse2014
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2014 configureMessageReceive_0(String fonenumber, String type, String value, String urlMethod, String urlUsername, String urlPassword) throws ApiException {
        ApiResponse<InlineResponse2014> resp = configureMessageReceive_0WithHttpInfo(fonenumber, type, value, urlMethod, urlUsername, urlPassword);
        return resp.getData();
    }

    /**
     * Set Delivery Service
     * Configure the delivery service type used as the destination for messages received at a FoneNumber.
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param type Message routing type (required)
     * @param value Message routing type value (required)
     * @param urlMethod URL method (when &#x60;type&#x60; is URL) (required)
     * @param urlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param urlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @return ApiResponse&lt;InlineResponse2014&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2014> configureMessageReceive_0WithHttpInfo(String fonenumber, String type, String value, String urlMethod, String urlUsername, String urlPassword) throws ApiException {
        com.squareup.okhttp.Call call = configureMessageReceive_0ValidateBeforeCall(fonenumber, type, value, urlMethod, urlUsername, urlPassword, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2014>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set Delivery Service (asynchronously)
     * Configure the delivery service type used as the destination for messages received at a FoneNumber.
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param type Message routing type (required)
     * @param value Message routing type value (required)
     * @param urlMethod URL method (when &#x60;type&#x60; is URL) (required)
     * @param urlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param urlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call configureMessageReceive_0Async(String fonenumber, String type, String value, String urlMethod, String urlUsername, String urlPassword, final ApiCallback<InlineResponse2014> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = configureMessageReceive_0ValidateBeforeCall(fonenumber, type, value, urlMethod, urlUsername, urlPassword, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2014>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for configureMessageSendNotify
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param method Callback URL method (required)
     * @param url Callback URL. See **Notes** for additional information. (required)
     * @param urlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param urlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call configureMessageSendNotifyCall(String fonenumber, String method, String url, String urlUsername, String urlPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/messages/send_notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fonenumber != null)
        localVarFormParams.put("fonenumber", fonenumber);
        if (method != null)
        localVarFormParams.put("method", method);
        if (url != null)
        localVarFormParams.put("url", url);
        if (urlUsername != null)
        localVarFormParams.put("url_username", urlUsername);
        if (urlPassword != null)
        localVarFormParams.put("url_password", urlPassword);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call configureMessageSendNotifyValidateBeforeCall(String fonenumber, String method, String url, String urlUsername, String urlPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fonenumber' is set
        if (fonenumber == null) {
            throw new ApiException("Missing the required parameter 'fonenumber' when calling configureMessageSendNotify(Async)");
        }
        
        // verify the required parameter 'method' is set
        if (method == null) {
            throw new ApiException("Missing the required parameter 'method' when calling configureMessageSendNotify(Async)");
        }
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling configureMessageSendNotify(Async)");
        }
        
        
        com.squareup.okhttp.Call call = configureMessageSendNotifyCall(fonenumber, method, url, urlUsername, urlPassword, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set Send Callback
     * Configure the callback URL to notify when a message is sent. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param method Callback URL method (required)
     * @param url Callback URL. See **Notes** for additional information. (required)
     * @param urlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param urlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @return InlineResponse2014
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2014 configureMessageSendNotify(String fonenumber, String method, String url, String urlUsername, String urlPassword) throws ApiException {
        ApiResponse<InlineResponse2014> resp = configureMessageSendNotifyWithHttpInfo(fonenumber, method, url, urlUsername, urlPassword);
        return resp.getData();
    }

    /**
     * Set Send Callback
     * Configure the callback URL to notify when a message is sent. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param method Callback URL method (required)
     * @param url Callback URL. See **Notes** for additional information. (required)
     * @param urlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param urlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @return ApiResponse&lt;InlineResponse2014&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2014> configureMessageSendNotifyWithHttpInfo(String fonenumber, String method, String url, String urlUsername, String urlPassword) throws ApiException {
        com.squareup.okhttp.Call call = configureMessageSendNotifyValidateBeforeCall(fonenumber, method, url, urlUsername, urlPassword, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2014>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set Send Callback (asynchronously)
     * Configure the callback URL to notify when a message is sent. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param method Callback URL method (required)
     * @param url Callback URL. See **Notes** for additional information. (required)
     * @param urlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param urlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call configureMessageSendNotifyAsync(String fonenumber, String method, String url, String urlUsername, String urlPassword, final ApiCallback<InlineResponse2014> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = configureMessageSendNotifyValidateBeforeCall(fonenumber, method, url, urlUsername, urlPassword, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2014>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for configureMessageSendNotify_0
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param method Callback URL method (required)
     * @param url Callback URL. See **Notes** for additional information. (required)
     * @param urlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param urlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call configureMessageSendNotify_0Call(String fonenumber, String method, String url, String urlUsername, String urlPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/messages/send_notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fonenumber != null)
        localVarFormParams.put("fonenumber", fonenumber);
        if (method != null)
        localVarFormParams.put("method", method);
        if (url != null)
        localVarFormParams.put("url", url);
        if (urlUsername != null)
        localVarFormParams.put("url_username", urlUsername);
        if (urlPassword != null)
        localVarFormParams.put("url_password", urlPassword);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call configureMessageSendNotify_0ValidateBeforeCall(String fonenumber, String method, String url, String urlUsername, String urlPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fonenumber' is set
        if (fonenumber == null) {
            throw new ApiException("Missing the required parameter 'fonenumber' when calling configureMessageSendNotify_0(Async)");
        }
        
        // verify the required parameter 'method' is set
        if (method == null) {
            throw new ApiException("Missing the required parameter 'method' when calling configureMessageSendNotify_0(Async)");
        }
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling configureMessageSendNotify_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = configureMessageSendNotify_0Call(fonenumber, method, url, urlUsername, urlPassword, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set Send Callback
     * Configure the callback URL to notify when a message is sent. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param method Callback URL method (required)
     * @param url Callback URL. See **Notes** for additional information. (required)
     * @param urlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param urlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @return InlineResponse2014
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2014 configureMessageSendNotify_0(String fonenumber, String method, String url, String urlUsername, String urlPassword) throws ApiException {
        ApiResponse<InlineResponse2014> resp = configureMessageSendNotify_0WithHttpInfo(fonenumber, method, url, urlUsername, urlPassword);
        return resp.getData();
    }

    /**
     * Set Send Callback
     * Configure the callback URL to notify when a message is sent. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param method Callback URL method (required)
     * @param url Callback URL. See **Notes** for additional information. (required)
     * @param urlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param urlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @return ApiResponse&lt;InlineResponse2014&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2014> configureMessageSendNotify_0WithHttpInfo(String fonenumber, String method, String url, String urlUsername, String urlPassword) throws ApiException {
        com.squareup.okhttp.Call call = configureMessageSendNotify_0ValidateBeforeCall(fonenumber, method, url, urlUsername, urlPassword, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2014>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set Send Callback (asynchronously)
     * Configure the callback URL to notify when a message is sent. Each FoneNumber can be configured to use its own callback URL for handling send notifications.
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param method Callback URL method (required)
     * @param url Callback URL. See **Notes** for additional information. (required)
     * @param urlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param urlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call configureMessageSendNotify_0Async(String fonenumber, String method, String url, String urlUsername, String urlPassword, final ApiCallback<InlineResponse2014> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = configureMessageSendNotify_0ValidateBeforeCall(fonenumber, method, url, urlUsername, urlPassword, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2014>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createMessage
     * @param to Receiving 10 digit phone number (required)
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param message Message body (required)
     * @param mediaUrl URL for MMS media (up to 10) (optional)
     * @param confirmationUrl Callback URL for confirmation (optional)
     * @param confirmationUrlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param confirmationUrlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @param requireConfirmation Only send this message if confirmation is available (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createMessageCall(String to, String fonenumber, String message, List<String> mediaUrl, String confirmationUrl, String confirmationUrlUsername, String confirmationUrlPassword, Boolean requireConfirmation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/messages/send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (to != null)
        localVarFormParams.put("to", to);
        if (fonenumber != null)
        localVarFormParams.put("fonenumber", fonenumber);
        if (message != null)
        localVarFormParams.put("message", message);
        if (mediaUrl != null)
        localVarFormParams.put("media_url", mediaUrl);
        if (confirmationUrl != null)
        localVarFormParams.put("confirmation_url", confirmationUrl);
        if (confirmationUrlUsername != null)
        localVarFormParams.put("confirmation_url_username", confirmationUrlUsername);
        if (confirmationUrlPassword != null)
        localVarFormParams.put("confirmation_url_password", confirmationUrlPassword);
        if (requireConfirmation != null)
        localVarFormParams.put("require_confirmation", requireConfirmation);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createMessageValidateBeforeCall(String to, String fonenumber, String message, List<String> mediaUrl, String confirmationUrl, String confirmationUrlUsername, String confirmationUrlPassword, Boolean requireConfirmation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling createMessage(Async)");
        }
        
        // verify the required parameter 'fonenumber' is set
        if (fonenumber == null) {
            throw new ApiException("Missing the required parameter 'fonenumber' when calling createMessage(Async)");
        }
        
        // verify the required parameter 'message' is set
        if (message == null) {
            throw new ApiException("Missing the required parameter 'message' when calling createMessage(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createMessageCall(to, fonenumber, message, mediaUrl, confirmationUrl, confirmationUrlUsername, confirmationUrlPassword, requireConfirmation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Message
     * Send an SMS or MMS message.
     * @param to Receiving 10 digit phone number (required)
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param message Message body (required)
     * @param mediaUrl URL for MMS media (up to 10) (optional)
     * @param confirmationUrl Callback URL for confirmation (optional)
     * @param confirmationUrlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param confirmationUrlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @param requireConfirmation Only send this message if confirmation is available (optional)
     * @return InlineResponse2015
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2015 createMessage(String to, String fonenumber, String message, List<String> mediaUrl, String confirmationUrl, String confirmationUrlUsername, String confirmationUrlPassword, Boolean requireConfirmation) throws ApiException {
        ApiResponse<InlineResponse2015> resp = createMessageWithHttpInfo(to, fonenumber, message, mediaUrl, confirmationUrl, confirmationUrlUsername, confirmationUrlPassword, requireConfirmation);
        return resp.getData();
    }

    /**
     * Create Message
     * Send an SMS or MMS message.
     * @param to Receiving 10 digit phone number (required)
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param message Message body (required)
     * @param mediaUrl URL for MMS media (up to 10) (optional)
     * @param confirmationUrl Callback URL for confirmation (optional)
     * @param confirmationUrlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param confirmationUrlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @param requireConfirmation Only send this message if confirmation is available (optional)
     * @return ApiResponse&lt;InlineResponse2015&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2015> createMessageWithHttpInfo(String to, String fonenumber, String message, List<String> mediaUrl, String confirmationUrl, String confirmationUrlUsername, String confirmationUrlPassword, Boolean requireConfirmation) throws ApiException {
        com.squareup.okhttp.Call call = createMessageValidateBeforeCall(to, fonenumber, message, mediaUrl, confirmationUrl, confirmationUrlUsername, confirmationUrlPassword, requireConfirmation, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2015>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Message (asynchronously)
     * Send an SMS or MMS message.
     * @param to Receiving 10 digit phone number (required)
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param message Message body (required)
     * @param mediaUrl URL for MMS media (up to 10) (optional)
     * @param confirmationUrl Callback URL for confirmation (optional)
     * @param confirmationUrlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param confirmationUrlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @param requireConfirmation Only send this message if confirmation is available (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createMessageAsync(String to, String fonenumber, String message, List<String> mediaUrl, String confirmationUrl, String confirmationUrlUsername, String confirmationUrlPassword, Boolean requireConfirmation, final ApiCallback<InlineResponse2015> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createMessageValidateBeforeCall(to, fonenumber, message, mediaUrl, confirmationUrl, confirmationUrlUsername, confirmationUrlPassword, requireConfirmation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2015>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createMessage_0
     * @param to Receiving 10 digit phone number (required)
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param message Message body (required)
     * @param mediaUrl URL for MMS media (up to 10) (optional)
     * @param confirmationUrl Callback URL for confirmation (optional)
     * @param confirmationUrlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param confirmationUrlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @param requireConfirmation Only send this message if confirmation is available (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createMessage_0Call(String to, String fonenumber, String message, List<String> mediaUrl, String confirmationUrl, String confirmationUrlUsername, String confirmationUrlPassword, Boolean requireConfirmation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/messages/send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (to != null)
        localVarFormParams.put("to", to);
        if (fonenumber != null)
        localVarFormParams.put("fonenumber", fonenumber);
        if (message != null)
        localVarFormParams.put("message", message);
        if (mediaUrl != null)
        localVarFormParams.put("media_url", mediaUrl);
        if (confirmationUrl != null)
        localVarFormParams.put("confirmation_url", confirmationUrl);
        if (confirmationUrlUsername != null)
        localVarFormParams.put("confirmation_url_username", confirmationUrlUsername);
        if (confirmationUrlPassword != null)
        localVarFormParams.put("confirmation_url_password", confirmationUrlPassword);
        if (requireConfirmation != null)
        localVarFormParams.put("require_confirmation", requireConfirmation);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createMessage_0ValidateBeforeCall(String to, String fonenumber, String message, List<String> mediaUrl, String confirmationUrl, String confirmationUrlUsername, String confirmationUrlPassword, Boolean requireConfirmation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling createMessage_0(Async)");
        }
        
        // verify the required parameter 'fonenumber' is set
        if (fonenumber == null) {
            throw new ApiException("Missing the required parameter 'fonenumber' when calling createMessage_0(Async)");
        }
        
        // verify the required parameter 'message' is set
        if (message == null) {
            throw new ApiException("Missing the required parameter 'message' when calling createMessage_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createMessage_0Call(to, fonenumber, message, mediaUrl, confirmationUrl, confirmationUrlUsername, confirmationUrlPassword, requireConfirmation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Message
     * Send an SMS or MMS message.
     * @param to Receiving 10 digit phone number (required)
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param message Message body (required)
     * @param mediaUrl URL for MMS media (up to 10) (optional)
     * @param confirmationUrl Callback URL for confirmation (optional)
     * @param confirmationUrlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param confirmationUrlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @param requireConfirmation Only send this message if confirmation is available (optional)
     * @return InlineResponse2015
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2015 createMessage_0(String to, String fonenumber, String message, List<String> mediaUrl, String confirmationUrl, String confirmationUrlUsername, String confirmationUrlPassword, Boolean requireConfirmation) throws ApiException {
        ApiResponse<InlineResponse2015> resp = createMessage_0WithHttpInfo(to, fonenumber, message, mediaUrl, confirmationUrl, confirmationUrlUsername, confirmationUrlPassword, requireConfirmation);
        return resp.getData();
    }

    /**
     * Create Message
     * Send an SMS or MMS message.
     * @param to Receiving 10 digit phone number (required)
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param message Message body (required)
     * @param mediaUrl URL for MMS media (up to 10) (optional)
     * @param confirmationUrl Callback URL for confirmation (optional)
     * @param confirmationUrlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param confirmationUrlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @param requireConfirmation Only send this message if confirmation is available (optional)
     * @return ApiResponse&lt;InlineResponse2015&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2015> createMessage_0WithHttpInfo(String to, String fonenumber, String message, List<String> mediaUrl, String confirmationUrl, String confirmationUrlUsername, String confirmationUrlPassword, Boolean requireConfirmation) throws ApiException {
        com.squareup.okhttp.Call call = createMessage_0ValidateBeforeCall(to, fonenumber, message, mediaUrl, confirmationUrl, confirmationUrlUsername, confirmationUrlPassword, requireConfirmation, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2015>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Message (asynchronously)
     * Send an SMS or MMS message.
     * @param to Receiving 10 digit phone number (required)
     * @param fonenumber Your FracTEL FoneNumber (required)
     * @param message Message body (required)
     * @param mediaUrl URL for MMS media (up to 10) (optional)
     * @param confirmationUrl Callback URL for confirmation (optional)
     * @param confirmationUrlUsername Username for HTTP **Basic** authentication scheme (optional)
     * @param confirmationUrlPassword Password for HTTP **Basic** authentication scheme (optional)
     * @param requireConfirmation Only send this message if confirmation is available (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createMessage_0Async(String to, String fonenumber, String message, List<String> mediaUrl, String confirmationUrl, String confirmationUrlUsername, String confirmationUrlPassword, Boolean requireConfirmation, final ApiCallback<InlineResponse2015> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createMessage_0ValidateBeforeCall(to, fonenumber, message, mediaUrl, confirmationUrl, confirmationUrlUsername, confirmationUrlPassword, requireConfirmation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2015>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
