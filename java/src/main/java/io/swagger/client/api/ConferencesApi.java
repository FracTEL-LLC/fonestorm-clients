/*
 * FoneStorm API 2.4.0 (Thunder)
 * FracTEL's Middleware API
 *
 * OpenAPI spec version: 2.4.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import io.swagger.client.model.Error;
import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.InlineResponse2002;
import io.swagger.client.model.InlineResponse2013;
import org.joda.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConferencesApi {
    private ApiClient apiClient;

    public ConferencesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConferencesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createConference
     * @param label Label of conference (required)
     * @param startTime Start time and date of conference (optional)
     * @param endTime End time and date of conference (optional)
     * @param fonenumber Fonenumber to use for conference (optional)
     * @param beforeMessage Message to play before conference start time (optional)
     * @param afterMessage Message to play after conference end time (optional)
     * @param maxMembers Maximum number of allowed conference attendees (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createConferenceCall(String label, LocalDate startTime, LocalDate endTime, java.math.BigDecimal fonenumber, String beforeMessage, String afterMessage, BigDecimal maxMembers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/conferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (label != null)
        localVarFormParams.put("label", label);
        if (startTime != null)
        localVarFormParams.put("start_time", startTime);
        if (endTime != null)
        localVarFormParams.put("end_time", endTime);
        if (fonenumber != null)
        localVarFormParams.put("fonenumber", fonenumber);
        if (beforeMessage != null)
        localVarFormParams.put("before_message", beforeMessage);
        if (afterMessage != null)
        localVarFormParams.put("after_message", afterMessage);
        if (maxMembers != null)
        localVarFormParams.put("max_members", maxMembers);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createConferenceValidateBeforeCall(String label, LocalDate startTime, LocalDate endTime, java.math.BigDecimal fonenumber, String beforeMessage, String afterMessage, BigDecimal maxMembers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'label' is set
        if (label == null) {
            throw new ApiException("Missing the required parameter 'label' when calling createConference(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createConferenceCall(label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Conference
     * Create a conference.
     * @param label Label of conference (required)
     * @param startTime Start time and date of conference (optional)
     * @param endTime End time and date of conference (optional)
     * @param fonenumber Fonenumber to use for conference (optional)
     * @param beforeMessage Message to play before conference start time (optional)
     * @param afterMessage Message to play after conference end time (optional)
     * @param maxMembers Maximum number of allowed conference attendees (optional)
     * @return InlineResponse2013
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2013 createConference(String label, LocalDate startTime, LocalDate endTime, java.math.BigDecimal fonenumber, String beforeMessage, String afterMessage, BigDecimal maxMembers) throws ApiException {
        ApiResponse<InlineResponse2013> resp = createConferenceWithHttpInfo(label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers);
        return resp.getData();
    }

    /**
     * Create Conference
     * Create a conference.
     * @param label Label of conference (required)
     * @param startTime Start time and date of conference (optional)
     * @param endTime End time and date of conference (optional)
     * @param fonenumber Fonenumber to use for conference (optional)
     * @param beforeMessage Message to play before conference start time (optional)
     * @param afterMessage Message to play after conference end time (optional)
     * @param maxMembers Maximum number of allowed conference attendees (optional)
     * @return ApiResponse&lt;InlineResponse2013&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2013> createConferenceWithHttpInfo(String label, LocalDate startTime, LocalDate endTime, java.math.BigDecimal fonenumber, String beforeMessage, String afterMessage, BigDecimal maxMembers) throws ApiException {
        com.squareup.okhttp.Call call = createConferenceValidateBeforeCall(label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2013>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Conference (asynchronously)
     * Create a conference.
     * @param label Label of conference (required)
     * @param startTime Start time and date of conference (optional)
     * @param endTime End time and date of conference (optional)
     * @param fonenumber Fonenumber to use for conference (optional)
     * @param beforeMessage Message to play before conference start time (optional)
     * @param afterMessage Message to play after conference end time (optional)
     * @param maxMembers Maximum number of allowed conference attendees (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createConferenceAsync(String label, LocalDate startTime, LocalDate endTime, java.math.BigDecimal fonenumber, String beforeMessage, String afterMessage, BigDecimal maxMembers, final ApiCallback<InlineResponse2013> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createConferenceValidateBeforeCall(label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2013>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createConference_0
     * @param label Label of conference (required)
     * @param startTime Start time and date of conference (optional)
     * @param endTime End time and date of conference (optional)
     * @param fonenumber Fonenumber to use for conference (optional)
     * @param beforeMessage Message to play before conference start time (optional)
     * @param afterMessage Message to play after conference end time (optional)
     * @param maxMembers Maximum number of allowed conference attendees (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createConference_0Call(String label, LocalDate startTime, LocalDate endTime, java.math.BigDecimal fonenumber, String beforeMessage, String afterMessage, BigDecimal maxMembers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/conferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (label != null)
        localVarFormParams.put("label", label);
        if (startTime != null)
        localVarFormParams.put("start_time", startTime);
        if (endTime != null)
        localVarFormParams.put("end_time", endTime);
        if (fonenumber != null)
        localVarFormParams.put("fonenumber", fonenumber);
        if (beforeMessage != null)
        localVarFormParams.put("before_message", beforeMessage);
        if (afterMessage != null)
        localVarFormParams.put("after_message", afterMessage);
        if (maxMembers != null)
        localVarFormParams.put("max_members", maxMembers);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createConference_0ValidateBeforeCall(String label, LocalDate startTime, LocalDate endTime, java.math.BigDecimal fonenumber, String beforeMessage, String afterMessage, BigDecimal maxMembers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'label' is set
        if (label == null) {
            throw new ApiException("Missing the required parameter 'label' when calling createConference_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createConference_0Call(label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Conference
     * Create a conference.
     * @param label Label of conference (required)
     * @param startTime Start time and date of conference (optional)
     * @param endTime End time and date of conference (optional)
     * @param fonenumber Fonenumber to use for conference (optional)
     * @param beforeMessage Message to play before conference start time (optional)
     * @param afterMessage Message to play after conference end time (optional)
     * @param maxMembers Maximum number of allowed conference attendees (optional)
     * @return InlineResponse2013
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2013 createConference_0(String label, LocalDate startTime, LocalDate endTime, java.math.BigDecimal fonenumber, String beforeMessage, String afterMessage, BigDecimal maxMembers) throws ApiException {
        ApiResponse<InlineResponse2013> resp = createConference_0WithHttpInfo(label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers);
        return resp.getData();
    }

    /**
     * Create Conference
     * Create a conference.
     * @param label Label of conference (required)
     * @param startTime Start time and date of conference (optional)
     * @param endTime End time and date of conference (optional)
     * @param fonenumber Fonenumber to use for conference (optional)
     * @param beforeMessage Message to play before conference start time (optional)
     * @param afterMessage Message to play after conference end time (optional)
     * @param maxMembers Maximum number of allowed conference attendees (optional)
     * @return ApiResponse&lt;InlineResponse2013&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2013> createConference_0WithHttpInfo(String label, LocalDate startTime, LocalDate endTime, java.math.BigDecimal fonenumber, String beforeMessage, String afterMessage, BigDecimal maxMembers) throws ApiException {
        com.squareup.okhttp.Call call = createConference_0ValidateBeforeCall(label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2013>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Conference (asynchronously)
     * Create a conference.
     * @param label Label of conference (required)
     * @param startTime Start time and date of conference (optional)
     * @param endTime End time and date of conference (optional)
     * @param fonenumber Fonenumber to use for conference (optional)
     * @param beforeMessage Message to play before conference start time (optional)
     * @param afterMessage Message to play after conference end time (optional)
     * @param maxMembers Maximum number of allowed conference attendees (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createConference_0Async(String label, LocalDate startTime, LocalDate endTime, java.math.BigDecimal fonenumber, String beforeMessage, String afterMessage, BigDecimal maxMembers, final ApiCallback<InlineResponse2013> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createConference_0ValidateBeforeCall(label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2013>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteConference
     * @param id Conference id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteConferenceCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/conferences/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteConferenceValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteConference(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteConferenceCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Conference
     * Delete a conference.
     * @param id Conference id (required)
     * @return InlineResponse2013
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2013 deleteConference(String id) throws ApiException {
        ApiResponse<InlineResponse2013> resp = deleteConferenceWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Delete Conference
     * Delete a conference.
     * @param id Conference id (required)
     * @return ApiResponse&lt;InlineResponse2013&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2013> deleteConferenceWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteConferenceValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2013>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Conference (asynchronously)
     * Delete a conference.
     * @param id Conference id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteConferenceAsync(String id, final ApiCallback<InlineResponse2013> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteConferenceValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2013>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteConference_0
     * @param id Conference id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteConference_0Call(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/conferences/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteConference_0ValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteConference_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteConference_0Call(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Conference
     * Delete a conference.
     * @param id Conference id (required)
     * @return InlineResponse2013
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2013 deleteConference_0(String id) throws ApiException {
        ApiResponse<InlineResponse2013> resp = deleteConference_0WithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Delete Conference
     * Delete a conference.
     * @param id Conference id (required)
     * @return ApiResponse&lt;InlineResponse2013&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2013> deleteConference_0WithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteConference_0ValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2013>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Conference (asynchronously)
     * Delete a conference.
     * @param id Conference id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteConference_0Async(String id, final ApiCallback<InlineResponse2013> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteConference_0ValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2013>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConference
     * @param id Conference id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConferenceCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/conferences/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConferenceValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getConference(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getConferenceCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Conference
     * Get information about a conference.
     * @param id Conference id (required)
     * @return InlineResponse2013
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2013 getConference(String id) throws ApiException {
        ApiResponse<InlineResponse2013> resp = getConferenceWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Conference
     * Get information about a conference.
     * @param id Conference id (required)
     * @return ApiResponse&lt;InlineResponse2013&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2013> getConferenceWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getConferenceValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2013>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Conference (asynchronously)
     * Get information about a conference.
     * @param id Conference id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConferenceAsync(String id, final ApiCallback<InlineResponse2013> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConferenceValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2013>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConferenceFonenumbers
     * @param id Conference id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConferenceFonenumbersCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/conferences/{id}/fonenumbers"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConferenceFonenumbersValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getConferenceFonenumbers(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getConferenceFonenumbersCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Conference Fonenumbers
     * Get fonenumbers assigned to a conference.
     * @param id Conference id (required)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2002 getConferenceFonenumbers(String id) throws ApiException {
        ApiResponse<InlineResponse2002> resp = getConferenceFonenumbersWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Conference Fonenumbers
     * Get fonenumbers assigned to a conference.
     * @param id Conference id (required)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2002> getConferenceFonenumbersWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getConferenceFonenumbersValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Conference Fonenumbers (asynchronously)
     * Get fonenumbers assigned to a conference.
     * @param id Conference id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConferenceFonenumbersAsync(String id, final ApiCallback<InlineResponse2002> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConferenceFonenumbersValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConferenceFonenumbers_0
     * @param id Conference id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConferenceFonenumbers_0Call(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/conferences/{id}/fonenumbers"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConferenceFonenumbers_0ValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getConferenceFonenumbers_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getConferenceFonenumbers_0Call(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Conference Fonenumbers
     * Get fonenumbers assigned to a conference.
     * @param id Conference id (required)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2002 getConferenceFonenumbers_0(String id) throws ApiException {
        ApiResponse<InlineResponse2002> resp = getConferenceFonenumbers_0WithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Conference Fonenumbers
     * Get fonenumbers assigned to a conference.
     * @param id Conference id (required)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2002> getConferenceFonenumbers_0WithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getConferenceFonenumbers_0ValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Conference Fonenumbers (asynchronously)
     * Get fonenumbers assigned to a conference.
     * @param id Conference id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConferenceFonenumbers_0Async(String id, final ApiCallback<InlineResponse2002> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConferenceFonenumbers_0ValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConference_0
     * @param id Conference id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConference_0Call(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/conferences/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConference_0ValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getConference_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getConference_0Call(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Conference
     * Get information about a conference.
     * @param id Conference id (required)
     * @return InlineResponse2013
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2013 getConference_0(String id) throws ApiException {
        ApiResponse<InlineResponse2013> resp = getConference_0WithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Conference
     * Get information about a conference.
     * @param id Conference id (required)
     * @return ApiResponse&lt;InlineResponse2013&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2013> getConference_0WithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getConference_0ValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2013>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Conference (asynchronously)
     * Get information about a conference.
     * @param id Conference id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConference_0Async(String id, final ApiCallback<InlineResponse2013> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConference_0ValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2013>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConferences
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConferencesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/conferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConferencesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getConferencesCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Conferences
     * Get a list of all conferences.
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 getConferences() throws ApiException {
        ApiResponse<InlineResponse200> resp = getConferencesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get Conferences
     * Get a list of all conferences.
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> getConferencesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getConferencesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Conferences (asynchronously)
     * Get a list of all conferences.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConferencesAsync(final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConferencesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConferences_0
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConferences_0Call(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/conferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConferences_0ValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getConferences_0Call(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Conferences
     * Get a list of all conferences.
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 getConferences_0() throws ApiException {
        ApiResponse<InlineResponse200> resp = getConferences_0WithHttpInfo();
        return resp.getData();
    }

    /**
     * Get Conferences
     * Get a list of all conferences.
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> getConferences_0WithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getConferences_0ValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Conferences (asynchronously)
     * Get a list of all conferences.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConferences_0Async(final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConferences_0ValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateConference
     * @param id Conference id (required)
     * @param label Label of conference (optional)
     * @param startTime Start time and date of conference (optional)
     * @param endTime End time and date of conference (optional)
     * @param fonenumber Fonenumber to use for conference (optional)
     * @param beforeMessage Message to play before conference start time (optional)
     * @param afterMessage Message to play after conference end time (optional)
     * @param maxMembers Maximum number of allowed conference attendees (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateConferenceCall(String id, String label, LocalDate startTime, LocalDate endTime, java.math.BigDecimal fonenumber, String beforeMessage, String afterMessage, BigDecimal maxMembers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/conferences/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (label != null)
        localVarFormParams.put("label", label);
        if (startTime != null)
        localVarFormParams.put("start_time", startTime);
        if (endTime != null)
        localVarFormParams.put("end_time", endTime);
        if (fonenumber != null)
        localVarFormParams.put("fonenumber", fonenumber);
        if (beforeMessage != null)
        localVarFormParams.put("before_message", beforeMessage);
        if (afterMessage != null)
        localVarFormParams.put("after_message", afterMessage);
        if (maxMembers != null)
        localVarFormParams.put("max_members", maxMembers);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateConferenceValidateBeforeCall(String id, String label, LocalDate startTime, LocalDate endTime, java.math.BigDecimal fonenumber, String beforeMessage, String afterMessage, BigDecimal maxMembers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateConference(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateConferenceCall(id, label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Conference
     * Update a conference.
     * @param id Conference id (required)
     * @param label Label of conference (optional)
     * @param startTime Start time and date of conference (optional)
     * @param endTime End time and date of conference (optional)
     * @param fonenumber Fonenumber to use for conference (optional)
     * @param beforeMessage Message to play before conference start time (optional)
     * @param afterMessage Message to play after conference end time (optional)
     * @param maxMembers Maximum number of allowed conference attendees (optional)
     * @return InlineResponse2013
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2013 updateConference(String id, String label, LocalDate startTime, LocalDate endTime, java.math.BigDecimal fonenumber, String beforeMessage, String afterMessage, BigDecimal maxMembers) throws ApiException {
        ApiResponse<InlineResponse2013> resp = updateConferenceWithHttpInfo(id, label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers);
        return resp.getData();
    }

    /**
     * Update Conference
     * Update a conference.
     * @param id Conference id (required)
     * @param label Label of conference (optional)
     * @param startTime Start time and date of conference (optional)
     * @param endTime End time and date of conference (optional)
     * @param fonenumber Fonenumber to use for conference (optional)
     * @param beforeMessage Message to play before conference start time (optional)
     * @param afterMessage Message to play after conference end time (optional)
     * @param maxMembers Maximum number of allowed conference attendees (optional)
     * @return ApiResponse&lt;InlineResponse2013&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2013> updateConferenceWithHttpInfo(String id, String label, LocalDate startTime, LocalDate endTime, java.math.BigDecimal fonenumber, String beforeMessage, String afterMessage, BigDecimal maxMembers) throws ApiException {
        com.squareup.okhttp.Call call = updateConferenceValidateBeforeCall(id, label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2013>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Conference (asynchronously)
     * Update a conference.
     * @param id Conference id (required)
     * @param label Label of conference (optional)
     * @param startTime Start time and date of conference (optional)
     * @param endTime End time and date of conference (optional)
     * @param fonenumber Fonenumber to use for conference (optional)
     * @param beforeMessage Message to play before conference start time (optional)
     * @param afterMessage Message to play after conference end time (optional)
     * @param maxMembers Maximum number of allowed conference attendees (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateConferenceAsync(String id, String label, LocalDate startTime, LocalDate endTime, java.math.BigDecimal fonenumber, String beforeMessage, String afterMessage, BigDecimal maxMembers, final ApiCallback<InlineResponse2013> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateConferenceValidateBeforeCall(id, label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2013>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateConference_0
     * @param id Conference id (required)
     * @param label Label of conference (optional)
     * @param startTime Start time and date of conference (optional)
     * @param endTime End time and date of conference (optional)
     * @param fonenumber Fonenumber to use for conference (optional)
     * @param beforeMessage Message to play before conference start time (optional)
     * @param afterMessage Message to play after conference end time (optional)
     * @param maxMembers Maximum number of allowed conference attendees (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateConference_0Call(String id, String label, LocalDate startTime, LocalDate endTime, java.math.BigDecimal fonenumber, String beforeMessage, String afterMessage, BigDecimal maxMembers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/conferences/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (label != null)
        localVarFormParams.put("label", label);
        if (startTime != null)
        localVarFormParams.put("start_time", startTime);
        if (endTime != null)
        localVarFormParams.put("end_time", endTime);
        if (fonenumber != null)
        localVarFormParams.put("fonenumber", fonenumber);
        if (beforeMessage != null)
        localVarFormParams.put("before_message", beforeMessage);
        if (afterMessage != null)
        localVarFormParams.put("after_message", afterMessage);
        if (maxMembers != null)
        localVarFormParams.put("max_members", maxMembers);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateConference_0ValidateBeforeCall(String id, String label, LocalDate startTime, LocalDate endTime, java.math.BigDecimal fonenumber, String beforeMessage, String afterMessage, BigDecimal maxMembers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateConference_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateConference_0Call(id, label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Conference
     * Update a conference.
     * @param id Conference id (required)
     * @param label Label of conference (optional)
     * @param startTime Start time and date of conference (optional)
     * @param endTime End time and date of conference (optional)
     * @param fonenumber Fonenumber to use for conference (optional)
     * @param beforeMessage Message to play before conference start time (optional)
     * @param afterMessage Message to play after conference end time (optional)
     * @param maxMembers Maximum number of allowed conference attendees (optional)
     * @return InlineResponse2013
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2013 updateConference_0(String id, String label, LocalDate startTime, LocalDate endTime, java.math.BigDecimal fonenumber, String beforeMessage, String afterMessage, BigDecimal maxMembers) throws ApiException {
        ApiResponse<InlineResponse2013> resp = updateConference_0WithHttpInfo(id, label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers);
        return resp.getData();
    }

    /**
     * Update Conference
     * Update a conference.
     * @param id Conference id (required)
     * @param label Label of conference (optional)
     * @param startTime Start time and date of conference (optional)
     * @param endTime End time and date of conference (optional)
     * @param fonenumber Fonenumber to use for conference (optional)
     * @param beforeMessage Message to play before conference start time (optional)
     * @param afterMessage Message to play after conference end time (optional)
     * @param maxMembers Maximum number of allowed conference attendees (optional)
     * @return ApiResponse&lt;InlineResponse2013&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2013> updateConference_0WithHttpInfo(String id, String label, LocalDate startTime, LocalDate endTime, java.math.BigDecimal fonenumber, String beforeMessage, String afterMessage, BigDecimal maxMembers) throws ApiException {
        com.squareup.okhttp.Call call = updateConference_0ValidateBeforeCall(id, label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2013>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Conference (asynchronously)
     * Update a conference.
     * @param id Conference id (required)
     * @param label Label of conference (optional)
     * @param startTime Start time and date of conference (optional)
     * @param endTime End time and date of conference (optional)
     * @param fonenumber Fonenumber to use for conference (optional)
     * @param beforeMessage Message to play before conference start time (optional)
     * @param afterMessage Message to play after conference end time (optional)
     * @param maxMembers Maximum number of allowed conference attendees (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateConference_0Async(String id, String label, LocalDate startTime, LocalDate endTime, java.math.BigDecimal fonenumber, String beforeMessage, String afterMessage, BigDecimal maxMembers, final ApiCallback<InlineResponse2013> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateConference_0ValidateBeforeCall(id, label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2013>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
