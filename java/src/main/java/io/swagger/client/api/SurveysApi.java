/*
 * FoneStorm API 2.4.0 (Thunder)
 * FracTEL's Middleware API
 *
 * OpenAPI spec version: 2.4.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.InlineResponse20013;
import io.swagger.client.model.InlineResponse20014;
import io.swagger.client.model.InlineResponse20016;
import io.swagger.client.model.InlineResponse2003;
import io.swagger.client.model.InlineResponse2004;
import io.swagger.client.model.InlineResponse20115;
import io.swagger.client.model.InlineResponse20116;
import io.swagger.client.model.InlineResponse20117;
import io.swagger.client.model.InlineResponse2016;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SurveysApi {
    private ApiClient apiClient;

    public SurveysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SurveysApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createSurvey
     * @param title Survey title (required)
     * @param contacts Survey contact ids (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSurveyCall(String title, List<String> contacts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (title != null)
        localVarFormParams.put("title", title);
        if (contacts != null)
        localVarFormParams.put("contacts", contacts);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSurveyValidateBeforeCall(String title, List<String> contacts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'title' is set
        if (title == null) {
            throw new ApiException("Missing the required parameter 'title' when calling createSurvey(Async)");
        }
        
        // verify the required parameter 'contacts' is set
        if (contacts == null) {
            throw new ApiException("Missing the required parameter 'contacts' when calling createSurvey(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createSurveyCall(title, contacts, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Survey
     * Create a survey.
     * @param title Survey title (required)
     * @param contacts Survey contact ids (required)
     * @return InlineResponse2016
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2016 createSurvey(String title, List<String> contacts) throws ApiException {
        ApiResponse<InlineResponse2016> resp = createSurveyWithHttpInfo(title, contacts);
        return resp.getData();
    }

    /**
     * Create Survey
     * Create a survey.
     * @param title Survey title (required)
     * @param contacts Survey contact ids (required)
     * @return ApiResponse&lt;InlineResponse2016&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2016> createSurveyWithHttpInfo(String title, List<String> contacts) throws ApiException {
        com.squareup.okhttp.Call call = createSurveyValidateBeforeCall(title, contacts, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2016>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Survey (asynchronously)
     * Create a survey.
     * @param title Survey title (required)
     * @param contacts Survey contact ids (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSurveyAsync(String title, List<String> contacts, final ApiCallback<InlineResponse2016> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSurveyValidateBeforeCall(title, contacts, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2016>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSurveyQuestion
     * @param id Survey id (required)
     * @param question Question prompt (required)
     * @param attributeName Attribute name used to identify this information (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSurveyQuestionCall(String id, String question, String attributeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys/{id}/questions"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (question != null)
        localVarFormParams.put("question", question);
        if (attributeName != null)
        localVarFormParams.put("attribute_name", attributeName);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSurveyQuestionValidateBeforeCall(String id, String question, String attributeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createSurveyQuestion(Async)");
        }
        
        // verify the required parameter 'question' is set
        if (question == null) {
            throw new ApiException("Missing the required parameter 'question' when calling createSurveyQuestion(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createSurveyQuestionCall(id, question, attributeName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Survey Question
     * Create a question in a given survey.
     * @param id Survey id (required)
     * @param question Question prompt (required)
     * @param attributeName Attribute name used to identify this information (optional)
     * @return InlineResponse20115
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20115 createSurveyQuestion(String id, String question, String attributeName) throws ApiException {
        ApiResponse<InlineResponse20115> resp = createSurveyQuestionWithHttpInfo(id, question, attributeName);
        return resp.getData();
    }

    /**
     * Create Survey Question
     * Create a question in a given survey.
     * @param id Survey id (required)
     * @param question Question prompt (required)
     * @param attributeName Attribute name used to identify this information (optional)
     * @return ApiResponse&lt;InlineResponse20115&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20115> createSurveyQuestionWithHttpInfo(String id, String question, String attributeName) throws ApiException {
        com.squareup.okhttp.Call call = createSurveyQuestionValidateBeforeCall(id, question, attributeName, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20115>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Survey Question (asynchronously)
     * Create a question in a given survey.
     * @param id Survey id (required)
     * @param question Question prompt (required)
     * @param attributeName Attribute name used to identify this information (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSurveyQuestionAsync(String id, String question, String attributeName, final ApiCallback<InlineResponse20115> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSurveyQuestionValidateBeforeCall(id, question, attributeName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20115>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSurveyQuestionChoice
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param type Input field label (required)
     * @param label Input field label (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSurveyQuestionChoiceCall(String id, String qid, String type, String label, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys/{id}/questions/{qid}/choices"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "qid" + "\\}", apiClient.escapeString(qid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (type != null)
        localVarFormParams.put("type", type);
        if (label != null)
        localVarFormParams.put("label", label);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSurveyQuestionChoiceValidateBeforeCall(String id, String qid, String type, String label, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createSurveyQuestionChoice(Async)");
        }
        
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling createSurveyQuestionChoice(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling createSurveyQuestionChoice(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createSurveyQuestionChoiceCall(id, qid, type, label, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Survey Question Choice
     * Create a question choice for a given survey question.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param type Input field label (required)
     * @param label Input field label (optional)
     * @return InlineResponse20117
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20117 createSurveyQuestionChoice(String id, String qid, String type, String label) throws ApiException {
        ApiResponse<InlineResponse20117> resp = createSurveyQuestionChoiceWithHttpInfo(id, qid, type, label);
        return resp.getData();
    }

    /**
     * Create Survey Question Choice
     * Create a question choice for a given survey question.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param type Input field label (required)
     * @param label Input field label (optional)
     * @return ApiResponse&lt;InlineResponse20117&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20117> createSurveyQuestionChoiceWithHttpInfo(String id, String qid, String type, String label) throws ApiException {
        com.squareup.okhttp.Call call = createSurveyQuestionChoiceValidateBeforeCall(id, qid, type, label, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20117>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Survey Question Choice (asynchronously)
     * Create a question choice for a given survey question.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param type Input field label (required)
     * @param label Input field label (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSurveyQuestionChoiceAsync(String id, String qid, String type, String label, final ApiCallback<InlineResponse20117> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSurveyQuestionChoiceValidateBeforeCall(id, qid, type, label, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20117>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSurveyQuestionChoice_0
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param type Input field label (required)
     * @param label Input field label (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSurveyQuestionChoice_0Call(String id, String qid, String type, String label, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys/{id}/questions/{qid}/choices"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "qid" + "\\}", apiClient.escapeString(qid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (type != null)
        localVarFormParams.put("type", type);
        if (label != null)
        localVarFormParams.put("label", label);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSurveyQuestionChoice_0ValidateBeforeCall(String id, String qid, String type, String label, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createSurveyQuestionChoice_0(Async)");
        }
        
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling createSurveyQuestionChoice_0(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling createSurveyQuestionChoice_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createSurveyQuestionChoice_0Call(id, qid, type, label, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Survey Question Choice
     * Create a question choice for a given survey question.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param type Input field label (required)
     * @param label Input field label (optional)
     * @return InlineResponse20117
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20117 createSurveyQuestionChoice_0(String id, String qid, String type, String label) throws ApiException {
        ApiResponse<InlineResponse20117> resp = createSurveyQuestionChoice_0WithHttpInfo(id, qid, type, label);
        return resp.getData();
    }

    /**
     * Create Survey Question Choice
     * Create a question choice for a given survey question.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param type Input field label (required)
     * @param label Input field label (optional)
     * @return ApiResponse&lt;InlineResponse20117&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20117> createSurveyQuestionChoice_0WithHttpInfo(String id, String qid, String type, String label) throws ApiException {
        com.squareup.okhttp.Call call = createSurveyQuestionChoice_0ValidateBeforeCall(id, qid, type, label, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20117>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Survey Question Choice (asynchronously)
     * Create a question choice for a given survey question.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param type Input field label (required)
     * @param label Input field label (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSurveyQuestionChoice_0Async(String id, String qid, String type, String label, final ApiCallback<InlineResponse20117> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSurveyQuestionChoice_0ValidateBeforeCall(id, qid, type, label, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20117>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSurveyQuestion_0
     * @param id Survey id (required)
     * @param question Question prompt (required)
     * @param attributeName Attribute name used to identify this information (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSurveyQuestion_0Call(String id, String question, String attributeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys/{id}/questions"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (question != null)
        localVarFormParams.put("question", question);
        if (attributeName != null)
        localVarFormParams.put("attribute_name", attributeName);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSurveyQuestion_0ValidateBeforeCall(String id, String question, String attributeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createSurveyQuestion_0(Async)");
        }
        
        // verify the required parameter 'question' is set
        if (question == null) {
            throw new ApiException("Missing the required parameter 'question' when calling createSurveyQuestion_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createSurveyQuestion_0Call(id, question, attributeName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Survey Question
     * Create a question in a given survey.
     * @param id Survey id (required)
     * @param question Question prompt (required)
     * @param attributeName Attribute name used to identify this information (optional)
     * @return InlineResponse20115
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20115 createSurveyQuestion_0(String id, String question, String attributeName) throws ApiException {
        ApiResponse<InlineResponse20115> resp = createSurveyQuestion_0WithHttpInfo(id, question, attributeName);
        return resp.getData();
    }

    /**
     * Create Survey Question
     * Create a question in a given survey.
     * @param id Survey id (required)
     * @param question Question prompt (required)
     * @param attributeName Attribute name used to identify this information (optional)
     * @return ApiResponse&lt;InlineResponse20115&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20115> createSurveyQuestion_0WithHttpInfo(String id, String question, String attributeName) throws ApiException {
        com.squareup.okhttp.Call call = createSurveyQuestion_0ValidateBeforeCall(id, question, attributeName, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20115>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Survey Question (asynchronously)
     * Create a question in a given survey.
     * @param id Survey id (required)
     * @param question Question prompt (required)
     * @param attributeName Attribute name used to identify this information (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSurveyQuestion_0Async(String id, String question, String attributeName, final ApiCallback<InlineResponse20115> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSurveyQuestion_0ValidateBeforeCall(id, question, attributeName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20115>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSurveyResponse
     * @param id Survey id (required)
     * @param questionId Question id (required)
     * @param choiceId Choice id (required)
     * @param contactId Contact id (required)
     * @param answer Answer for contact survey question choice (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSurveyResponseCall(String id, String questionId, String choiceId, String contactId, String answer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys/{id}/responses"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (questionId != null)
        localVarFormParams.put("question_id", questionId);
        if (choiceId != null)
        localVarFormParams.put("choice_id", choiceId);
        if (contactId != null)
        localVarFormParams.put("contact_id", contactId);
        if (answer != null)
        localVarFormParams.put("answer", answer);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSurveyResponseValidateBeforeCall(String id, String questionId, String choiceId, String contactId, String answer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createSurveyResponse(Async)");
        }
        
        // verify the required parameter 'questionId' is set
        if (questionId == null) {
            throw new ApiException("Missing the required parameter 'questionId' when calling createSurveyResponse(Async)");
        }
        
        // verify the required parameter 'choiceId' is set
        if (choiceId == null) {
            throw new ApiException("Missing the required parameter 'choiceId' when calling createSurveyResponse(Async)");
        }
        
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling createSurveyResponse(Async)");
        }
        
        // verify the required parameter 'answer' is set
        if (answer == null) {
            throw new ApiException("Missing the required parameter 'answer' when calling createSurveyResponse(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createSurveyResponseCall(id, questionId, choiceId, contactId, answer, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Survey Response
     * Create a response in a given survey.
     * @param id Survey id (required)
     * @param questionId Question id (required)
     * @param choiceId Choice id (required)
     * @param contactId Contact id (required)
     * @param answer Answer for contact survey question choice (required)
     * @return InlineResponse20116
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20116 createSurveyResponse(String id, String questionId, String choiceId, String contactId, String answer) throws ApiException {
        ApiResponse<InlineResponse20116> resp = createSurveyResponseWithHttpInfo(id, questionId, choiceId, contactId, answer);
        return resp.getData();
    }

    /**
     * Create Survey Response
     * Create a response in a given survey.
     * @param id Survey id (required)
     * @param questionId Question id (required)
     * @param choiceId Choice id (required)
     * @param contactId Contact id (required)
     * @param answer Answer for contact survey question choice (required)
     * @return ApiResponse&lt;InlineResponse20116&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20116> createSurveyResponseWithHttpInfo(String id, String questionId, String choiceId, String contactId, String answer) throws ApiException {
        com.squareup.okhttp.Call call = createSurveyResponseValidateBeforeCall(id, questionId, choiceId, contactId, answer, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20116>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Survey Response (asynchronously)
     * Create a response in a given survey.
     * @param id Survey id (required)
     * @param questionId Question id (required)
     * @param choiceId Choice id (required)
     * @param contactId Contact id (required)
     * @param answer Answer for contact survey question choice (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSurveyResponseAsync(String id, String questionId, String choiceId, String contactId, String answer, final ApiCallback<InlineResponse20116> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSurveyResponseValidateBeforeCall(id, questionId, choiceId, contactId, answer, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20116>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSurveyResponse_0
     * @param id Survey id (required)
     * @param questionId Question id (required)
     * @param choiceId Choice id (required)
     * @param contactId Contact id (required)
     * @param answer Answer for contact survey question choice (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSurveyResponse_0Call(String id, String questionId, String choiceId, String contactId, String answer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys/{id}/responses"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (questionId != null)
        localVarFormParams.put("question_id", questionId);
        if (choiceId != null)
        localVarFormParams.put("choice_id", choiceId);
        if (contactId != null)
        localVarFormParams.put("contact_id", contactId);
        if (answer != null)
        localVarFormParams.put("answer", answer);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSurveyResponse_0ValidateBeforeCall(String id, String questionId, String choiceId, String contactId, String answer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createSurveyResponse_0(Async)");
        }
        
        // verify the required parameter 'questionId' is set
        if (questionId == null) {
            throw new ApiException("Missing the required parameter 'questionId' when calling createSurveyResponse_0(Async)");
        }
        
        // verify the required parameter 'choiceId' is set
        if (choiceId == null) {
            throw new ApiException("Missing the required parameter 'choiceId' when calling createSurveyResponse_0(Async)");
        }
        
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling createSurveyResponse_0(Async)");
        }
        
        // verify the required parameter 'answer' is set
        if (answer == null) {
            throw new ApiException("Missing the required parameter 'answer' when calling createSurveyResponse_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createSurveyResponse_0Call(id, questionId, choiceId, contactId, answer, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Survey Response
     * Create a response in a given survey.
     * @param id Survey id (required)
     * @param questionId Question id (required)
     * @param choiceId Choice id (required)
     * @param contactId Contact id (required)
     * @param answer Answer for contact survey question choice (required)
     * @return InlineResponse20116
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20116 createSurveyResponse_0(String id, String questionId, String choiceId, String contactId, String answer) throws ApiException {
        ApiResponse<InlineResponse20116> resp = createSurveyResponse_0WithHttpInfo(id, questionId, choiceId, contactId, answer);
        return resp.getData();
    }

    /**
     * Create Survey Response
     * Create a response in a given survey.
     * @param id Survey id (required)
     * @param questionId Question id (required)
     * @param choiceId Choice id (required)
     * @param contactId Contact id (required)
     * @param answer Answer for contact survey question choice (required)
     * @return ApiResponse&lt;InlineResponse20116&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20116> createSurveyResponse_0WithHttpInfo(String id, String questionId, String choiceId, String contactId, String answer) throws ApiException {
        com.squareup.okhttp.Call call = createSurveyResponse_0ValidateBeforeCall(id, questionId, choiceId, contactId, answer, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20116>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Survey Response (asynchronously)
     * Create a response in a given survey.
     * @param id Survey id (required)
     * @param questionId Question id (required)
     * @param choiceId Choice id (required)
     * @param contactId Contact id (required)
     * @param answer Answer for contact survey question choice (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSurveyResponse_0Async(String id, String questionId, String choiceId, String contactId, String answer, final ApiCallback<InlineResponse20116> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSurveyResponse_0ValidateBeforeCall(id, questionId, choiceId, contactId, answer, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20116>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSurvey_0
     * @param title Survey title (required)
     * @param contacts Survey contact ids (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSurvey_0Call(String title, List<String> contacts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (title != null)
        localVarFormParams.put("title", title);
        if (contacts != null)
        localVarFormParams.put("contacts", contacts);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSurvey_0ValidateBeforeCall(String title, List<String> contacts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'title' is set
        if (title == null) {
            throw new ApiException("Missing the required parameter 'title' when calling createSurvey_0(Async)");
        }
        
        // verify the required parameter 'contacts' is set
        if (contacts == null) {
            throw new ApiException("Missing the required parameter 'contacts' when calling createSurvey_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createSurvey_0Call(title, contacts, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Survey
     * Create a survey.
     * @param title Survey title (required)
     * @param contacts Survey contact ids (required)
     * @return InlineResponse2016
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2016 createSurvey_0(String title, List<String> contacts) throws ApiException {
        ApiResponse<InlineResponse2016> resp = createSurvey_0WithHttpInfo(title, contacts);
        return resp.getData();
    }

    /**
     * Create Survey
     * Create a survey.
     * @param title Survey title (required)
     * @param contacts Survey contact ids (required)
     * @return ApiResponse&lt;InlineResponse2016&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2016> createSurvey_0WithHttpInfo(String title, List<String> contacts) throws ApiException {
        com.squareup.okhttp.Call call = createSurvey_0ValidateBeforeCall(title, contacts, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2016>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Survey (asynchronously)
     * Create a survey.
     * @param title Survey title (required)
     * @param contacts Survey contact ids (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSurvey_0Async(String title, List<String> contacts, final ApiCallback<InlineResponse2016> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSurvey_0ValidateBeforeCall(title, contacts, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2016>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteSurvey
     * @param id Survey id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSurveyCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSurveyValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteSurvey(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteSurveyCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Survey
     * Delete a survey.
     * @param id Survey id (required)
     * @return InlineResponse2016
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2016 deleteSurvey(String id) throws ApiException {
        ApiResponse<InlineResponse2016> resp = deleteSurveyWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Delete Survey
     * Delete a survey.
     * @param id Survey id (required)
     * @return ApiResponse&lt;InlineResponse2016&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2016> deleteSurveyWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteSurveyValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2016>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Survey (asynchronously)
     * Delete a survey.
     * @param id Survey id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSurveyAsync(String id, final ApiCallback<InlineResponse2016> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSurveyValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2016>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteSurveyQuestion
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSurveyQuestionCall(String id, String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys/{id}/questions/{qid}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "qid" + "\\}", apiClient.escapeString(qid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSurveyQuestionValidateBeforeCall(String id, String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteSurveyQuestion(Async)");
        }
        
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling deleteSurveyQuestion(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteSurveyQuestionCall(id, qid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Survey Question
     * Delete a question from a given survey.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @return InlineResponse20115
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20115 deleteSurveyQuestion(String id, String qid) throws ApiException {
        ApiResponse<InlineResponse20115> resp = deleteSurveyQuestionWithHttpInfo(id, qid);
        return resp.getData();
    }

    /**
     * Delete Survey Question
     * Delete a question from a given survey.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @return ApiResponse&lt;InlineResponse20115&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20115> deleteSurveyQuestionWithHttpInfo(String id, String qid) throws ApiException {
        com.squareup.okhttp.Call call = deleteSurveyQuestionValidateBeforeCall(id, qid, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20115>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Survey Question (asynchronously)
     * Delete a question from a given survey.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSurveyQuestionAsync(String id, String qid, final ApiCallback<InlineResponse20115> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSurveyQuestionValidateBeforeCall(id, qid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20115>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteSurveyQuestionChoice
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param cid Choice id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSurveyQuestionChoiceCall(String id, String qid, String cid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys/{id}/questions/{qid}/choices/{cid}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "qid" + "\\}", apiClient.escapeString(qid.toString()))
            .replaceAll("\\{" + "cid" + "\\}", apiClient.escapeString(cid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSurveyQuestionChoiceValidateBeforeCall(String id, String qid, String cid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteSurveyQuestionChoice(Async)");
        }
        
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling deleteSurveyQuestionChoice(Async)");
        }
        
        // verify the required parameter 'cid' is set
        if (cid == null) {
            throw new ApiException("Missing the required parameter 'cid' when calling deleteSurveyQuestionChoice(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteSurveyQuestionChoiceCall(id, qid, cid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Survey Question Choice
     * Delete a choice for a given survey question.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param cid Choice id (required)
     * @return InlineResponse20117
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20117 deleteSurveyQuestionChoice(String id, String qid, String cid) throws ApiException {
        ApiResponse<InlineResponse20117> resp = deleteSurveyQuestionChoiceWithHttpInfo(id, qid, cid);
        return resp.getData();
    }

    /**
     * Delete Survey Question Choice
     * Delete a choice for a given survey question.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param cid Choice id (required)
     * @return ApiResponse&lt;InlineResponse20117&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20117> deleteSurveyQuestionChoiceWithHttpInfo(String id, String qid, String cid) throws ApiException {
        com.squareup.okhttp.Call call = deleteSurveyQuestionChoiceValidateBeforeCall(id, qid, cid, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20117>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Survey Question Choice (asynchronously)
     * Delete a choice for a given survey question.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param cid Choice id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSurveyQuestionChoiceAsync(String id, String qid, String cid, final ApiCallback<InlineResponse20117> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSurveyQuestionChoiceValidateBeforeCall(id, qid, cid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20117>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteSurveyQuestionChoice_0
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param cid Choice id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSurveyQuestionChoice_0Call(String id, String qid, String cid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys/{id}/questions/{qid}/choices/{cid}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "qid" + "\\}", apiClient.escapeString(qid.toString()))
            .replaceAll("\\{" + "cid" + "\\}", apiClient.escapeString(cid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSurveyQuestionChoice_0ValidateBeforeCall(String id, String qid, String cid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteSurveyQuestionChoice_0(Async)");
        }
        
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling deleteSurveyQuestionChoice_0(Async)");
        }
        
        // verify the required parameter 'cid' is set
        if (cid == null) {
            throw new ApiException("Missing the required parameter 'cid' when calling deleteSurveyQuestionChoice_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteSurveyQuestionChoice_0Call(id, qid, cid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Survey Question Choice
     * Delete a choice for a given survey question.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param cid Choice id (required)
     * @return InlineResponse20117
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20117 deleteSurveyQuestionChoice_0(String id, String qid, String cid) throws ApiException {
        ApiResponse<InlineResponse20117> resp = deleteSurveyQuestionChoice_0WithHttpInfo(id, qid, cid);
        return resp.getData();
    }

    /**
     * Delete Survey Question Choice
     * Delete a choice for a given survey question.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param cid Choice id (required)
     * @return ApiResponse&lt;InlineResponse20117&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20117> deleteSurveyQuestionChoice_0WithHttpInfo(String id, String qid, String cid) throws ApiException {
        com.squareup.okhttp.Call call = deleteSurveyQuestionChoice_0ValidateBeforeCall(id, qid, cid, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20117>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Survey Question Choice (asynchronously)
     * Delete a choice for a given survey question.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param cid Choice id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSurveyQuestionChoice_0Async(String id, String qid, String cid, final ApiCallback<InlineResponse20117> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSurveyQuestionChoice_0ValidateBeforeCall(id, qid, cid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20117>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteSurveyQuestion_0
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSurveyQuestion_0Call(String id, String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys/{id}/questions/{qid}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "qid" + "\\}", apiClient.escapeString(qid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSurveyQuestion_0ValidateBeforeCall(String id, String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteSurveyQuestion_0(Async)");
        }
        
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling deleteSurveyQuestion_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteSurveyQuestion_0Call(id, qid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Survey Question
     * Delete a question from a given survey.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @return InlineResponse20115
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20115 deleteSurveyQuestion_0(String id, String qid) throws ApiException {
        ApiResponse<InlineResponse20115> resp = deleteSurveyQuestion_0WithHttpInfo(id, qid);
        return resp.getData();
    }

    /**
     * Delete Survey Question
     * Delete a question from a given survey.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @return ApiResponse&lt;InlineResponse20115&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20115> deleteSurveyQuestion_0WithHttpInfo(String id, String qid) throws ApiException {
        com.squareup.okhttp.Call call = deleteSurveyQuestion_0ValidateBeforeCall(id, qid, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20115>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Survey Question (asynchronously)
     * Delete a question from a given survey.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSurveyQuestion_0Async(String id, String qid, final ApiCallback<InlineResponse20115> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSurveyQuestion_0ValidateBeforeCall(id, qid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20115>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteSurvey_0
     * @param id Survey id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSurvey_0Call(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSurvey_0ValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteSurvey_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteSurvey_0Call(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Survey
     * Delete a survey.
     * @param id Survey id (required)
     * @return InlineResponse2016
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2016 deleteSurvey_0(String id) throws ApiException {
        ApiResponse<InlineResponse2016> resp = deleteSurvey_0WithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Delete Survey
     * Delete a survey.
     * @param id Survey id (required)
     * @return ApiResponse&lt;InlineResponse2016&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2016> deleteSurvey_0WithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteSurvey_0ValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2016>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Survey (asynchronously)
     * Delete a survey.
     * @param id Survey id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSurvey_0Async(String id, final ApiCallback<InlineResponse2016> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSurvey_0ValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2016>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSurvey
     * @param id Survey id (required)
     * @param associations Include all data associations (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSurveyCall(String id, Boolean associations, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (associations != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "associations", associations));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded", "application/offset+octet-stream", "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSurveyValidateBeforeCall(String id, Boolean associations, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSurvey(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSurveyCall(id, associations, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Survey
     * Get information about a survey.
     * @param id Survey id (required)
     * @param associations Include all data associations (optional)
     * @return InlineResponse2016
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2016 getSurvey(String id, Boolean associations) throws ApiException {
        ApiResponse<InlineResponse2016> resp = getSurveyWithHttpInfo(id, associations);
        return resp.getData();
    }

    /**
     * Get Survey
     * Get information about a survey.
     * @param id Survey id (required)
     * @param associations Include all data associations (optional)
     * @return ApiResponse&lt;InlineResponse2016&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2016> getSurveyWithHttpInfo(String id, Boolean associations) throws ApiException {
        com.squareup.okhttp.Call call = getSurveyValidateBeforeCall(id, associations, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2016>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Survey (asynchronously)
     * Get information about a survey.
     * @param id Survey id (required)
     * @param associations Include all data associations (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSurveyAsync(String id, Boolean associations, final ApiCallback<InlineResponse2016> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSurveyValidateBeforeCall(id, associations, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2016>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSurveyContacts
     * @param id Survey id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSurveyContactsCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys/{id}/contacts"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSurveyContactsValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSurveyContacts(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSurveyContactsCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Survey Contacts
     * Get a list of contacts for a given survey.
     * @param id Survey id (required)
     * @return InlineResponse2004
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2004 getSurveyContacts(String id) throws ApiException {
        ApiResponse<InlineResponse2004> resp = getSurveyContactsWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Survey Contacts
     * Get a list of contacts for a given survey.
     * @param id Survey id (required)
     * @return ApiResponse&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2004> getSurveyContactsWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getSurveyContactsValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Survey Contacts (asynchronously)
     * Get a list of contacts for a given survey.
     * @param id Survey id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSurveyContactsAsync(String id, final ApiCallback<InlineResponse2004> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSurveyContactsValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSurveyContacts_0
     * @param id Survey id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSurveyContacts_0Call(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys/{id}/contacts"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSurveyContacts_0ValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSurveyContacts_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSurveyContacts_0Call(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Survey Contacts
     * Get a list of contacts for a given survey.
     * @param id Survey id (required)
     * @return InlineResponse2004
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2004 getSurveyContacts_0(String id) throws ApiException {
        ApiResponse<InlineResponse2004> resp = getSurveyContacts_0WithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Survey Contacts
     * Get a list of contacts for a given survey.
     * @param id Survey id (required)
     * @return ApiResponse&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2004> getSurveyContacts_0WithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getSurveyContacts_0ValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Survey Contacts (asynchronously)
     * Get a list of contacts for a given survey.
     * @param id Survey id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSurveyContacts_0Async(String id, final ApiCallback<InlineResponse2004> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSurveyContacts_0ValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSurveyQuestionChoices
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSurveyQuestionChoicesCall(String id, String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys/{id}/questions/{qid}/choices"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "qid" + "\\}", apiClient.escapeString(qid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSurveyQuestionChoicesValidateBeforeCall(String id, String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSurveyQuestionChoices(Async)");
        }
        
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling getSurveyQuestionChoices(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSurveyQuestionChoicesCall(id, qid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Survey Question Choices
     * Get a list of all choices for a given survey question.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @return InlineResponse20016
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20016 getSurveyQuestionChoices(String id, String qid) throws ApiException {
        ApiResponse<InlineResponse20016> resp = getSurveyQuestionChoicesWithHttpInfo(id, qid);
        return resp.getData();
    }

    /**
     * Get Survey Question Choices
     * Get a list of all choices for a given survey question.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @return ApiResponse&lt;InlineResponse20016&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20016> getSurveyQuestionChoicesWithHttpInfo(String id, String qid) throws ApiException {
        com.squareup.okhttp.Call call = getSurveyQuestionChoicesValidateBeforeCall(id, qid, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20016>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Survey Question Choices (asynchronously)
     * Get a list of all choices for a given survey question.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSurveyQuestionChoicesAsync(String id, String qid, final ApiCallback<InlineResponse20016> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSurveyQuestionChoicesValidateBeforeCall(id, qid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20016>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSurveyQuestionChoices_0
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSurveyQuestionChoices_0Call(String id, String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys/{id}/questions/{qid}/choices"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "qid" + "\\}", apiClient.escapeString(qid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSurveyQuestionChoices_0ValidateBeforeCall(String id, String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSurveyQuestionChoices_0(Async)");
        }
        
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling getSurveyQuestionChoices_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSurveyQuestionChoices_0Call(id, qid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Survey Question Choices
     * Get a list of all choices for a given survey question.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @return InlineResponse20016
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20016 getSurveyQuestionChoices_0(String id, String qid) throws ApiException {
        ApiResponse<InlineResponse20016> resp = getSurveyQuestionChoices_0WithHttpInfo(id, qid);
        return resp.getData();
    }

    /**
     * Get Survey Question Choices
     * Get a list of all choices for a given survey question.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @return ApiResponse&lt;InlineResponse20016&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20016> getSurveyQuestionChoices_0WithHttpInfo(String id, String qid) throws ApiException {
        com.squareup.okhttp.Call call = getSurveyQuestionChoices_0ValidateBeforeCall(id, qid, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20016>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Survey Question Choices (asynchronously)
     * Get a list of all choices for a given survey question.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSurveyQuestionChoices_0Async(String id, String qid, final ApiCallback<InlineResponse20016> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSurveyQuestionChoices_0ValidateBeforeCall(id, qid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20016>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSurveyQuestions
     * @param id Survey id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSurveyQuestionsCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys/{id}/questions"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSurveyQuestionsValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSurveyQuestions(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSurveyQuestionsCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Survey Questions
     * Get a list of questions for a given survey.
     * @param id Survey id (required)
     * @return InlineResponse20013
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20013 getSurveyQuestions(String id) throws ApiException {
        ApiResponse<InlineResponse20013> resp = getSurveyQuestionsWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Survey Questions
     * Get a list of questions for a given survey.
     * @param id Survey id (required)
     * @return ApiResponse&lt;InlineResponse20013&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20013> getSurveyQuestionsWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getSurveyQuestionsValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20013>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Survey Questions (asynchronously)
     * Get a list of questions for a given survey.
     * @param id Survey id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSurveyQuestionsAsync(String id, final ApiCallback<InlineResponse20013> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSurveyQuestionsValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20013>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSurveyQuestions_0
     * @param id Survey id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSurveyQuestions_0Call(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys/{id}/questions"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSurveyQuestions_0ValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSurveyQuestions_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSurveyQuestions_0Call(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Survey Questions
     * Get a list of questions for a given survey.
     * @param id Survey id (required)
     * @return InlineResponse20013
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20013 getSurveyQuestions_0(String id) throws ApiException {
        ApiResponse<InlineResponse20013> resp = getSurveyQuestions_0WithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Survey Questions
     * Get a list of questions for a given survey.
     * @param id Survey id (required)
     * @return ApiResponse&lt;InlineResponse20013&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20013> getSurveyQuestions_0WithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getSurveyQuestions_0ValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20013>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Survey Questions (asynchronously)
     * Get a list of questions for a given survey.
     * @param id Survey id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSurveyQuestions_0Async(String id, final ApiCallback<InlineResponse20013> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSurveyQuestions_0ValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20013>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSurveyResponses
     * @param id Survey id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSurveyResponsesCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys/{id}/responses"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSurveyResponsesValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSurveyResponses(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSurveyResponsesCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Survey Responses
     * Get a list of responses for a given survey.
     * @param id Survey id (required)
     * @return InlineResponse20014
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20014 getSurveyResponses(String id) throws ApiException {
        ApiResponse<InlineResponse20014> resp = getSurveyResponsesWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Survey Responses
     * Get a list of responses for a given survey.
     * @param id Survey id (required)
     * @return ApiResponse&lt;InlineResponse20014&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20014> getSurveyResponsesWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getSurveyResponsesValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20014>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Survey Responses (asynchronously)
     * Get a list of responses for a given survey.
     * @param id Survey id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSurveyResponsesAsync(String id, final ApiCallback<InlineResponse20014> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSurveyResponsesValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20014>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSurveyResponses_0
     * @param id Survey id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSurveyResponses_0Call(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys/{id}/responses"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSurveyResponses_0ValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSurveyResponses_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSurveyResponses_0Call(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Survey Responses
     * Get a list of responses for a given survey.
     * @param id Survey id (required)
     * @return InlineResponse20014
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20014 getSurveyResponses_0(String id) throws ApiException {
        ApiResponse<InlineResponse20014> resp = getSurveyResponses_0WithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Survey Responses
     * Get a list of responses for a given survey.
     * @param id Survey id (required)
     * @return ApiResponse&lt;InlineResponse20014&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20014> getSurveyResponses_0WithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getSurveyResponses_0ValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20014>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Survey Responses (asynchronously)
     * Get a list of responses for a given survey.
     * @param id Survey id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSurveyResponses_0Async(String id, final ApiCallback<InlineResponse20014> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSurveyResponses_0ValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20014>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSurvey_0
     * @param id Survey id (required)
     * @param associations Include all data associations (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSurvey_0Call(String id, Boolean associations, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (associations != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "associations", associations));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded", "application/offset+octet-stream", "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSurvey_0ValidateBeforeCall(String id, Boolean associations, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSurvey_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSurvey_0Call(id, associations, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Survey
     * Get information about a survey.
     * @param id Survey id (required)
     * @param associations Include all data associations (optional)
     * @return InlineResponse2016
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2016 getSurvey_0(String id, Boolean associations) throws ApiException {
        ApiResponse<InlineResponse2016> resp = getSurvey_0WithHttpInfo(id, associations);
        return resp.getData();
    }

    /**
     * Get Survey
     * Get information about a survey.
     * @param id Survey id (required)
     * @param associations Include all data associations (optional)
     * @return ApiResponse&lt;InlineResponse2016&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2016> getSurvey_0WithHttpInfo(String id, Boolean associations) throws ApiException {
        com.squareup.okhttp.Call call = getSurvey_0ValidateBeforeCall(id, associations, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2016>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Survey (asynchronously)
     * Get information about a survey.
     * @param id Survey id (required)
     * @param associations Include all data associations (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSurvey_0Async(String id, Boolean associations, final ApiCallback<InlineResponse2016> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSurvey_0ValidateBeforeCall(id, associations, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2016>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSurveys
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSurveysCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSurveysValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getSurveysCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Surveys
     * Get a list of surveys.
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2003 getSurveys() throws ApiException {
        ApiResponse<InlineResponse2003> resp = getSurveysWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get Surveys
     * Get a list of surveys.
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2003> getSurveysWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getSurveysValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Surveys (asynchronously)
     * Get a list of surveys.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSurveysAsync(final ApiCallback<InlineResponse2003> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSurveysValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSurveys_0
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSurveys_0Call(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSurveys_0ValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getSurveys_0Call(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Surveys
     * Get a list of surveys.
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2003 getSurveys_0() throws ApiException {
        ApiResponse<InlineResponse2003> resp = getSurveys_0WithHttpInfo();
        return resp.getData();
    }

    /**
     * Get Surveys
     * Get a list of surveys.
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2003> getSurveys_0WithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getSurveys_0ValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Surveys (asynchronously)
     * Get a list of surveys.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSurveys_0Async(final ApiCallback<InlineResponse2003> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSurveys_0ValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSurvey
     * @param id Survey id (required)
     * @param title Survey title (optional)
     * @param contacts Survey contact ids (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSurveyCall(String id, String title, List<String> contacts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (title != null)
        localVarFormParams.put("title", title);
        if (contacts != null)
        localVarFormParams.put("contacts", contacts);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSurveyValidateBeforeCall(String id, String title, List<String> contacts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateSurvey(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateSurveyCall(id, title, contacts, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Survey
     * Update a survey.
     * @param id Survey id (required)
     * @param title Survey title (optional)
     * @param contacts Survey contact ids (optional)
     * @return InlineResponse2016
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2016 updateSurvey(String id, String title, List<String> contacts) throws ApiException {
        ApiResponse<InlineResponse2016> resp = updateSurveyWithHttpInfo(id, title, contacts);
        return resp.getData();
    }

    /**
     * Update Survey
     * Update a survey.
     * @param id Survey id (required)
     * @param title Survey title (optional)
     * @param contacts Survey contact ids (optional)
     * @return ApiResponse&lt;InlineResponse2016&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2016> updateSurveyWithHttpInfo(String id, String title, List<String> contacts) throws ApiException {
        com.squareup.okhttp.Call call = updateSurveyValidateBeforeCall(id, title, contacts, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2016>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Survey (asynchronously)
     * Update a survey.
     * @param id Survey id (required)
     * @param title Survey title (optional)
     * @param contacts Survey contact ids (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSurveyAsync(String id, String title, List<String> contacts, final ApiCallback<InlineResponse2016> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSurveyValidateBeforeCall(id, title, contacts, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2016>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSurveyQuestion
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param question Question prompt (optional)
     * @param attributeName Attribute name used to identify this information (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSurveyQuestionCall(String id, String qid, String question, String attributeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys/{id}/questions/{qid}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "qid" + "\\}", apiClient.escapeString(qid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (question != null)
        localVarFormParams.put("question", question);
        if (attributeName != null)
        localVarFormParams.put("attribute_name", attributeName);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSurveyQuestionValidateBeforeCall(String id, String qid, String question, String attributeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateSurveyQuestion(Async)");
        }
        
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling updateSurveyQuestion(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateSurveyQuestionCall(id, qid, question, attributeName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Survey Question
     * Update a question for a given survey.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param question Question prompt (optional)
     * @param attributeName Attribute name used to identify this information (optional)
     * @return InlineResponse20115
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20115 updateSurveyQuestion(String id, String qid, String question, String attributeName) throws ApiException {
        ApiResponse<InlineResponse20115> resp = updateSurveyQuestionWithHttpInfo(id, qid, question, attributeName);
        return resp.getData();
    }

    /**
     * Update Survey Question
     * Update a question for a given survey.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param question Question prompt (optional)
     * @param attributeName Attribute name used to identify this information (optional)
     * @return ApiResponse&lt;InlineResponse20115&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20115> updateSurveyQuestionWithHttpInfo(String id, String qid, String question, String attributeName) throws ApiException {
        com.squareup.okhttp.Call call = updateSurveyQuestionValidateBeforeCall(id, qid, question, attributeName, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20115>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Survey Question (asynchronously)
     * Update a question for a given survey.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param question Question prompt (optional)
     * @param attributeName Attribute name used to identify this information (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSurveyQuestionAsync(String id, String qid, String question, String attributeName, final ApiCallback<InlineResponse20115> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSurveyQuestionValidateBeforeCall(id, qid, question, attributeName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20115>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSurveyQuestionChoice
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param cid Choice id (required)
     * @param type Input field label (optional)
     * @param label Input field label (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSurveyQuestionChoiceCall(String id, String qid, String cid, String type, String label, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys/{id}/questions/{qid}/choices/{cid}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "qid" + "\\}", apiClient.escapeString(qid.toString()))
            .replaceAll("\\{" + "cid" + "\\}", apiClient.escapeString(cid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (type != null)
        localVarFormParams.put("type", type);
        if (label != null)
        localVarFormParams.put("label", label);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSurveyQuestionChoiceValidateBeforeCall(String id, String qid, String cid, String type, String label, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateSurveyQuestionChoice(Async)");
        }
        
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling updateSurveyQuestionChoice(Async)");
        }
        
        // verify the required parameter 'cid' is set
        if (cid == null) {
            throw new ApiException("Missing the required parameter 'cid' when calling updateSurveyQuestionChoice(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateSurveyQuestionChoiceCall(id, qid, cid, type, label, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Survey Question Choice
     * Update a choice for a given survey question.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param cid Choice id (required)
     * @param type Input field label (optional)
     * @param label Input field label (optional)
     * @return InlineResponse20117
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20117 updateSurveyQuestionChoice(String id, String qid, String cid, String type, String label) throws ApiException {
        ApiResponse<InlineResponse20117> resp = updateSurveyQuestionChoiceWithHttpInfo(id, qid, cid, type, label);
        return resp.getData();
    }

    /**
     * Update Survey Question Choice
     * Update a choice for a given survey question.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param cid Choice id (required)
     * @param type Input field label (optional)
     * @param label Input field label (optional)
     * @return ApiResponse&lt;InlineResponse20117&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20117> updateSurveyQuestionChoiceWithHttpInfo(String id, String qid, String cid, String type, String label) throws ApiException {
        com.squareup.okhttp.Call call = updateSurveyQuestionChoiceValidateBeforeCall(id, qid, cid, type, label, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20117>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Survey Question Choice (asynchronously)
     * Update a choice for a given survey question.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param cid Choice id (required)
     * @param type Input field label (optional)
     * @param label Input field label (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSurveyQuestionChoiceAsync(String id, String qid, String cid, String type, String label, final ApiCallback<InlineResponse20117> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSurveyQuestionChoiceValidateBeforeCall(id, qid, cid, type, label, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20117>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSurveyQuestionChoice_0
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param cid Choice id (required)
     * @param type Input field label (optional)
     * @param label Input field label (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSurveyQuestionChoice_0Call(String id, String qid, String cid, String type, String label, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys/{id}/questions/{qid}/choices/{cid}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "qid" + "\\}", apiClient.escapeString(qid.toString()))
            .replaceAll("\\{" + "cid" + "\\}", apiClient.escapeString(cid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (type != null)
        localVarFormParams.put("type", type);
        if (label != null)
        localVarFormParams.put("label", label);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSurveyQuestionChoice_0ValidateBeforeCall(String id, String qid, String cid, String type, String label, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateSurveyQuestionChoice_0(Async)");
        }
        
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling updateSurveyQuestionChoice_0(Async)");
        }
        
        // verify the required parameter 'cid' is set
        if (cid == null) {
            throw new ApiException("Missing the required parameter 'cid' when calling updateSurveyQuestionChoice_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateSurveyQuestionChoice_0Call(id, qid, cid, type, label, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Survey Question Choice
     * Update a choice for a given survey question.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param cid Choice id (required)
     * @param type Input field label (optional)
     * @param label Input field label (optional)
     * @return InlineResponse20117
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20117 updateSurveyQuestionChoice_0(String id, String qid, String cid, String type, String label) throws ApiException {
        ApiResponse<InlineResponse20117> resp = updateSurveyQuestionChoice_0WithHttpInfo(id, qid, cid, type, label);
        return resp.getData();
    }

    /**
     * Update Survey Question Choice
     * Update a choice for a given survey question.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param cid Choice id (required)
     * @param type Input field label (optional)
     * @param label Input field label (optional)
     * @return ApiResponse&lt;InlineResponse20117&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20117> updateSurveyQuestionChoice_0WithHttpInfo(String id, String qid, String cid, String type, String label) throws ApiException {
        com.squareup.okhttp.Call call = updateSurveyQuestionChoice_0ValidateBeforeCall(id, qid, cid, type, label, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20117>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Survey Question Choice (asynchronously)
     * Update a choice for a given survey question.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param cid Choice id (required)
     * @param type Input field label (optional)
     * @param label Input field label (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSurveyQuestionChoice_0Async(String id, String qid, String cid, String type, String label, final ApiCallback<InlineResponse20117> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSurveyQuestionChoice_0ValidateBeforeCall(id, qid, cid, type, label, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20117>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSurveyQuestion_0
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param question Question prompt (optional)
     * @param attributeName Attribute name used to identify this information (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSurveyQuestion_0Call(String id, String qid, String question, String attributeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys/{id}/questions/{qid}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "qid" + "\\}", apiClient.escapeString(qid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (question != null)
        localVarFormParams.put("question", question);
        if (attributeName != null)
        localVarFormParams.put("attribute_name", attributeName);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSurveyQuestion_0ValidateBeforeCall(String id, String qid, String question, String attributeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateSurveyQuestion_0(Async)");
        }
        
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling updateSurveyQuestion_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateSurveyQuestion_0Call(id, qid, question, attributeName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Survey Question
     * Update a question for a given survey.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param question Question prompt (optional)
     * @param attributeName Attribute name used to identify this information (optional)
     * @return InlineResponse20115
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20115 updateSurveyQuestion_0(String id, String qid, String question, String attributeName) throws ApiException {
        ApiResponse<InlineResponse20115> resp = updateSurveyQuestion_0WithHttpInfo(id, qid, question, attributeName);
        return resp.getData();
    }

    /**
     * Update Survey Question
     * Update a question for a given survey.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param question Question prompt (optional)
     * @param attributeName Attribute name used to identify this information (optional)
     * @return ApiResponse&lt;InlineResponse20115&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20115> updateSurveyQuestion_0WithHttpInfo(String id, String qid, String question, String attributeName) throws ApiException {
        com.squareup.okhttp.Call call = updateSurveyQuestion_0ValidateBeforeCall(id, qid, question, attributeName, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20115>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Survey Question (asynchronously)
     * Update a question for a given survey.
     * @param id Survey id (required)
     * @param qid Question id (required)
     * @param question Question prompt (optional)
     * @param attributeName Attribute name used to identify this information (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSurveyQuestion_0Async(String id, String qid, String question, String attributeName, final ApiCallback<InlineResponse20115> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSurveyQuestion_0ValidateBeforeCall(id, qid, question, attributeName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20115>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSurvey_0
     * @param id Survey id (required)
     * @param title Survey title (optional)
     * @param contacts Survey contact ids (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSurvey_0Call(String id, String title, List<String> contacts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/surveys/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (title != null)
        localVarFormParams.put("title", title);
        if (contacts != null)
        localVarFormParams.put("contacts", contacts);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSurvey_0ValidateBeforeCall(String id, String title, List<String> contacts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateSurvey_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateSurvey_0Call(id, title, contacts, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Survey
     * Update a survey.
     * @param id Survey id (required)
     * @param title Survey title (optional)
     * @param contacts Survey contact ids (optional)
     * @return InlineResponse2016
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2016 updateSurvey_0(String id, String title, List<String> contacts) throws ApiException {
        ApiResponse<InlineResponse2016> resp = updateSurvey_0WithHttpInfo(id, title, contacts);
        return resp.getData();
    }

    /**
     * Update Survey
     * Update a survey.
     * @param id Survey id (required)
     * @param title Survey title (optional)
     * @param contacts Survey contact ids (optional)
     * @return ApiResponse&lt;InlineResponse2016&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2016> updateSurvey_0WithHttpInfo(String id, String title, List<String> contacts) throws ApiException {
        com.squareup.okhttp.Call call = updateSurvey_0ValidateBeforeCall(id, title, contacts, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2016>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Survey (asynchronously)
     * Update a survey.
     * @param id Survey id (required)
     * @param title Survey title (optional)
     * @param contacts Survey contact ids (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSurvey_0Async(String id, String title, List<String> contacts, final ApiCallback<InlineResponse2016> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSurvey_0ValidateBeforeCall(id, title, contacts, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2016>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
