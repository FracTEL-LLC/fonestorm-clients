/*
 * FoneStorm API 2.4.0 (Thunder)
 * FracTEL's Middleware API
 *
 * OpenAPI spec version: 2.4.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import java.math.BigDecimal;
import io.swagger.client.model.Error;
import io.swagger.client.model.InlineResponse20015;
import io.swagger.client.model.InlineResponse2008;
import io.swagger.client.model.InlineResponse20111;
import org.joda.time.LocalDate;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConferencesApi
 */
@Ignore
public class ConferencesApiTest {

    private final ConferencesApi api = new ConferencesApi();

    
    /**
     * Create Conference
     *
     * Create a conference.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConferenceTest() throws ApiException {
        String label = null;
        LocalDate startTime = null;
        LocalDate endTime = null;
        java.math.BigDecimal fonenumber = null;
        String beforeMessage = null;
        String afterMessage = null;
        BigDecimal maxMembers = null;
        InlineResponse20111 response = api.createConference(label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers);

        // TODO: test validations
    }
    
    /**
     * Create Conference
     *
     * Create a conference.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConference_0Test() throws ApiException {
        String label = null;
        LocalDate startTime = null;
        LocalDate endTime = null;
        java.math.BigDecimal fonenumber = null;
        String beforeMessage = null;
        String afterMessage = null;
        BigDecimal maxMembers = null;
        InlineResponse20111 response = api.createConference_0(label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers);

        // TODO: test validations
    }
    
    /**
     * Delete Conference
     *
     * Delete a conference.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConferenceTest() throws ApiException {
        String id = null;
        InlineResponse20111 response = api.deleteConference(id);

        // TODO: test validations
    }
    
    /**
     * Delete Conference
     *
     * Delete a conference.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConference_0Test() throws ApiException {
        String id = null;
        InlineResponse20111 response = api.deleteConference_0(id);

        // TODO: test validations
    }
    
    /**
     * Get Conference
     *
     * Get information about a conference.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConferenceTest() throws ApiException {
        String id = null;
        InlineResponse20111 response = api.getConference(id);

        // TODO: test validations
    }
    
    /**
     * Conference Fonenumbers
     *
     * Get fonenumbers assigned to a conference.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConferenceFonenumbersTest() throws ApiException {
        String id = null;
        InlineResponse20015 response = api.getConferenceFonenumbers(id);

        // TODO: test validations
    }
    
    /**
     * Conference Fonenumbers
     *
     * Get fonenumbers assigned to a conference.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConferenceFonenumbers_0Test() throws ApiException {
        String id = null;
        InlineResponse20015 response = api.getConferenceFonenumbers_0(id);

        // TODO: test validations
    }
    
    /**
     * Get Conference
     *
     * Get information about a conference.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConference_0Test() throws ApiException {
        String id = null;
        InlineResponse20111 response = api.getConference_0(id);

        // TODO: test validations
    }
    
    /**
     * Get Conferences
     *
     * Get a list of all conferences.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConferencesTest() throws ApiException {
        InlineResponse2008 response = api.getConferences();

        // TODO: test validations
    }
    
    /**
     * Get Conferences
     *
     * Get a list of all conferences.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConferences_0Test() throws ApiException {
        InlineResponse2008 response = api.getConferences_0();

        // TODO: test validations
    }
    
    /**
     * Update Conference
     *
     * Update a conference.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateConferenceTest() throws ApiException {
        String id = null;
        String label = null;
        LocalDate startTime = null;
        LocalDate endTime = null;
        java.math.BigDecimal fonenumber = null;
        String beforeMessage = null;
        String afterMessage = null;
        BigDecimal maxMembers = null;
        InlineResponse20111 response = api.updateConference(id, label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers);

        // TODO: test validations
    }
    
    /**
     * Update Conference
     *
     * Update a conference.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateConference_0Test() throws ApiException {
        String id = null;
        String label = null;
        LocalDate startTime = null;
        LocalDate endTime = null;
        java.math.BigDecimal fonenumber = null;
        String beforeMessage = null;
        String afterMessage = null;
        BigDecimal maxMembers = null;
        InlineResponse20111 response = api.updateConference_0(id, label, startTime, endTime, fonenumber, beforeMessage, afterMessage, maxMembers);

        // TODO: test validations
    }
    
}
