/*
 * FoneStorm API 2.4.0 (Thunder)
 * FracTEL's Middleware API
 *
 * OpenAPI spec version: 2.4.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import java.math.BigDecimal;
import io.swagger.client.model.Error;
import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.InlineResponse2012;
import org.joda.time.LocalDate;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EventsApi
 */
@Ignore
public class EventsApiTest {

    private final EventsApi api = new EventsApi();

    
    /**
     * Create Event
     *
     * Create an event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEventTest() throws ApiException {
        String id = null;
        String organizerContactId = null;
        LocalDate startTime = null;
        LocalDate endTime = null;
        String title = null;
        List<String> attendees = null;
        String description = null;
        String location = null;
        String status = null;
        BigDecimal rescheduleCount = null;
        InlineResponse2012 response = api.createEvent(id, organizerContactId, startTime, endTime, title, attendees, description, location, status, rescheduleCount);

        // TODO: test validations
    }
    
    /**
     * Create Event
     *
     * Create an event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEvent_0Test() throws ApiException {
        String id = null;
        String organizerContactId = null;
        LocalDate startTime = null;
        LocalDate endTime = null;
        String title = null;
        List<String> attendees = null;
        String description = null;
        String location = null;
        String status = null;
        BigDecimal rescheduleCount = null;
        InlineResponse2012 response = api.createEvent_0(id, organizerContactId, startTime, endTime, title, attendees, description, location, status, rescheduleCount);

        // TODO: test validations
    }
    
    /**
     * Delete Event
     *
     * Delete a single event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEventTest() throws ApiException {
        String id = null;
        InlineResponse2012 response = api.deleteEvent(id);

        // TODO: test validations
    }
    
    /**
     * Delete Event
     *
     * Delete a single event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEvent_0Test() throws ApiException {
        String id = null;
        InlineResponse2012 response = api.deleteEvent_0(id);

        // TODO: test validations
    }
    
    /**
     * Get Event
     *
     * Get information about an event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventTest() throws ApiException {
        String id = null;
        InlineResponse2012 response = api.getEvent(id);

        // TODO: test validations
    }
    
    /**
     * Get Event
     *
     * Get information about an event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEvent_0Test() throws ApiException {
        String id = null;
        InlineResponse2012 response = api.getEvent_0(id);

        // TODO: test validations
    }
    
    /**
     * Get Events
     *
     * Get a list of all events.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventsTest() throws ApiException {
        InlineResponse2001 response = api.getEvents();

        // TODO: test validations
    }
    
    /**
     * Get Events
     *
     * Get a list of all events.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEvents_0Test() throws ApiException {
        InlineResponse2001 response = api.getEvents_0();

        // TODO: test validations
    }
    
    /**
     * Update Event
     *
     * Update an event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEventTest() throws ApiException {
        String id = null;
        String organizerContactId = null;
        LocalDate startTime = null;
        LocalDate endTime = null;
        String title = null;
        String description = null;
        String location = null;
        List<String> attendees = null;
        String status = null;
        BigDecimal rescheduleCount = null;
        InlineResponse2012 response = api.updateEvent(id, organizerContactId, startTime, endTime, title, description, location, attendees, status, rescheduleCount);

        // TODO: test validations
    }
    
    /**
     * Update Event
     *
     * Update an event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEvent_0Test() throws ApiException {
        String id = null;
        String organizerContactId = null;
        LocalDate startTime = null;
        LocalDate endTime = null;
        String title = null;
        String description = null;
        String location = null;
        List<String> attendees = null;
        String status = null;
        BigDecimal rescheduleCount = null;
        InlineResponse2012 response = api.updateEvent_0(id, organizerContactId, startTime, endTime, title, description, location, attendees, status, rescheduleCount);

        // TODO: test validations
    }
    
}
